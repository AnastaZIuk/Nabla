#ifndef float_t
#error Define float_t before including 
#endif
#ifndef TYPED_NUMBER
#error Define TYPED_NUMBER before including 
#endif

#ifndef LOW_TWIDDLE_BITS
#error Define LOW_TWIDDLE_BITS before including 
#endif
#ifndef MID_TWIDDLE_BITS
#error Define MID_TWIDDLE_BITS before including 
#endif
#ifndef HIGH_TWIDDLE_BITS
#error Define HIGH_TWIDDLE_BITS before including 
#endif

#define NAMESPACE_NAME NBL_CONCATENATE(twiddles_, float_t) 

namespace NAMESPACE_NAME {
    
    // -------------------------------------------- 64th roots of unity --------------------------------------------------------

    NBL_CONSTEXPR float_t low_real[1u << LOW_TWIDDLE_BITS] = {
        TYPED_NUMBER(1),
        TYPED_NUMBER(0.9951847266721969),
        TYPED_NUMBER(0.9807852804032304),
        TYPED_NUMBER(0.9569403357322088),
        TYPED_NUMBER(0.9238795325112867),
        TYPED_NUMBER(0.881921264348355),
        TYPED_NUMBER(0.8314696123025452),
        TYPED_NUMBER(0.773010453362737),
        TYPED_NUMBER(0.7071067811865476),
        TYPED_NUMBER(0.6343932841636455),
        TYPED_NUMBER(0.5555702330196023),
        TYPED_NUMBER(0.4713967368259978),
        TYPED_NUMBER(0.3826834323650898),
        TYPED_NUMBER(0.2902846772544623),
        TYPED_NUMBER(0.1950903220161283),
        TYPED_NUMBER(0.09801714032956077),
        TYPED_NUMBER(0),
        TYPED_NUMBER(-0.09801714032956065),
        TYPED_NUMBER(-0.1950903220161282),
        TYPED_NUMBER(-0.2902846772544622),
        TYPED_NUMBER(-0.3826834323650897),
        TYPED_NUMBER(-0.4713967368259977),
        TYPED_NUMBER(-0.555570233019602),
        TYPED_NUMBER(-0.6343932841636454),
        TYPED_NUMBER(-0.7071067811865475),
        TYPED_NUMBER(-0.773010453362737),
        TYPED_NUMBER(-0.8314696123025453),
        TYPED_NUMBER(-0.8819212643483549),
        TYPED_NUMBER(-0.9238795325112867),
        TYPED_NUMBER(-0.9569403357322088),
        TYPED_NUMBER(-0.9807852804032304),
        TYPED_NUMBER(-0.9951847266721968),
        TYPED_NUMBER(-1),
        TYPED_NUMBER(-0.9951847266721969),
        TYPED_NUMBER(-0.9807852804032304),
        TYPED_NUMBER(-0.9569403357322089),
        TYPED_NUMBER(-0.9238795325112868),
        TYPED_NUMBER(-0.881921264348355),
        TYPED_NUMBER(-0.8314696123025455),
        TYPED_NUMBER(-0.7730104533627371),
        TYPED_NUMBER(-0.7071067811865477),
        TYPED_NUMBER(-0.6343932841636459),
        TYPED_NUMBER(-0.5555702330196022),
        TYPED_NUMBER(-0.4713967368259979),
        TYPED_NUMBER(-0.3826834323650903),
        TYPED_NUMBER(-0.2902846772544624),
        TYPED_NUMBER(-0.1950903220161287),
        TYPED_NUMBER(-0.09801714032956045),
        TYPED_NUMBER(0),
        TYPED_NUMBER(0.09801714032956009),
        TYPED_NUMBER(0.1950903220161283),
        TYPED_NUMBER(0.2902846772544621),
        TYPED_NUMBER(0.38268343236509),
        TYPED_NUMBER(0.4713967368259976),
        TYPED_NUMBER(0.5555702330196018),
        TYPED_NUMBER(0.6343932841636456),
        TYPED_NUMBER(0.7071067811865474),
        TYPED_NUMBER(0.7730104533627367),
        TYPED_NUMBER(0.8314696123025452),
        TYPED_NUMBER(0.8819212643483548),
        TYPED_NUMBER(0.9238795325112865),
        TYPED_NUMBER(0.9569403357322088),
        TYPED_NUMBER(0.9807852804032303),
        TYPED_NUMBER(0.9951847266721969)                                   
    }
    
    // This array is the same as above but right shifted a quarter of a turn (16 positions since it's a 64th primitive root)
    // Could reduce the memory used by half with this info, but I don't know if having it duplicated could potentially help avoid bank conflicts
    // when NOT doing subgroup-sized FFTs
    NBL_CONSTEXPR float_t low_imag[1u << LOW_TWIDDLE_BITS] = {
        TYPED_NUMBER(0),
        TYPED_NUMBER(0.0980171403295606),
        TYPED_NUMBER(0.1950903220161282),
        TYPED_NUMBER(0.2902846772544623),
        TYPED_NUMBER(0.3826834323650898),
        TYPED_NUMBER(0.4713967368259976),
        TYPED_NUMBER(0.5555702330196022),
        TYPED_NUMBER(0.6343932841636455),
        TYPED_NUMBER(0.7071067811865475),
        TYPED_NUMBER(0.773010453362737),
        TYPED_NUMBER(0.8314696123025452),
        TYPED_NUMBER(0.8819212643483549),
        TYPED_NUMBER(0.9238795325112867),
        TYPED_NUMBER(0.9569403357322089),
        TYPED_NUMBER(0.9807852804032304),
        TYPED_NUMBER(0.9951847266721968),
        TYPED_NUMBER(1),
        TYPED_NUMBER(0.9951847266721969),
        TYPED_NUMBER(0.9807852804032304),
        TYPED_NUMBER(0.9569403357322089),
        TYPED_NUMBER(0.9238795325112867),
        TYPED_NUMBER(0.881921264348355),
        TYPED_NUMBER(0.8314696123025455),
        TYPED_NUMBER(0.7730104533627371),
        TYPED_NUMBER(0.7071067811865476),
        TYPED_NUMBER(0.6343932841636455),
        TYPED_NUMBER(0.5555702330196022),
        TYPED_NUMBER(0.4713967368259979),
        TYPED_NUMBER(0.3826834323650899),
        TYPED_NUMBER(0.2902846772544624),
        TYPED_NUMBER(0.1950903220161286),
        TYPED_NUMBER(0.09801714032956083),
        TYPED_NUMBER(0),
        TYPED_NUMBER(-0.09801714032956059),
        TYPED_NUMBER(-0.1950903220161284),
        TYPED_NUMBER(-0.2902846772544621),
        TYPED_NUMBER(-0.3826834323650897),
        TYPED_NUMBER(-0.4713967368259976),
        TYPED_NUMBER(-0.555570233019602),
        TYPED_NUMBER(-0.6343932841636453),
        TYPED_NUMBER(-0.7071067811865475),
        TYPED_NUMBER(-0.7730104533627367),
        TYPED_NUMBER(-0.8314696123025452),
        TYPED_NUMBER(-0.8819212643483549),
        TYPED_NUMBER(-0.9238795325112865),
        TYPED_NUMBER(-0.9569403357322088),
        TYPED_NUMBER(-0.9807852804032303),
        TYPED_NUMBER(-0.9951847266721969),
        TYPED_NUMBER(-1),
        TYPED_NUMBER(-0.9951847266721969),
        TYPED_NUMBER(-0.9807852804032304),
        TYPED_NUMBER(-0.9569403357322089),
        TYPED_NUMBER(-0.9238795325112866),
        TYPED_NUMBER(-0.881921264348355),
        TYPED_NUMBER(-0.8314696123025455),
        TYPED_NUMBER(-0.7730104533627369),
        TYPED_NUMBER(-0.7071067811865477),
        TYPED_NUMBER(-0.6343932841636459),
        TYPED_NUMBER(-0.5555702330196022),
        TYPED_NUMBER(-0.4713967368259979),
        TYPED_NUMBER(-0.3826834323650904),
        TYPED_NUMBER(-0.2902846772544625),
        TYPED_NUMBER(-0.1950903220161287),
        TYPED_NUMBER(-0.09801714032956051)                                  
    }                        

    // ---------------------------------------- Powers 0-31 of the first 64th root of unity -----------------------------------
    
    NBL_CONSTEXPR float_t mid_real[1u << MID_TWIDDLE_BITS] = {
        TYPED_NUMBER(1),
        TYPED_NUMBER(0.9999952938095762),
        TYPED_NUMBER(0.9999811752826011),
        TYPED_NUMBER(0.9999576445519639),
        TYPED_NUMBER(0.9999247018391445),
        TYPED_NUMBER(0.9998823474542126),
        TYPED_NUMBER(0.9998305817958236),
        TYPED_NUMBER(0.9997694053512155),
        TYPED_NUMBER(0.9996988186962045),
        TYPED_NUMBER(0.9996188224951789),
        TYPED_NUMBER(0.9995294175010934),
        TYPED_NUMBER(0.999430604555462),
        TYPED_NUMBER(0.9993223845883498),
        TYPED_NUMBER(0.9992047586183641),
        TYPED_NUMBER(0.9990777277526456),
        TYPED_NUMBER(0.9989412931868571),
        TYPED_NUMBER(0.9987954562051726),
        TYPED_NUMBER(0.9986402181802657),
        TYPED_NUMBER(0.9984755805732952),
        TYPED_NUMBER(0.9983015449338933),
        TYPED_NUMBER(0.9981181129001496),
        TYPED_NUMBER(0.9979252861985964),
        TYPED_NUMBER(0.9977230666441921),
        TYPED_NUMBER(0.9975114561403039),
        TYPED_NUMBER(0.9972904566786907),
        TYPED_NUMBER(0.9970600703394834),
        TYPED_NUMBER(0.9968202992911661),
        TYPED_NUMBER(0.9965711457905553),
        TYPED_NUMBER(0.9963126121827784),
        TYPED_NUMBER(0.9960447009012526),
        TYPED_NUMBER(0.9957674144676605),
        TYPED_NUMBER(0.9954807554919276)                                    
    }
    
    NBL_CONSTEXPR float_t mid_imag[1u << MID_TWIDDLE_BITS] = {
        TYPED_NUMBER(0),
        TYPED_NUMBER(0.003067956762965976),
        TYPED_NUMBER(0.006135884649154475),
        TYPED_NUMBER(0.009203754782059819),
        TYPED_NUMBER(0.01227153828571993),
        TYPED_NUMBER(0.0153392062849881),
        TYPED_NUMBER(0.01840672990580482),
        TYPED_NUMBER(0.02147408027546951),
        TYPED_NUMBER(0.0245412285229123),
        TYPED_NUMBER(0.02760814577896575),
        TYPED_NUMBER(0.03067480317663663),
        TYPED_NUMBER(0.03374117185137759),
        TYPED_NUMBER(0.03680722294135884),
        TYPED_NUMBER(0.03987292758773982),
        TYPED_NUMBER(0.04293825693494083),
        TYPED_NUMBER(0.04600318213091463),
        TYPED_NUMBER(0.04906767432741803),
        TYPED_NUMBER(0.05213170468028334),
        TYPED_NUMBER(0.05519524434968996),
        TYPED_NUMBER(0.05825826450043578),
        TYPED_NUMBER(0.06132073630220861),
        TYPED_NUMBER(0.06438263092985749),
        TYPED_NUMBER(0.06744391956366408),
        TYPED_NUMBER(0.07050457338961388),
        TYPED_NUMBER(0.07356456359966745),
        TYPED_NUMBER(0.07662386139203152),
        TYPED_NUMBER(0.07968243797143017),
        TYPED_NUMBER(0.08274026454937573),
        TYPED_NUMBER(0.08579731234443994),
        TYPED_NUMBER(0.08885355258252466),
        TYPED_NUMBER(0.09190895649713278),
        TYPED_NUMBER(0.09496349532963906)                                   
    }

    // ---------------------------------------- Powers 0-15 of the first element in the previous array -----------------------------------
    NBL_CONSTEXPR float_t high_real[1u << HIGH_TWIDDLE_BITS] = {
        TYPED_NUMBER(1),
        TYPED_NUMBER(0.9999999816164293),
        TYPED_NUMBER(0.9999999264657179),
        TYPED_NUMBER(0.9999998345478679),
        TYPED_NUMBER(0.9999997058628824),
        TYPED_NUMBER(0.9999995404107663),
        TYPED_NUMBER(0.9999993381915258),
        TYPED_NUMBER(0.9999990992051681),
        TYPED_NUMBER(0.9999988234517021),
        TYPED_NUMBER(0.9999985109311382),
        TYPED_NUMBER(0.9999981616434874),
        TYPED_NUMBER(0.9999977755887628),
        TYPED_NUMBER(0.9999973527669787),
        TYPED_NUMBER(0.9999968931781503),
        TYPED_NUMBER(0.999996396822295),
        TYPED_NUMBER(0.9999958636994306)    
    }

    NBL_CONSTEXPR float_t high_imag[1u << HIGH_TWIDDLE_BITS] = {
        TYPED_NUMBER(0),
        TYPED_NUMBER(0.0001917475973107033),
        TYPED_NUMBER(0.0003834951875713955),
        TYPED_NUMBER(0.0005752427637320661),
        TYPED_NUMBER(0.0007669903187427046),
        TYPED_NUMBER(0.0009587378455533015),
        TYPED_NUMBER(0.001150485337113848),
        TYPED_NUMBER(0.001342232786374338),
        TYPED_NUMBER(0.001533980186284766),
        TYPED_NUMBER(0.001725727529795127),
        TYPED_NUMBER(0.00191747480985542),
        TYPED_NUMBER(0.002109222019415645),
        TYPED_NUMBER(0.002300969151425805),
        TYPED_NUMBER(0.002492716198835909),
        TYPED_NUMBER(0.002684463154595963),
        TYPED_NUMBER(0.002876210011655981)
    }               
}

template<>
complex_t<float_t> getHigh(uint32_t highIdx){
    complex_t<float_t> retVal = {NAMESPACE_NAME::high_real[highIdx], NAMESPACE_NAME::high_imag[highIdx]};
    return retVal;                                            
} 

template<>
complex_t<float_t> getMid(uint32_t midIdx){
    complex_t<float_t> retVal = {NAMESPACE_NAME::mid_real[midIdx], NAMESPACE_NAME::mid_imag[midIdx]};
    return retVal;                                            
} 

template<>
complex_t<float_t> getLow(uint32_t lowIdx){
    complex_t<float_t> retVal = {NAMESPACE_NAME::low_real[lowIdx], NAMESPACE_NAME::low_imag[lowIdx]};
    return retVal;                                            
}

#undef NAMESPACE_NAME