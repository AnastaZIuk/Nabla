#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
layout(local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_SET_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_BINDING_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_BINDING_DEFINED_ 1
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_DESCRIPTOR_DEFINED_

layout (set = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_SET_DEFINED_, binding = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_BINDING_DEFINED_, std430) buffer inout_buffer
{
	uvec2 inout_values[];
};

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_INOUT_DESCRIPTOR_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_DESCRIPTOR_DEFINED_

layout (set = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_SET_DEFINED_, binding = _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_BINDING_DEFINED_, std430) writeonly buffer histogram_out_buffer
{
	uint histogram_out_values[];
};

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_OUTPUT_DESCRIPTOR_DEFINED_
#endif

#include "nbl/builtin/glsl/ext/RadixSort/parameters_struct.glsl"
#include "nbl/builtin/glsl/ext/RadixSort/parameters.glsl"

#ifndef _NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_
#error "You need to define `_NBL_GLSL_EXT_RADIXSORT_BUCKET_COUNT_`!"
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_PUSH_CONSTANTS_DEFINED_

layout(push_constant) uniform PushConstants
{
	layout (offset = 0) nbl_glsl_ext_RadixSort_Parameters_t params;
} pc;

#define _NBL_GLSL_EXT_RADIXSORT_PUSH_CONSTANTS_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_GET_PARAMETERS_DEFINED_

nbl_glsl_ext_RadixSort_Parameters_t nbl_glsl_ext_RadixSort_getParameters()
{
	return pc.params;
}

#define _NBL_GLSL_EXT_RADIXSORT_GET_PARAMETERS_DEFINED_
#endif

#include <nbl/builtin/glsl/limits/numeric.glsl>

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_GET_PADDED_DATA_DEFINED_

uvec2 nbl_glsl_ext_RadixSort_getPaddedData(in uint idx)
{
	uvec2 data = uvec2(UINT_MAX);
	if (idx < nbl_glsl_ext_RadixSort_Parameters_t_getElementCountTotal())
		data = inout_values[idx];

	return data;
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_GET_PADDED_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_DATA_DEFINED_

void nbl_glsl_ext_RadixSort_setData(in uint idx, in uvec2 data)
{
	if (idx < nbl_glsl_ext_RadixSort_Parameters_t_getElementCountTotal())
		inout_values[idx] = data;
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_HISTOGRAM_DEFINED_

void nbl_glsl_ext_RadixSort_setHistogram(in uint idx, in uint val)
{
	histogram_out_values[idx] = val;
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_SET_HISTOGRAM_DEFINED_
#endif

#ifndef _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_
#define _NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_ (_NBL_GLSL_WORKGROUP_SIZE_ * 2)
shared uint scratch_shared[_NBL_GLSL_SCRATCH_SHARED_SIZE_DEFINED_];
#endif
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ scratch_shared

#include "nbl/builtin/glsl/ext/RadixSort/radix_sort.glsl"

#ifndef _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_MAIN_DEFINED_

void main()
{
	uvec2 data = nbl_glsl_ext_RadixSort_getPaddedData(gl_GlobalInvocationID.x);
	const uint digit = nbl_glsl_ext_RadixSort_extractDigit(data.x);

	groupMemoryBarrier();

	uint scatter_idx = nbl_glsl_ext_RadixSort_workgroupCompact(digit);

	// Here I am assuming scratch_shared has exclusive prefix sum of local histogram
	// we could change the name of `nbl_glsl_ext_RadixSort_workgroupCompact` to reflect that

	const uint local_offset = scratch_shared[digit];
	scatter_idx += local_offset;
	barrier();

	scratch_shared[scatter_idx] = data.x;
	scratch_shared[_NBL_GLSL_WORKGROUP_SIZE_ + scatter_idx] = data.y;
	barrier();

	data = uvec2(scratch_shared[gl_LocalInvocationIndex], scratch_shared[gl_LocalInvocationIndex + _NBL_GLSL_WORKGROUP_SIZE_]);

	nbl_glsl_ext_RadixSort_setData(gl_GlobalInvocationID.x, data);
}

#define _NBL_GLSL_EXT_RADIXSORT_HISTOGRAM_MAIN_DEFINED_
#endif