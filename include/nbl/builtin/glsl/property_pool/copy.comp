#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;

#include "nbl/builtin/glsl/property_pool/transfer.glsl"

layout(set=0,binding=0) readonly restrict buffer Addresses
{
    int transferData[_NBL_BUILTIN_MAX_PROPERTIES_PER_COPY_*_NBL_BUILTIN_PROPERTY_POOL_TRANSFER_T_SIZE_/4];
    uint addresses[];
};
nbl_glsl_property_pool_transfer_t getTransferData(in uint propID)
{
    const uint base = propID*(_NBL_BUILTIN_PROPERTY_POOL_TRANSFER_T_SIZE_/4);
    return nbl_glsl_property_pool_transfer_t(transferData[base+0u],transferData[base+1u],transferData[base+2u],transferData[base+3u]);
}

layout(set=0,binding=1) readonly buffer InData
{
    uint data[];
} inBuff[_NBL_BUILTIN_MAX_PROPERTIES_PER_COPY_];
layout(set=0,binding=2) writeonly buffer OutData
{
    uint data[];
} outBuff[_NBL_BUILTIN_MAX_PROPERTIES_PER_COPY_];



void main()
{
    const uint propID = gl_WorkGroupID.y;
    const nbl_glsl_property_pool_transfer_t transfer = getTransferData(propID);

	const bool download = transfer.propertyDWORDsize_upDownFlag<0;
	const uint propDWORDs = uint(download ? (-transfer.propertyDWORDsize_upDownFlag):transfer.propertyDWORDsize_upDownFlag);

    const uint index = gl_GlobalInvocationID.x/propDWORDs;
    if (index>=transfer.elementCount)
        return;
        
    const uint srcAddress = transfer.srcIndexOffset!=_NBL_BUILTIN_PROPERTY_POOL_INVALID_ ? addresses[index+transfer.srcIndexOffset]:index;
    const uint dstAddress = transfer.dstIndexOffset!=_NBL_BUILTIN_PROPERTY_POOL_INVALID_ ? addresses[index+transfer.dstIndexOffset]:index;
	// its equivalent to `addresses[index]*propDWORDs+gl_GlobalInvocationID.x%propDWORDs`
	const uint srcDWORD = (srcAddress-index)*propDWORDs+gl_GlobalInvocationID.x;
	const uint dstDWORD = (dstAddress-index)*propDWORDs+gl_GlobalInvocationID.x;
    outBuff[propID].data[dstDWORD] = inBuff[propID].data[srcDWORD];
}