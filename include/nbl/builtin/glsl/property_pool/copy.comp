#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;

#include "nbl/builtin/glsl/property_pool/transfer.glsl"

layout(set=0,binding=0) readonly restrict buffer Addresses
{
    int transferData[_NBL_BUILTIN_MAX_PROPERTIES_PER_COPY_*_NBL_BUILTIN_PROPERTY_POOL_TRANSFER_T_SIZE_/4];
    uint addresses[];
};
nbl_glsl_property_pool_transfer_t getTransferData(in uint propID)
{
    const uint base = propID*3u;
    return nbl_glsl_property_pool_transfer_t(transferData[base+0u],transferData[base+1u],transferData[base+2u]);
}

layout(set=0,binding=1) readonly restrict buffer InData
{
    uint data[];
} inBuff[_NBL_BUILTIN_MAX_PROPERTIES_PER_COPY_];
layout(set=0,binding=2) writeonly restrict buffer OutData
{
    uint data[];
} outBuff[_NBL_BUILTIN_MAX_PROPERTIES_PER_COPY_];



void main()
{
    const uint propID = gl_WorkGroupID.y;
    const nbl_glsl_property_pool_transfer_t transfer = getTransferData(propID);

	const bool download = transfer.propertyDWORDsize_upDownFlag<0;
	const uint propDWORDs = uint(download ? (-transfer.propertyDWORDsize_upDownFlag):transfer.propertyDWORDsize_upDownFlag);

    const uint index = gl_GlobalInvocationID.x/propDWORDs;
    if (index>=transfer.elementCount)
        return;
        
    const uint address = addresses[index+transfer.indexOffset];
	// its equivalent to `addresses[index]*propDWORDs+gl_GlobalInvocationID.x%propDWORDs`
	const uint redir = (address-index)*propDWORDs+gl_GlobalInvocationID.x;

    const uint inIndex = download ? redir:gl_GlobalInvocationID.x;
    const uint outIndex = download ? gl_GlobalInvocationID.x:redir;
    if (address!=_NBL_BUILTIN_PROPERTY_POOL_INVALID_)
    	outBuff[propID].data[outIndex] = inBuff[propID].data[inIndex];
}