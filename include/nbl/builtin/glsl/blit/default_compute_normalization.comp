#include <nbl/builtin/glsl/blit/default_compute_common.comp>

#define _NBL_GLSL_BLIT_NORMALIZATION_IN_SAMPLER_TYPE_ _NBL_GLSL_BLIT_IN_SAMPLER_TYPE_
#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ _NBL_GLSL_BLIT_OUT_IMAGE_TYPE_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_FORMAT_
#error _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_FORMAT_ must be defined
#endif

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_X_, local_size_y = _NBL_GLSL_WORKGROUP_SIZE_Y_, local_size_z = _NBL_GLSL_WORKGROUP_SIZE_Z_) in;

#include <nbl/builtin/glsl/blit/normalization/normalization.glsl>
#include <nbl/builtin/glsl/blit/normalization/descriptors.glsl>

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_ must be defined
#endif

vec4 nbl_glsl_blit_normalization_getData(in ivec3 coord)
{
#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 1)
	return texelFetch(_NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_, coord.xy, 0);
#else
	return texelFetch(_NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_, coord, 0);
#endif
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_SET_DATA_DEFINED_
#define _NBL_GLSL_BLIT_NORMALIZATION_SET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_ must be defined
#endif

vec4 nbl_glsl_blit_formats_encode(in vec4 value)
{
	return value;
}

void nbl_glsl_blit_normalization_setData(in vec4 value, in ivec3 coord)
{
#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 1)
	imageStore(_NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_, coord.xy, nbl_glsl_blit_formats_encode(value));
#else
	imageStore(_NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_, coord, nbl_glsl_blit_formats_encode(value));
#endif
}
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_ALPHA_HISTOGRAM_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_ must be defined
#endif

uint nbl_glsl_blit_normalization_getAlphaHistogramData(in uint index, in uint layerIdx)
{
	return _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_.data[layerIdx].histogram[index];
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_ALPHA_HISTOGRAM_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PASSED_INPUT_PIXEL_COUNT_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_ must be defined
#endif

// Todo(achal): Why is there a data in the function name??!!
uint nbl_glsl_blit_normalization_getPassedInputPixelCountData(in uint layerIdx)
{
	return _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_.data[layerIdx].passedPixelCount;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PASSED_INPUT_PIXEL_COUNT_DATA_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_normalization_main();
}
