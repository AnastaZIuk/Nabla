#version 460 core

#include <nbl/builtin/glsl/macros.glsl>

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_BIN_COUNT_
#define _NBL_GLSL_BLIT_NORMALIZATION_BIN_COUNT_ 256
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_
#error _NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_ must be defined
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_FORMAT_
#error _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_FORMAT_ must be defined
#endif


#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 1)
	#define _NBL_GLSL_BLIT_NORMALIZATION_IN_SAMPLER_TYPE_ sampler1DArray
	#ifdef _NBL_GLSL_BLIT_NORMALIZATION_SOFTWARE_CODEC_
		#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ uimage1DArray
	#else
		#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ image1DArray
	#endif

	#define WG_X 256
	#define WG_Y 1
	#define WG_Z 1
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 2)
	#define _NBL_GLSL_BLIT_NORMALIZATION_IN_SAMPLER_TYPE_ sampler2DArray
	#ifdef _NBL_GLSL_BLIT_NORMALIZATION_SOFTWARE_CODEC_
		#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ uimage2DArray
	#else
		#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ image2DArray
	#endif

	#define WG_X 16
	#define WG_Y 16
	#define WG_Z 1
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 3)
	#define _NBL_GLSL_BLIT_NORMALIZATION_IN_SAMPLER_TYPE_ sampler3D
	#ifdef _NBL_GLSL_BLIT_NORMALIZATION_SOFTWARE_CODEC_
		#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ uimage3D
	#else
		#define _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_TYPE_ image3D
	#endif

	#define WG_X 8
	#define WG_Y 8
	#define WG_Z 4
#else
	#error _NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_ not supported
#endif

#ifndef _NBL_GLSL_WORKGROUP_SIZE_X_
#define _NBL_GLSL_WORKGROUP_SIZE_X_ WG_X
#endif

#ifndef _NBL_GLSL_WORKGROUP_SIZE_Y_
#define _NBL_GLSL_WORKGROUP_SIZE_Y_ WG_Y
#endif

#ifndef _NBL_GLSL_WORKGROUP_SIZE_Z_
#define _NBL_GLSL_WORKGROUP_SIZE_Z_ WG_Z
#endif

#undef WG_X
#undef WG_Y
#undef WG_Z

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_PIXEL_TYPE_DEFINED_
#define _NBL_GLSL_BLIT_NORMALIZATION_PIXEL_TYPE_DEFINED_
struct nbl_glsl_blit_normalization_pixel_t
{
	vec4 data;
};
#endif

#define _NBL_GLSL_WORKGROUP_SIZE_ (_NBL_GLSL_WORKGROUP_SIZE_X_ * _NBL_GLSL_WORKGROUP_SIZE_Y_ * _NBL_GLSL_WORKGROUP_SIZE_Z_)

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_X_, local_size_y = _NBL_GLSL_WORKGROUP_SIZE_Y_, local_size_z = _NBL_GLSL_WORKGROUP_SIZE_Z_) in;

#include <nbl/builtin/glsl/blit/parameters.glsl>
#include <nbl/builtin/glsl/blit/normalization/normalization.glsl>
#include <nbl/builtin/glsl/blit/normalization/descriptors.glsl>

layout (push_constant) uniform Block
{
	nbl_glsl_blit_parameters_t params;
} pc;

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PARAMETERS_DEFINED_
nbl_glsl_blit_parameters_t nbl_glsl_blit_normalization_getParameters()
{
	return pc.params;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PARAMETERS_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PADDED_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_ must be defined
#endif

nbl_glsl_blit_normalization_pixel_t nbl_glsl_blit_normalization_getPaddedData(in ivec3 coord)
{
	const nbl_glsl_blit_parameters_t params = nbl_glsl_blit_normalization_getParameters();

#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 1)
	#define COORD coord.xy
	#define IMAGE_DIM params.outDim.xy
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 2)
	#define COORD coord
	#define IMAGE_DIM params.outDim
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 3)
	#define COORD coord
	#define IMAGE_DIM params.outDim
#else
	#error _NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_ not supported
#endif

	nbl_glsl_blit_normalization_pixel_t result;
	result.data = vec4(0.f);
	if (all(lessThan(COORD, IMAGE_DIM)))
	{
		result.data = texelFetch(_NBL_GLSL_BLIT_NORMALIZATION_IN_IMAGE_DESCRIPTOR_DEFINED_, COORD, 0);
	}

#undef COORD
#undef IMAGE_DIM

	return result;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PADDED_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_SET_DATA_DEFINED_
#define _NBL_GLSL_BLIT_NORMALIZATION_SET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_ must be defined
#endif

void nbl_glsl_blit_normalization_setData(in nbl_glsl_blit_normalization_pixel_t value, in ivec3 coord)
{
	const nbl_glsl_blit_parameters_t params = nbl_glsl_blit_normalization_getParameters();

#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 1)
	#define COORD coord.xy
	#define IMAGE_DIM params.outDim.xy
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 2)
	#define COORD coord
	#define IMAGE_DIM params.outDim
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_, 3)
	#define COORD coord
	#define IMAGE_DIM params.outDim
#else
	#error _NBL_GLSL_BLIT_NORMALIZATION_DIM_COUNT_ not supported
#endif

	if (all(lessThan(COORD, IMAGE_DIM)))
	{
	#ifdef _NBL_GLSL_BLIT_NORMALIZATION_SOFTWARE_CODEC_
		imageStore(_NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_, COORD, nbl_glsl_blit_formats_encode(value.data));
	#else
		imageStore(_NBL_GLSL_BLIT_NORMALIZATION_OUT_IMAGE_DESCRIPTOR_DEFINED_, COORD, value.data);
	#endif
	}

#undef COORD
#undef IMAGE_DIM
}
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_ALPHA_HISTOGRAM_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_ must be defined
#endif

uint nbl_glsl_blit_normalization_getAlphaHistogramData(in uint index, in uint layerIdx)
{
	return _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_.data[layerIdx].histogram[index];
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_ALPHA_HISTOGRAM_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_GET_PASSED_INPUT_PIXEL_COUNT_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_ must be defined
#endif

// Todo(achal): Why is there a data in the function name??!!
uint nbl_glsl_blit_normalization_getPassedInputPixelCountData(in uint layerIdx)
{
	return _NBL_GLSL_BLIT_NORMALIZATION_PASSED_COUNTER_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_.data[layerIdx].passedPixelCount;
}
#define _NBL_GLSL_BLIT_NORMALIZATION_GET_PASSED_INPUT_PIXEL_COUNT_DATA_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_normalization_main();
}
