#include <nbl/builtin/glsl/blit/default_compute_common.comp>

#ifndef _NBL_GLSL_BLIT_OUT_CHANNEL_COUNT_
#error _NBL_GLSL_BLIT_OUT_CHANNEL_COUNT_ must be defined
#endif

#ifndef _NBL_GLSL_BLIT_OUT_IMAGE_FORMAT_
#error _NBL_GLSL_BLIT_OUT_IMAGE_FORMAT_ must be defined
#endif

#ifndef _NBL_GLSL_BLIT_SMEM_FLOAT_COUNT_
#error _NBL_GLSL_BLIT_SMEM_FLOAT_COUNT_ must be defined
#endif

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

shared float nbl_glsl_blit_scratchShared[_NBL_GLSL_BLIT_OUT_CHANNEL_COUNT_][_NBL_GLSL_BLIT_SMEM_FLOAT_COUNT_];
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ nbl_glsl_blit_scratchShared

#include <nbl/builtin/glsl/blit/blit/descriptors.glsl>
#include <nbl/builtin/glsl/blit/blit/blit.glsl>

#ifndef _NBL_GLSL_BLIT_GET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_ must be defined
#endif

vec4 nbl_glsl_blit_getData(in ivec3 coord)
{
	vec4 result;

#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 1)
	#define COORD coord.xy
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 2)
	#define COORD coord
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 3)
	#define COORD coord
#else
	#error _NBL_GLSL_BLIT_DIM_COUNT_ not supported
#endif

	result = texelFetch(_NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_, COORD, 0);
	return result;
#undef COORD
}

#define _NBL_GLSL_BLIT_GET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_SET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_ must be defined
#endif

void nbl_glsl_blit_setData(in vec4 value, in ivec3 coord)
{
#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 1)
	#define COORD coord.xy
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 2)
	#define COORD coord
#elif NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 3)
	#define COORD coord
#else
	#error _NBL_GLSL_BLIT_DIM_COUNT_ not supported
#endif

#ifdef _NBL_GLSL_BLIT_SOFTWARE_CODEC_
	imageStore(_NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_, COORD, nbl_glsl_blit_formats_encode(value));
#else
	imageStore(_NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_, COORD, value);
#endif

#undef COORD
}

#define _NBL_GLSL_BLIT_SET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_GET_CACHED_WEIGHTS_PREMULTIPLIED_DEFINED_

#ifndef _NBL_GLSL_BLIT_WEIGHTS_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_WEIGHTS_DESCRIPTOR_DEFINED_ must be defined
#endif

float nbl_glsl_blit_getCachedWeightsPremultiplied(in uvec3 lutCoord)
{
	const vec3 weight = vec3(_NBL_GLSL_BLIT_WEIGHTS_DESCRIPTOR_DEFINED_.data[lutCoord.x], _NBL_GLSL_BLIT_WEIGHTS_DESCRIPTOR_DEFINED_.data[lutCoord.y], _NBL_GLSL_BLIT_WEIGHTS_DESCRIPTOR_DEFINED_.data[lutCoord.z]);

	float result = 1.f;
	for (uint d = 0u; d < _NBL_GLSL_BLIT_DIM_COUNT_; ++d)
		result *= weight[d];

	return result;
}
#define _NBL_GLSL_BLIT_GET_CACHED_WEIGHTS_PREMULTIPLIED_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_ADD_TO_HISTOGRAM_DEFINED_
void nbl_glsl_blit_addToHistogram(in uint bucketIndex, in uint layerIdx)
{
#ifdef _NBL_GLSL_BLIT_COVERAGE_SEMANTIC_
	#ifndef _NBL_GLSL_BLIT_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_
		#error _NBL_GLSL_BLIT_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_ must be defined
	#endif

	atomicAdd(_NBL_GLSL_BLIT_ALPHA_HISTOGRAM_DESCRIPTOR_DEFINED_.data[layerIdx].histogram[bucketIndex], 1u);
#endif
}
#define _NBL_GLSL_BLIT_ADD_TO_HISTOGRAM_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_main();
}
