#include <nbl/builtin/glsl/blit/default_compute_common.comp>

#ifndef _NBL_GLSL_BLIT_OUT_CHANNEL_COUNT_
#error _NBL_GLSL_BLIT_OUT_CHANNEL_COUNT_ must be defined
#endif

#ifndef _NBL_GLSL_BLIT_OUT_IMAGE_FORMAT_
#error _NBL_GLSL_BLIT_OUT_IMAGE_FORMAT_ must be defined
#endif

#ifndef _NBL_GLSL_BLIT_SMEM_FLOAT_COUNT_
#error _NBL_GLSL_BLIT_SMEM_FLOAT_COUNT_ must be defined
#endif

layout (local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;

shared float nbl_glsl_blit_scratchShared[_NBL_GLSL_BLIT_OUT_CHANNEL_COUNT_][_NBL_GLSL_BLIT_SMEM_FLOAT_COUNT_];
#define _NBL_GLSL_SCRATCH_SHARED_DEFINED_ nbl_glsl_blit_scratchShared

#include <nbl/builtin/glsl/blit/formats_encode.glsl>
#include <nbl/builtin/glsl/blit/blit/descriptors.glsl>
#include <nbl/builtin/glsl/blit/blit/blit.glsl>

#ifndef _NBL_GLSL_BLIT_GET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_ must be defined
#endif

vec4 nbl_glsl_blit_getData(in vec3 texCoord)
{
#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 1)
	return textureLod(_NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_, texCoord.xy, 0.f);
#else
	return textureLod(_NBL_GLSL_BLIT_IN_DESCRIPTOR_DEFINED_, texCoord, 0.f);
#endif
}

#define _NBL_GLSL_BLIT_GET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_SET_DATA_DEFINED_

#ifndef _NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_
#error _NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_ must be defined
#endif

#ifndef _NBL_GLSL_BLIT_SOFTWARE_ENCODE_FORMAT_
vec4 nbl_glsl_blit_encode(in vec4 value)
{
	return value;
}
#endif

void nbl_glsl_blit_setData(in vec4 value, in ivec3 coord)
{
#if NBL_GLSL_EQUAL(_NBL_GLSL_BLIT_DIM_COUNT_, 1)
	imageStore(_NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_, coord.xy, nbl_glsl_blit_encode(value));
#else
	imageStore(_NBL_GLSL_BLIT_OUT_DESCRIPTOR_DEFINED_, coord, nbl_glsl_blit_encode(value));
#endif
}

#define _NBL_GLSL_BLIT_SET_DATA_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_GET_CACHED_WEIGHTS_PREMULTIPLIED_DEFINED_

// #ifndef _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_
// #error _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_ must be defined
// #endif

vec4 nbl_glsl_blit_getCachedWeightsPremultiplied(in uvec3 lutCoord)
{
#if 0
	vec4 weight[3];
	weight[0] = _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_.kernelWeights[lutCoord.x];
	weight[1] = _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_.kernelWeights[lutCoord.y];
	weight[2] = _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_.kernelWeights[lutCoord.z];

	vec4 result = vec4(1.f);
	for (uint d = 0u; d < _NBL_GLSL_BLIT_DIM_COUNT_; ++d)
		result *= weight[d];

	return result;
#endif
	return vec4(0.f);
}
#define _NBL_GLSL_BLIT_GET_CACHED_WEIGHTS_PREMULTIPLIED_DEFINED_
#endif

#ifndef _NBL_GLSL_BLIT_ADD_TO_HISTOGRAM_DEFINED_
void nbl_glsl_blit_addToHistogram(in uint bucketIndex, in uint layerIdx)
{
#ifdef _NBL_GLSL_BLIT_COVERAGE_SEMANTIC_
	#ifndef _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_
		#error _NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_ must be defined
	#endif

	atomicAdd(_NBL_GLSL_BLIT_SCRATCH_DESCRIPTOR_DEFINED_.alphaStatistics[layerIdx].histogram[bucketIndex], 1u);
#endif
}
#define _NBL_GLSL_BLIT_ADD_TO_HISTOGRAM_DEFINED_
#endif

void main()
{
	nbl_glsl_blit_main();
}
