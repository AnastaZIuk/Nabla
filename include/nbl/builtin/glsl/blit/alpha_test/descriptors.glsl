#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_DESCRIPTORS_INCLUDED_
#define _NBL_GLSL_BLIT_ALPHA_TEST_DESCRIPTORS_INCLUDED_

#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_DESCRIPTOR_SET_DEFINED_
#define _NBL_GLSL_BLIT_ALPHA_TEST_DESCRIPTOR_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_IN_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_BLIT_ALPHA_TEST_IN_DESCRIPTOR_DEFINED_ nbl_glsl_blit_alpha_test_inImage

	#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_IN_BINDING_DEFINED_
		#define _NBL_GLSL_BLIT_ALPHA_TEST_IN_BINDING_DEFINED_ 0
	#endif

	#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_IN_SAMPLER_TYPE_
		#error _NBL_GLSL_BLIT_ALPHA_TEST_IN_SAMPLER_TYPE_ must be defined
	#endif

	layout(set = _NBL_GLSL_BLIT_ALPHA_TEST_DESCRIPTOR_SET_DEFINED_, binding = _NBL_GLSL_BLIT_ALPHA_TEST_IN_BINDING_DEFINED_) uniform _NBL_GLSL_BLIT_ALPHA_TEST_IN_SAMPLER_TYPE_ _NBL_GLSL_BLIT_ALPHA_TEST_IN_DESCRIPTOR_DEFINED_;

#endif

// Todo(achal): Source it from outside
#define ALPHA_BIN_COUNT 256

// Todo(achal): Pull this out into common header
struct nbl_glsl_blit_AlphaStatistics_t
{
	uint passedPixelCount;
	uint _pad[3];
	uint histogram[ALPHA_BIN_COUNT];
};

#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_PASSED_COUNTER_DESCRIPTOR_DEFINED_
#define _NBL_GLSL_BLIT_ALPHA_TEST_PASSED_COUNTER_DESCRIPTOR_DEFINED_ nbl_glsl_blit_alpha_test_alphaStatistics

	#ifndef _NBL_GLSL_BLIT_ALPHA_TEST_PASSED_COUNTER_BINDING_DEFINED_
		#define _NBL_GLSL_BLIT_ALPHA_TEST_PASSED_COUNTER_BINDING_DEFINED_ 2
	#endif

	layout(set = _NBL_GLSL_BLIT_ALPHA_TEST_DESCRIPTOR_SET_DEFINED_, binding = _NBL_GLSL_BLIT_ALPHA_TEST_PASSED_COUNTER_BINDING_DEFINED_) restrict coherent buffer AlphaTestPassedCounterBuffer
	{
		nbl_glsl_blit_AlphaStatistics_t data[];
	} _NBL_GLSL_BLIT_ALPHA_TEST_PASSED_COUNTER_DESCRIPTOR_DEFINED_;

#endif

#endif
