/*
#ifndef _NBL_GLSL_EXT_SCAN_DEFAULT_SWEEP_COMMON_GLSL_INCLUDED_
#define _NBL_GLSL_EXT_SCAN_DEFAULT_SWEEP_COMMON_GLSL_INCLUDED_


#ifndef _NBL_GLSL_EXT_SCAN_INPUT_SET_DEFINED_
#define _NBL_GLSL_EXT_SCAN_INPUT_SET_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_SCAN_INPUT_BINDING_DEFINED_
#define _NBL_GLSL_EXT_SCAN_INPUT_BINDING_DEFINED_ 0
#endif

#ifndef _NBL_GLSL_EXT_SCAN_INPUT_DESCRIPTOR_DEFINED_

layout(set = _NBL_GLSL_EXT_SCAN_INPUT_SET_DEFINED_, binding = _NBL_GLSL_EXT_SCAN_INPUT_BINDING_DEFINED_, std430) restrict buffer InoutBuffer
{
	nbl_glsl_ext_Scan_Storage_t inout_values[];
};

#define _NBL_GLSL_EXT_SCAN_INPUT_DESCRIPTOR_DEFINED_
#endif


#ifndef _NBL_GLSL_EXT_SCAN_GET_PARAMETERS_DEFINED_
nbl_glsl_ext_Scan_Parameters_t nbl_glsl_ext_Scan_getParameters()
{
	return pc.params;
}
#define _NBL_GLSL_EXT_SCAN_GET_PARAMETERS_DEFINED_
#endif

#ifndef _NBL_GLSL_EXT_SCAN_SET_DATA_DEFINED_

void nbl_glsl_ext_Scan_setData(in uint idx, in nbl_glsl_ext_Scan_Storage_t val)
{
	if (gl_GlobalInvocationID.x < nbl_glsl_ext_Scan_Parameters_t_getElementCountPass())
		inout_values[idx] = val;
}

#define _NBL_GLSL_EXT_SCAN_SET_DATA_DEFINED_
#endif

#endif
*/


#version 460 core


#ifndef _NBL_GLSL_WORKGROUP_SIZE_
#define _NBL_GLSL_WORKGROUP_SIZE_ 256
layout(local_size_x = _NBL_GLSL_WORKGROUP_SIZE_) in;
#endif


#ifndef _NBL_GLSL_SCAN_STORAGE_TYPE_
#error "_NBL_GLSL_SCAN_STORAGE_TYPE needs to be defined to any of uint/int/float"
#endif

#define nbl_glsl_scan_Storage_t _NBL_GLSL_SCAN_STORAGE_TYPE_


#include "nbl/builtin/glsl/scan/parameters_struct.glsl"
#ifndef _NBL_GLSL_SCAN_PUSH_CONSTANTS_DEFINED_
layout(push_constant) uniform PushConstants
{
	nbl_glsl_scan_Parameters_t params;
} pc;
#define _NBL_GLSL_SCAN_PUSH_CONSTANTS_DEFINED_
#endif

//#include "nbl/builtin/glsl/scan/parameters.glsl"


#ifndef _NBL_GLSL_SCAN_BIN_OP_
#error "_NBL_GLSL_SCAN_BIN_OP_ must be defined!"
#endif
#include "nbl/builtin/glsl/macros.glsl"

#if NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_AND_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepAnd
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepAnd
#elif NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_XOR_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepXor
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepXor
#elif NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_OR_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepOr
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepOr
#elif NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_ADD_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepAdd
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepAdd
#elif NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_MUL_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepMul
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepMul
#elif NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_MIN_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepMin
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepMin
#elif NBL_GLSL_EQUAL(_NBL_GLSL_SCAN_BIN_OP_,_NBL_GLSL_SCAN_OP_MAX_)
#define _NBL_GLSL_SCAN_UPSWEEP_TYPE_ nbl_glsl_scan_upsweepMax
#define _NBL_GLSL_SCAN_DOWNSWEEP_TYPE_ nbl_glsl_scan_downsweepMax
#endif


void main()
{
}
