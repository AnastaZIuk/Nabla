// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;

#include <nbl/builtin/glsl/lod_library/descriptor_set.glsl>
#include <nbl/builtin/glsl/lod_library/structs.glsl>

#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_LIST_DESCRIPTOR_DECLARED
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_PVS_INSTANCES_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_DRAWCALL_INCLUSIVE_COUNTS_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PVS_INSTANCE_DRAWS_DESCRIPTOR_QUALIFIERS restrict
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAWCALLS_TO_SCAN_DESCRIPTOR_DECLARED
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_COUNTS_TO_SCAN_DESCRIPTOR_DECLARED
// dont pull the scan scratch descriptor (we'll use our own decl for clearing)
#define _NBL_GLSL_SCAN_DESCRIPTORS_INCLUDED_
#include <nbl/builtin/glsl/culling_lod_selection/input_descriptor_set.glsl>
layout(set=_NBL_GLSL_SCAN_DESCRIPTOR_SET_DEFINED_,binding=_NBL_GLSL_SCAN_SCRATCH_BINDING_DEFINED_) restrict writeonly buffer ScanScratchBuffer
{
    uint data[];
} scanScratch;

#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALLS_DESCRIPTOR_QUALIFIERS restrict coherent
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_VIEW_PER_INSTANCE_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_INSTANCE_REDIRECT_ATTRS_DESCRIPTOR_DECLARED
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALL_COUNTS_DESCRIPTOR_DECLARED
#include <nbl/builtin/glsl/culling_lod_selection/output_descriptor_modifiers.glsl>

#include <nbl/builtin/glsl/algorithm.glsl>
NBL_GLSL_DEFINE_UPPER_BOUND(lodDrawcallInclusiveCounts,uint)

layout(push_constant) uniform PushConstants
{
    uint lastScratchDWORDToClear;
} pc;

#include <nbl/builtin/glsl/utils/culling.glsl>
mat4 nbl_glsl_culling_lod_selection_getMVP(in uint pvInstanceID)
{
    return perViewPerInstance.data[pvInstanceID].mvp;
}
mat4 nbl_glsl_culling_lod_selection_getInverseMVP(in uint pvInstanceID)
{
    // this should actually be faster than loading an extra 4x3 matrix, inverting it and multiplying it with a 4x4
    return inverse(nbl_glsl_culling_lod_selection_getMVP(pvInstanceID));
}

void main()
{
    if (gl_GlobalInvocationID.x==0u)
        dispatchIndirect.instanceDrawCountPrefixSum.num_groups_x = 256u;
    
    const uint dispatchSize = gl_NumWorkGroups[0]*_NBL_GLSL_WORKGROUP_SIZE_;

    for (uint dword=gl_GlobalInvocationID.x; dword<=pc.lastScratchDWORDToClear; dword+=dispatchSize)
        scanScratch.data[dword] = 0u;
        
    const uint totalInstanceCount = totalInstanceCountAfterCull;
    const uint drawInstanceCount = lodDrawcallInclusiveCounts[totalInstanceCount-1u];
    for (uint drawInstanceIndex=gl_GlobalInvocationID.x; drawInstanceIndex<drawInstanceCount; drawInstanceIndex+=dispatchSize)
    {
        // TODO: implement via https://moderngpu.github.io/sortedsearch.html, find the upper and lower bounds of the workgroup, then go to town with sorted search
        const uint pvInstanceID = upper_bound_lodDrawcallInclusiveCounts_NBL_GLSL_LESS(0u,totalInstanceCount,drawInstanceIndex);
        const uint lodInfoUvec4Offset = pvsInstances.data[pvInstanceID][1];

        uint drawInstanceID = drawInstanceIndex;
        if (bool(pvInstanceID))
            drawInstanceID -= lodDrawcallInclusiveCounts[pvInstanceID-1u];

        const uint drawcallDWORDOffsetAndFlag = nbl_glsl_lod_library_DefaultInfo_getDrawCallDWORDOffset(lodInfoUvec4Offset,drawInstanceID);
        // get AABB and cull
        const nbl_glsl_shapes_AABB_t aabb = nbl_glsl_shapes_AABB_t(vec3(-5.f),vec3(5.f));// TODO: Draw_getAABB();
        const mat4 mvp = nbl_glsl_culling_lod_selection_getMVP(pvInstanceID);
        const mat4 inv_mvp = nbl_glsl_culling_lod_selection_getInverseMVP(pvInstanceID);
        //if (nbl_glsl_fastFrustumCullAABB(mvp,inv_mvp,aabb))
            //continue;

        const uint appendIx = atomicAdd(pvsInstanceDraws.count,1u);
        const uint drawcallDWORDOffset = drawcallDWORDOffsetAndFlag&0x7fffffffu;
        const uint instanceID = nbl_glsl_culling_lod_selection_drawCallInstanceCountIncr(drawcallDWORDOffset);
            
        const uint baseInstanceDWORDOffset = drawcallDWORDOffset+4u-(drawcallDWORDOffsetAndFlag>>31);

        pvsInstanceDraws.data[appendIx].perViewPerInstanceID = pvInstanceID;
        pvsInstanceDraws.data[appendIx].drawBaseInstanceDWORDOffset = baseInstanceDWORDOffset;
        pvsInstanceDraws.data[appendIx].instanceID = instanceID;
    }
}