#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;

#include <nbl/builtin/glsl/lod_library/descriptor_set.glsl>
#include <nbl/builtin/glsl/lod_library/structs.glsl>
#define NBL_GLSL_CULLING_LOD_SELECTION_LOD_INFO_DRAWCALL_LIST_DWORD_OFFSET ((NBL_GLSL_LOD_LIBRARY_LOD_INFO_BASE_SIZE+NBL_GLSL_LOD_LIBRARY_DEFAULT_LOD_CHOICE_PARAMS_SIZE)>>2)

#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_LIST_DESCRIPTOR_BINDING
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_LOD_INFO_UVEC4_OFFSETS_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_DRAWCALL_INCLUSIVE_COUNTS_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PVS_INSTANCE_DRAWS_DESCRIPTOR_QUALIFIERS restrict
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAWCALLS_TO_SCAN_DESCRIPTOR_BINDING
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_COUNTS_TO_SCAN_DESCRIPTOR_BINDING
#include <nbl/builtin/glsl/culling_lod_selection/input_descriptor_set.glsl>

#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALLS_DESCRIPTOR_QUALIFIERS restrict coherent
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_VIEW_PER_INSTANCE_DESCRIPTOR_QUALIFIERS restrict readonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_INSTANCE_REDIRECT_ATTRS_DESCRIPTOR_BINDING
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALL_COUNTS_DESCRIPTOR_BINDING
#include <nbl/builtin/glsl/culling_lod_selection/output_descriptor_modifiers.glsl>

#include <nbl/builtin/glsl/algorithm.glsl>
NBL_GLSL_DEFINE_UPPER_BOUND(lodDrawcallInclusiveCounts,uint)

void main()
{
    if (gl_GlobalInvocationID.x==0u)
    {
        dispatchIndirect.instanceDrawCountPrefixSum.num_groups_x = 1u;
        // TODO: move this clear to the prefix sum shader
        dispatchIndirect.instanceCullAndLoDSelect.num_groups_x = 1u;
    }

    const uint totalInstanceCount = totalInstanceCountAfterCull;
    const uint drawInstanceCount = lodDrawcallInclusiveCounts[totalInstanceCount-1u];
    for (uint drawInstanceIndex=gl_GlobalInvocationID.x; drawInstanceIndex<drawInstanceCount; drawInstanceIndex+=_NBL_GLSL_WORKGROUP_SIZE_)
    {
        // TODO: implement via https://moderngpu.github.io/sortedsearch.html, find the upper and lower bounds of the workgroup, then go to town with sorted search
        const uint pvInstanceID = upper_bound_lodDrawcallInclusiveCounts_NBL_GLSL_LESS(0u,totalInstanceCount,drawInstanceIndex);
        uint drawInstanceID = drawInstanceIndex;
        if (bool(pvInstanceID))
            drawInstanceID -= lodDrawcallInclusiveCounts[pvInstanceID-1u];
        const uint drawcallDWORDOffsetAndFlag = nbl_glsl_lod_library_getDrawCallDWORDOffset(
            lodInfoUvec4Offsets.data[pvInstanceID],
            NBL_GLSL_CULLING_LOD_SELECTION_LOD_INFO_DRAWCALL_LIST_DWORD_OFFSET,
            drawInstanceID
        );
        // get AABB
        //const nbl_glsl_AABB_t aabb = ;
        // cull
        bool visible = true;
        if (visible)
        {
            const uint appendIx = atomicAdd(pvsInstanceDraws.count,1u);
            const uint drawcallDWORDOffset = drawcallDWORDOffsetAndFlag&0x7fffffffu;
            const uint instanceID = nbl_glsl_culling_lod_selection_drawCallInstanceCountIncr(drawcallDWORDOffset);
            
            const uint baseInstanceDWORDOffset = drawcallDWORDOffset+4u-(drawcallDWORDOffsetAndFlag>>31);
            pvsInstanceDraws.data[appendIx] = uvec4(baseInstanceDWORDOffset,instanceID,/*TODO: instanceGUID,perViewPerInstanceID*/0xdeadbeefu,pvInstanceID);
        }
    }
}