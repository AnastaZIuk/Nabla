// Copyright (C) 2018-2020 - DevSH Graphics Programming Sp. z O.O.
// This file is part of the "Nabla Engine".
// For conditions of distribution and use, see copyright notice in nabla.h

#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;

#include <nbl/builtin/glsl/lod_library/descriptor_set.glsl>

#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_PVS_INSTANCES_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_DRAWCALL_INCLUSIVE_COUNTS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PVS_INSTANCE_DRAWS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_COUNTS_TO_SCAN_DESCRIPTOR_DECLARED
#include <nbl/builtin/glsl/culling_lod_selection/input_descriptor_set.glsl>

#define NBL_GLSL_CULLING_LOD_SELECTION_PER_VIEW_PER_INSTANCE_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_INSTANCE_REDIRECT_ATTRS_DESCRIPTOR_DECLARED
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALLS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALL_COUNTS_DESCRIPTOR_DECLARED
#include <nbl/builtin/glsl/culling_lod_selection/output_descriptor_modifiers.glsl>


// the following forward declared functions must be defined by the user
uint nbl_glsl_culling_lod_selection_getInstanceCount();

void nbl_glsl_culling_lod_selection_initializePerViewPerInstanceData(out nbl_glsl_PerViewPerInstance_t pvpi, in uint instanceGUID);
uint nbl_glsl_culling_lod_selection_chooseLoD(in uint lodTableUvec4Offset, in uint lodCount);
void nbl_glsl_culling_lod_selection_finalizePerViewPerInstanceData(inout nbl_glsl_PerViewPerInstance_t pvpi, in uint instanceGUID);


#include <nbl/builtin/glsl/utils/culling.glsl>
void main()
{
    if (gl_GlobalInvocationID.x==0u)
        dispatchIndirect.instanceRefCountingSortScatter.num_groups_x = 256u;
    else if (gl_GlobalInvocationID.x==1u)
        pvsInstanceDraws.count = 0u;
        
    const uint dispatchSize = gl_WorkGroupSize[0]*_NBL_GLSL_WORKGROUP_SIZE_;

    // TODO: in the future make the drawcalls to scan be dynamic and indirect
    // clear the instance counts to 0
    for (uint drawID=gl_GlobalInvocationID.x; drawID<drawcallsToScan.dwordOffsets.length(); drawID+=dispatchSize)
        nbl_glsl_culling_lod_selection_drawCallSetInstanceCount(drawcallsToScan.dwordOffsets[drawID],0u);
        
    uint outIx = 0u;
    for (uint instanceID=gl_GlobalInvocationID.x; instanceID<nbl_glsl_culling_lod_selection_getInstanceCount(); instanceID+=dispatchSize)
    {
        const uint instanceGUID = instanceList.data[instanceID][0u];
        const uint lodTableUvec4Offset = instanceList.data[instanceID][1u];

        nbl_glsl_PerViewPerInstance_t perView;
        nbl_glsl_culling_lod_selection_initializePerViewPerInstanceData(perView,instanceGUID);
        // cull lod_table_t
        const nbl_glsl_shapes_AABB_t tableAABB =  nbl_glsl_lod_library_Table_getAABB(lodTableUvec4Offset);
        if (nbl_glsl_fastestFrustumCullAABB(perView.mvp,tableAABB))
            continue;
        // select lod_t
        const uint lodCount = nbl_glsl_lod_library_Table_getLoDCount(lodTableUvec4Offset);
        uint lodInfoUvec4Offset = nbl_glsl_culling_lod_selection_chooseLoD(lodTableUvec4Offset,lodCount);
        // cull the lod_t
        const nbl_glsl_shapes_AABB_t lodAABB = nbl_glsl_lod_library_Info_getAABB(lodInfoUvec4Offset);
        if (lodInfoUvec4Offset==0xffffffffu || nbl_glsl_fastestFrustumCullAABB(perView.mvp,lodAABB)) // TODO: is there any point to a LoD level having its own AABB?
            continue;
        outIx = atomicAdd(totalInstanceCountAfterCull,1u); 
        nbl_glsl_culling_lod_selection_finalizePerViewPerInstanceData(perView,instanceGUID);
        
        pvsInstances.data[outIx] = uvec2(instanceGUID,lodInfoUvec4Offset);
        // we write this out, because of cache coherency and dependent loads in the prefix sum (has to do 2x load of independent, vs. 2x load of 2-long chain)
        lodDrawcallInclusiveCounts[outIx] = nbl_glsl_lod_library_Info_getDrawcallInfoCount(lodInfoUvec4Offset);
        perViewPerInstance.data[outIx] = perView;
    }
    
    // TODO: compute the indirect dispatch size
    // write from this shader
    // would need to know the absolute count of elements (really hard to know when)
#if 0
    const uint maxOutIx = nbl_glsl_workgroupMax(outIx);
    const uint dispatchGroupBound = min(maxOutIx/_NBL_GLSL_WORKGROUP_SIZE_+1u,0x45u);
    if (gl_LocalInvocationIndex==0u)
        atomicMax(dispatchIndirect.instanceDrawCull.groups_x,);
#endif
}