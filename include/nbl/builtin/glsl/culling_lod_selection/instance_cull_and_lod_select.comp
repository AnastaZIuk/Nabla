#version 440 core
layout(local_size_x=_NBL_GLSL_WORKGROUP_SIZE_) in;


#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_LOD_INFO_UVEC4_OFFSETS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_INSTANCE_DRAWCALL_INCLUSIVE_COUNTS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PVS_INSTANCE_DRAWS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_COUNTS_TO_SCAN_DESCRIPTOR_BINDING
#include <nbl/builtin/glsl/culling_lod_selection/input_descriptor_set.glsl>

#define NBL_GLSL_CULLING_LOD_SELECTION_PER_VIEW_PER_INSTANCE_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_PER_INSTANCE_REDIRECT_ATTRS_DESCRIPTOR_BINDING
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALLS_DESCRIPTOR_QUALIFIERS restrict writeonly
#define NBL_GLSL_CULLING_LOD_SELECTION_DRAW_CALL_COUNTS_DESCRIPTOR_BINDING
#include <nbl/builtin/glsl/culling_lod_selection/output_descriptor_modifiers.glsl>


#ifdef NBL_GLSL_CULLING_LOD_SELECTION_INDIRECT_INSTANCE_LIST
uint nbl_glsl_culling_lod_selection_getInstanceCount()
{
    return instanceList.count;
}
#else
layout(push_constant) uniform PushConstants
{
    uint count;
} pc;

uint nbl_glsl_culling_lod_selection_getInstanceCount()
{
    return pc.count;
}
#endif

void nbl_glsl_culling_lod_selection_initializePerViewPerInstanceData(out nbl_glsl_PerViewPerInstance_t data, in uint instanceID) {} // TODO
void nbl_glsl_culling_lod_selection_finalizePerViewPerInstanceData(inout nbl_glsl_PerViewPerInstance_t data, in uint instanceID) {} // TODO

void main()
{
    if (gl_GlobalInvocationID.x==0u)
    {
        dispatchIndirect.instanceRefCountingSortScatter.num_groups_x = 1u;
        // TODO: remove
        totalInstanceCountAfterCull = 7u;
    }
    else if (gl_GlobalInvocationID.x==1u)
        pvsInstanceDraws.count = 0u;

    // TODO: in the future make the drawcalls to scan be dynamic and indirect
    // clear the instance counts to 0
    for (uint drawID=gl_GlobalInvocationID.x; drawID<drawcallsToScan.dwordOffsets.length(); drawID+=_NBL_GLSL_WORKGROUP_SIZE_)
    {
        nbl_glsl_culling_lod_selection_drawCallSetInstanceCount(drawcallsToScan.dwordOffsets[drawID],0u);
        switch (drawID) // TODO: stuff
        {
            case 0u:
                lodDrawcallInclusiveCounts[drawID] = 1u;
                break;
            case 1u:
                lodDrawcallInclusiveCounts[drawID] = 1u;
                break;
            case 2u:
                lodDrawcallInclusiveCounts[drawID] = 2u;
                break;
            case 3u:
                lodDrawcallInclusiveCounts[drawID] = 7u;
                break;
            case 4u:
                lodDrawcallInclusiveCounts[drawID] = 25u;
                break;
            case 5u:
                lodDrawcallInclusiveCounts[drawID] = 97u;
                break;
            case 6u:
                lodDrawcallInclusiveCounts[drawID] = 385u;
                break;
            default:
                break;
        }
    }
        
    uint outIx = 0u;
    for (uint instanceID=gl_GlobalInvocationID.x; instanceID<nbl_glsl_culling_lod_selection_getInstanceCount(); instanceID+=_NBL_GLSL_WORKGROUP_SIZE_)
    {
#if 0
        nbl_glsl_PerViewPerInstance_t perView;
        nbl_glsl_culling_lod_selection_initializePerViewPerInstanceData(perView,instanceID);
        // cull lod_table_t
        // select lod_t
        // cull the lod_t
        if (false)
            continue;
        nbl_glsl_culling_lod_selection_finalizePerViewPerInstanceData(perView,instanceID);

        outIx = atomicAdd(dispatchIndirect.potentiallyVisibleInstanceCount,1u);

        // TODO: get this stuff
        const uint drawCallDWORDOffset = 0xdeadbeefu;
        const uint drawCallCount = 0x45u;
        perViewPerInstance.data[outIx] = perView;
        lodDrawcallOffsets.data[outIx] = drawCallDWORDOffset;
        lodDrawcallInclusiveCounts.data[outIx] = drawCallCount;
#endif
    }
    
    // write from this shader
    // would need to know the absolute count of elements (really hard to know when)
#if 0
    const uint maxOutIx = nbl_glsl_workgroupAdd(outIx);
    const uint dispatchGroupBound = min(maxOutIx/_NBL_GLSL_WORKGROUP_SIZE_+1u,0x45u);
    if (gl_LocalInvocationIndex==0u)
        atomicMax(dispatchIndirect.instanceDrawCull.groups_x,);
#endif
}