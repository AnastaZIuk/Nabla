#ifndef _NBL_ASSET_E_COMMON_ENUMS_H_INCLUDED_
#define _NBL_ASSET_E_COMMON_ENUMS_H_INCLUDED_

#include "nbl/core/declarations.h"

namespace nbl::asset
{

enum E_STENCIL_FACE_FLAGS : uint32_t
{
    ESFF_FRONT_BIT = 0x01,
    ESFF_BACK_BIT = 0x02,
    ESFF_FACE_AND_FRONT = 0x03
};

enum E_SUBPASS_CONTENTS : uint32_t
{
    ESC_INLINE = 0,
    ESC_SECONDARY_COMMAND_BUFFERS = 1
};

enum E_PIPELINE_BIND_POINT : uint8_t
{
    EPBP_GRAPHICS = 0,
    EPBP_COMPUTE,

    EPBP_COUNT
};

enum E_INDEX_TYPE : uint8_t
{
    EIT_16BIT = 0,
    EIT_32BIT,
    EIT_UNKNOWN
};

// https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#synchronization-pipeline-stages-order
enum class PIPELINE_STAGE_FLAGS : uint32_t
{
    NONE = 0,
    HOST_BIT = 0x1<<1,
    COPY_BIT = 0x1<<2,
    CLEAR_BIT = 0x1<<3,
    ACCELERATION_STRUCTURE_COPY_BIT = 0x1<<4,
    ACCELERATION_STRUCTURE_BUILD_BIT = 0x1<<5,
//    MICROMAP_BUILD_BIT = 0x1<<6,
    // this is for the indirect of indirects commands in the commandbuffer
    COMMAND_PREPROCESS_BIT = 0x1<<7,
    // while the spec says this stage exists on its own, I'd think it needs to ofc execute before any indirect stuff
    CONDITIONAL_RENDERING_BIT = 0x1<<8,
    // begin of any pipeline
    DRAW_INDIRECT_BIT = 0x1<<9,
    // compute pipeline only has a single unique stage
    COMPUTE_SHADER_BIT = 0x1<<10,
    // primitive pipeline
    INDEX_INPUT_BIT = 0x1<<11,
    VERTEX_ATTRIBUTE_INPUT_BIT = 0x1<<12,
    VERTEX_INPUT_BITS = INDEX_INPUT_BIT|VERTEX_ATTRIBUTE_INPUT_BIT,
    VERTEX_SHADER_BIT = 0x1<<13,
    TESSELLATION_CONTROL_SHADER_BIT = 0x1<<14,
    TESSELLATION_EVALUATION_SHADER_BIT = 0x1<<15,
    GEOMETRY_SHADER_BIT = 0x1<<16,
    //! We do not expose Transform Feedback
    // TODO: mesh pipeline
//    TASK_SHADER_BIT = 0x1<<17,
//    MESH_SHADER_BIT = 0x1<<18,
    // 
    PRE_RASTERIZATION_SHADERS_BITS = VERTEX_SHADER_BIT|TESSELLATION_CONTROL_SHADER_BIT|TESSELLATION_EVALUATION_SHADER_BIT|GEOMETRY_SHADER_BIT/*|TASK_SHADER_BIT|MESH_SHADER_BIT*/,
    // similar to shading rate but affects raster rate as well
    FRAGMENT_DENSITY_PROCESS_BIT = 0x1<<19,
    // rasterization but not 1:1 with a single pixel
    FRAGMENT_SHADING_RATE_ATTACHMENT_BIT = 0x1<<20,
    // framebuffer space (for a single sample, relevant for BY_REGION deps)
    EARLY_FRAGMENT_TESTS_BIT = 0x1<<21,
    FRAGMENT_SHADER_BIT = 0x1<<22,
    LATE_FRAGMENT_TESTS_BIT = 0x1<<23,
    COLOR_ATTACHMENT_OUTPUT_BIT = 0x1<<24,
    FRAMEBUFFER_SPACE_BITS = EARLY_FRAGMENT_TESTS_BIT|FRAGMENT_SHADER_BIT|LATE_FRAGMENT_TESTS_BIT|COLOR_ATTACHMENT_OUTPUT_BIT,
    // one more left
    RAY_TRACING_SHADER_BIT = 0x1<<25,
    // framebuffer attachment stuff
    RESOLVE_BIT = 0x1<<26,
    BLIT_BIT = 0x1<<27,
    // TODOs
    //VIDEO_DECODE = 0x1<<28,
    //VIDEO_ENCODE = 0x1<<29,
    //OPTICAL_FLOW = 0x1<<30,
    // special
    ALL_TRANSFER_BITS = COPY_BIT|ACCELERATION_STRUCTURE_COPY_BIT|CLEAR_BIT|RESOLVE_BIT|BLIT_BIT,
    ALL_GRAPHICS_BITS = CONDITIONAL_RENDERING_BIT|DRAW_INDIRECT_BIT|
        VERTEX_INPUT_BITS|VERTEX_SHADER_BIT|TESSELLATION_CONTROL_SHADER_BIT|TESSELLATION_EVALUATION_SHADER_BIT|GEOMETRY_SHADER_BIT|
 //       TASK_SHADER_BIT|MESH_SHADER_BIT|
        FRAGMENT_DENSITY_PROCESS_BIT|FRAGMENT_SHADING_RATE_ATTACHMENT_BIT|FRAMEBUFFER_SPACE_BITS,
    ALL_COMMANDS_BITS = ~HOST_BIT
};
NBL_ENUM_ADD_BITWISE_OPERATORS(PIPELINE_STAGE_FLAGS)

enum class ACCESS_FLAGS : uint32_t
{
    NONE = 0,
    EAF_INDIRECT_COMMAND_READ_BIT = 0x00000001,
    EAF_INDEX_READ_BIT = 0x00000002,
    EAF_VERTEX_ATTRIBUTE_READ_BIT = 0x00000004,
    EAF_UNIFORM_READ_BIT = 0x00000008,
    EAF_INPUT_ATTACHMENT_READ_BIT = 0x00000010,
    EAF_SHADER_READ_BIT = 0x00000020,
    EAF_SHADER_WRITE_BIT = 0x00000040,
    EAF_COLOR_ATTACHMENT_READ_BIT = 0x00000080,
    EAF_COLOR_ATTACHMENT_WRITE_BIT = 0x00000100,
    EAF_DEPTH_STENCIL_ATTACHMENT_READ_BIT = 0x00000200,
    EAF_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT = 0x00000400,
    EAF_TRANSFER_READ_BIT = 0x00000800,
    EAF_TRANSFER_WRITE_BIT = 0x00001000,
    EAF_HOST_READ_BIT = 0x00002000,
    EAF_HOST_WRITE_BIT = 0x00004000,
    EAF_MEMORY_READ_BIT = 0x00008000,
    EAF_MEMORY_WRITE_BIT = 0x00010000,
    // No Transform Feedback!
    EAF_CONDITIONAL_RENDERING_READ_BIT_EXT = 0x00100000,
    EAF_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT = 0x00080000,
    EAF_ACCELERATION_STRUCTURE_READ_BIT_KHR = 0x00200000,
    EAF_ACCELERATION_STRUCTURE_WRITE_BIT_KHR = 0x00400000,
    EAF_SHADING_RATE_IMAGE_READ_BIT_NV = 0x00800000,
    EAF_FRAGMENT_DENSITY_MAP_READ_BIT_EXT = 0x01000000,
    EAF_COMMAND_PREPROCESS_READ_BIT_NV = 0x00020000,
    EAF_COMMAND_PREPROCESS_WRITE_BIT_NV = 0x00040000,
    // special
    EAF_ALL_IMAGE_ACCESSES_DEVSH = EAF_INPUT_ATTACHMENT_READ_BIT|EAF_SHADER_READ_BIT|EAF_SHADER_WRITE_BIT|EAF_COLOR_ATTACHMENT_READ_BIT|EAF_COLOR_ATTACHMENT_WRITE_BIT|EAF_DEPTH_STENCIL_ATTACHMENT_READ_BIT|EAF_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT|EAF_TRANSFER_READ_BIT|EAF_TRANSFER_WRITE_BIT|EAF_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT|EAF_SHADING_RATE_IMAGE_READ_BIT_NV|EAF_FRAGMENT_DENSITY_MAP_READ_BIT_EXT,
    EAF_ALL_ACCESSES_BIT_DEVSH = 0x0004ffff,
    EAF_ALL_BUFFER_ACCESSES_DEVSH = EAF_ALL_ACCESSES_BIT_DEVSH^(EAF_INPUT_ATTACHMENT_READ_BIT|EAF_COLOR_ATTACHMENT_READ_BIT|EAF_COLOR_ATTACHMENT_WRITE_BIT|EAF_DEPTH_STENCIL_ATTACHMENT_READ_BIT|EAF_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT|EAF_MEMORY_READ_BIT|EAF_MEMORY_WRITE_BIT|EAF_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT|EAF_SHADING_RATE_IMAGE_READ_BIT_NV|EAF_FRAGMENT_DENSITY_MAP_READ_BIT_EXT)
};
NBL_ENUM_ADD_BITWISE_OPERATORS(ACCESS_FLAGS)

core::bitflag<ACCESS_FLAGS> allAccessesFromStages(core::bitflag<PIPELINE_STAGE_FLAGS> stages)
{
#if 0
    constexpr E_ACCESS_FLAGS PerStageAccesses[] = {
        EAF_ALL_ACCESSES_BIT_DEVSH,
        EAF_INDIRECT_COMMAND_READ_BIT,
        // ETC
    };
#endif

    core::bitflag<ACCESS_FLAGS> retval = ACCESS_FLAGS::NONE;
#if 0
    while (stages.value)
    {
        const auto bitIx = core::findLSB(stages);
        retval |= PerStageAccesses[bitIx];
        stages ^= static_cast<E_PIPELINE_STAGE_FLAGS>(0x1u<<bitIx);
    }
#endif

    return retval;
}
// TODO: pipeline stage from ACCESS_FLAGS ?

enum E_DEPENDENCY_FLAGS : uint8_t
{
    EDF_NONE = 0x00,
    EDF_BY_REGION_BIT = 0x01,
    EDF_VIEW_LOCAL_BIT = 0x02,
    EDF_DEVICE_GROUP_BIT = 0x04
};

}

#endif