{
    "headerGuard": "_NBL_VIDEO_S_PHYSICAL_DEVICE_LIMITS_H_INCLUDED_",
    "includePath": "nbl/asset/",
    "includes": [ "utils/CGLSLCompiler.h", "IImage.h", "IRenderpass.h" ],
    "structName": "SPhysicalDeviceLimits",
    "structComment": "Struct is populated with Nabla Core Profile Limit Minimums",
    "constexprs": [
        {
            "type": "uint32_t",
            "name": "MinMaxImageDimension2D",
            "value": 16384
        },
        {
            "type": "uint32_t",
            "name": "MinMaxSSBOSize",
            "value": 1073741820
        },
        {
            "type": "uint16_t",
            "name": "MinMaxPushConstantsSize",
            "value": 256
        },
        {
            "type": "uint32_t",
            "name": "MinMaxWorkGroupCount",
            "value": 65535
        },
        {
            "type": "uint32_t",
            "name": "MinMaxWorkGroupInvocations",
            "value": 256
        },
        {
            "type": "int32_t",
            "name": "MinSubPixelInterpolationOffsetBits",
            "value": 4
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "NoMSor4Samples",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_1_BIT|asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_4_BIT",
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "MinMaxColorAttachments",
            "value": 8,
            "comment": "ROADMAP 2024 and wide reports"
        },
        {
            "type": "uint32_t",
            "name": "MinInlineUniformBlockSize",
            "value": 256,
            "expose": false
        }
    ],
    "vulkan10core": [
        {
            "groupComment": [ "Vulkan 1.0 Core" ]
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimension1D",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimension2D",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimension3D",
            "value": 2048
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimensionCube",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxImageArrayLayers",
            "value": 2048
        },
        {
            "type": "uint32_t",
            "name": "maxBufferViewTexels",
            "value": 33554432
        },
        {
            "type": "uint32_t",
            "name": "maxUBOSize",
            "value": 65536
        },
        {
            "type": "uint32_t",
            "name": "maxSSBOSize",
            "value": "MinMaxSSBOSize"
        },
        {
            "type": "uint16_t",
            "name": "maxPushConstantsSize",
            "value": 128
        },
        {
            "type": "uint32_t",
            "name": "maxMemoryAllocationCount",
            "value": 4096
        },
        {
            "type": "uint32_t",
            "name": "maxSamplerAllocationCount",
            "value": 4000
        },
        {
            "type": "uint32_t",
            "name": "bufferImageGranularity",
            "value": 65536,
            "comment": "granularity, in bytes, at which buffer or linear image resources, and optimal image resources can be bound to adjacent offsets in the same allocation"
        },
        {
            "type": "size_t",
            "name": "sparseAddressSpaceSize",
            "value": 0,
            "expose": false,
            "comment": "[TODO LATER] when we support sparse"
        },
        {
            "type": "uint32_t",
            "name": "maxBoundDescriptorSets",
            "value": 4,
            "expose": false,
            "comment": "[DO NOT EXPOSE] we've kinda hardcoded the engine to 4 currently"
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorSamplers",
            "value": 16,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER count against this limit"
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUBOs",
            "value": 15
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorSSBOs",
            "value": 31
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorImages",
            "value": 96,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER, IDescriptor::E_TYPE::ET_UNIFORM_TEXEL_BUFFER count against this limit."
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorStorageImages",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorInputAttachments",
            "value": 7
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageResources",
            "value": 127
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetSamplers",
            "value": 80,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER count against this limit"
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUBOs",
            "value": 90
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetDynamicOffsetUBOs",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetSSBOs",
            "value": 155
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetDynamicOffsetSSBOs",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetImages",
            "value": 480,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER, IDescriptor::E_TYPE::ET_UNIFORM_TEXEL_BUFFER count against this limit."
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetStorageImages",
            "value": 40
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetInputAttachments",
            "value": 7
        },
        {
            "type": "uint8_t",
            "name": "maxVertexInputAttributes",
            "value": 16,
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "maxVertexInputBindings",
            "value": 16,
            "expose": false
        },
        {
            "type": "uint16_t",
            "name": "maxVertexInputAttributeOffset",
            "value": "maxVertexInputBindingStride-1",
            "expose": false
        },
        {
            "type": "uint16_t",
            "name": "maxVertexInputBindingStride",
            "value": 2048,
            "expose": false
        },
        {
            "type": "uint16_t",
            "name": "maxVertexOutputComponents",
            "value": 124
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationGenerationLevel",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationPatchSize",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlPerVertexInputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlPerVertexOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlPerPatchOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlTotalOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationEvaluationInputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationEvaluationOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryShaderInvocations",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryInputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryOutputVertices",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryTotalOutputComponents",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentInputComponents",
            "value": 116
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentOutputAttachments",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentDualSrcAttachments",
            "value": 1
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentCombinedOutputResources",
            "value": 16
        },
        {
            "type": "uint32_t",
            "name": "maxComputeSharedMemorySize",
            "value": 32768
        },
        {
            "type": "uint32_t",
            "name": "maxComputeWorkGroupCount[3]",
            "value": "{MinMaxWorkgroupCount,MinMaxWorkgroupCount,MinMaxWorkgroupCount}"
        },
        {
            "type": "uint16_t",
            "name": "maxComputeWorkGroupInvocations",
            "value": "MinMaxWorkgroupInvocations"
        },
        {
            "type": "uint16_t",
            "name": "maxWorkgroupSize[3]",
            "value": "{MinMaxWorkgroupInvocations,MinMaxWorkgroupInvocations,64u}"
        },
        {
            "type": "uint8_t",
            "name": "subPixelPrecisionBits",
            "value": "4"
        },
        {
            "type": "uint8_t",
            "name": "subTexelPrecisionBits",
            "value": "4"
        },
        {
            "type": "uint8_t",
            "name": "mipmapPrecisionBits",
            "value": "4"
        },
        {
            "type": "uint32_t",
            "name": "maxDrawIndexedIndexValue",
            "value": null,
            "expose": false,
            "comment": "[DO NOT EXPOSE] ROADMAP2022: requires fullDrawIndexUint32 so this must be 0xffFFffFFu"
        },
        {
            "type": "uint32_t",
            "name": "maxDrawIndirectCount",
            "value": 1073741824,
            "comment": "This is different to `maxDrawIndirectCount`, this is NOT about whether you can source the MDI count from a buffer, just about how many you can have"
        },
        {
            "type": "float",
            "name": "maxSamplerLodBias",
            "value": 4
        },
        {
            "type": "uint8_t",
            "name": "maxSamplerAnisotropyLog2",
            "value": 4
        },
        {
            "type": "uint8_t",
            "name": "maxViewports",
            "value": 16
        },
        {
            "type": "uint16_t",
            "name": "maxViewportDims[2]",
            "value": "{MinMaxImageDimension2D,MinMaxImageDimension2D}"
        },
        {
            "type": "float",
            "name": "viewportBoundsRange[2]",
            "value": "{ -MinMaxImageDimension2D*2u, MinMaxImageDimension2D*2u-1 }"
        },
        {
            "type": "uint32_t",
            "name": "viewportSubPixelBits",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "minMemoryMapAlignment",
            "value": 64
        },
        {
            "type": "uint16_t",
            "name": "bufferViewAlignment",
            "value": 64
        },
        {
            "type": "uint16_t",
            "name": "minUBOAlignment",
            "value": 256
        },
        {
            "type": "uint16_t",
            "name": "minSSBOAlignment",
            "value": 64
        },
        {
            "type": "int8_t",
            "name": "minTexelOffset",
            "value": -8
        },
        {
            "type": "uint8_t",
            "name": "maxTexelOffset",
            "value": 7
        },
        {
            "type": "int8_t",
            "name": "minTexelGatherOffset",
            "value": -8
        },
        {
            "type": "uint8_t",
            "name": "maxTexelGatherOffset",
            "value": 7
        },
        {
            "type": "float",
            "name": "minInterpolationOffset",
            "value": -0.5
        },
        {
            "type": "float",
            "name": "maxInterpolationOffset",
            "value": 0.4375
        },
        {
            "type": "uint8_t",
            "name": "subPixelInterpolationOffsetBits",
            "value": "MinSubPixelInterpolationOffsetBits"
        },
        {
            "type": "uint32_t",
            "name": "maxFramebufferWidth",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxFramebufferHeight",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxFramebufferLayers",
            "value": 1024
        },
        {
            "groupComment": [
                "- Spec states minimum supported value should be at least ESCF_1_BIT",
                "- it might be different for each integer format, best way is to query your integer format from physical device using vkGetPhysicalDeviceImageFormatProperties and get the sampleCounts",
                "https://www.khronos.org/registry/vulkan/specs/1.3-extensions/man/html/VkImageFormatProperties.html",
                "[DO NOT EXPOSE] because it might be different for every texture format and usage"
            ]
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferColorSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferDepthSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferStencilSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferNoAttachmentsSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "maxColorAttachments",
            "value": "MinMaxColorAttachments"
        },
        {
            "groupComment": [ "[DO NOT EXPOSE] because it might be different for every texture format and usage" ]
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageColorSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageIntegerSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageDepthSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageStencilSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "storageImageSampleCounts",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_1_BIT",
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "maxSampleMaskWords",
            "value": 1
        },
        {
            "groupComment": [ "[REQUIRE] ROADMAP 2024 and good device support" ]
        },
        {
            "type": "bool",
            "name": "timestampComputeAndGraphics",
            "value": true,
            "expose": false
        },
        {
            "type": "float",
            "name": "timestampPeriodInNanoSeconds",
            "value": 83.334,
            "comment": "timestampPeriod is the number of nanoseconds required for a timestamp query to be incremented by 1 (a float because vulkan reports), use core::rational in the future"
        },
        {
            "type": "uint8_t",
            "name": "maxClipDistances",
            "value": 8
        },
        {
            "type": "uint8_t",
            "name": "maxCullDistances",
            "value": 0
        },
        {
            "type": "uint8_t",
            "name": "maxCombinedClipAndCullDistances",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "discreteQueuePriorities",
            "value": 2
        },
        {
            "type": "float",
            "name": "pointSizeRange[2]",
            "value": "{1.f,64.f}"
        },
        {
            "type": "float",
            "name": "lineWidthRange[2]",
            "value": "{1.f,1.f}"
        },
        {
            "type": "float",
            "name": "pointSizeGranularity",
            "value": "1"
        },
        {
            "type": "float",
            "name": "lineWidthGranularity",
            "value": "1"
        },
        {
            "type": "bool",
            "name": "strictLines",
            "value": false,
            "comment": "old intels can't do this"
        },
        {
            "type": "bool",
            "name": "standardSampleLocations",
            "value": false,
            "comment": "Had to roll back from requiring, ROADMAP 2022 but some of our targets missing"
        },
        {
            "type": "uint16_t",
            "name": "optimalBufferCopyOffsetAlignment",
            "value": 256
        },
        {
            "type": "uint16_t",
            "name": "optimalBufferCopyRowPitchAlignment",
            "value": 128
        },
        {
            "type": "uint16_t",
            "name": "nonCoherentAtomSize",
            "value": 256
        },
        {
            "groupComment": [ "TODO: later", "VkPhysicalDeviceSparseProperties" ]
        },
        {
            "type": "bool",
            "name": "residencyStandard2DBlockShape",
            "value": true
        },
        {
            "type": "bool",
            "name": "residencyStandard2DMultisampleBlockShape",
            "value": false
        },
        {
            "type": "bool",
            "name": "residencyStandard3DBlockShape",
            "value": true
        },
        {
            "type": "bool",
            "name": "residencyAlignedMipSize",
            "value": false
        },
        {
            "type": "bool",
            "name": "residencyNonResidentStrict",
            "value": true
        }
    ],
    "vulkan11core": [
        {
            "groupComment": [ "Vulkan 1.1 Core" ]
        },
        {
            "type": "uint16_t",
            "namw": "subgroupSize",
            "value": "4"
        },
        {
            "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
            "namw": "subgroupOpsShaderStages",
            "value": "asset::IShader::ESS_COMPUTE | asset::IShader::ESS_ALL_GRAPHICS"
        },
        {
            "type": "bool",
            "namw": "shaderSubgroupClustered",
            "value": "false",
            "comment": "ROADMAP2022 mandates all but clustered and quad-all-stages, however all GPU's that we care about support basic, vote, ballot, shuffle and relative so not listing!"
        },
        {
            "type": "bool",
            "name": "shaderSubgroupArithmetic",
            "value": false,
            "comment": "candidates for promotion"
        },
        {
            "type": "bool",
            "name": "shaderSubgroupQuad",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSubgroupQuadAllStages",
            "value": false,
            "comment": "bad Android support"
        },
        {
            "declare": true,
            "type": "enum",
            "name": "E_POINT_CLIPPING_BEHAVIOR : uint8_t",
            "declarations": [ "EPCB_ALL_CLIP_PLANES = 0", "EPCB_USER_CLIP_PLANES_ONLY = 1" ]
        },
        {
            "type": "E_POINT_CLIPPING_BEHAVIOR",
            "name": "pointClippingBehavior",
            "value": "EPCB_USER_CLIP_PLANES_ONLY"
        },
        {
            "type": "uint8_t",
            "name": "maxMultiviewViewCount",
            "value": "6"
        },
        {
            "type": "uint32_t",
            "name": "maxMultiviewInstanceIndex",
            "value": "134217727"
        },
        {
            "type": "bool",
            "name": "protectedNoFault",
            "value": false,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerSetDescriptors",
            "value": "572"
        },
        {
            "type": "size_t",
            "name": "maxMemoryAllocationSize",
            "value": "MinMaxSSBOSize"
        }
    ],
    "vulkan12core": [
        {
            "groupComment": [ "Vulkan 1.2 Core" ]
        },
        {
            "declare": true,
            "type": "VkShaderFloatControlsIndependence",
            "name": "denormBehaviorIndependence",
            "expose": false,
            "comment": "TODO: need to implement ways to set them"
        },
        {
            "declare": true,
            "type": "VkShaderFloatControlsIndependence",
            "name": "roundingModeIndependence",
            "expose": false,
            "comment": "TODO: need to implement ways to set them"
        },
        {
            "type": "bool",
            "name": "shaderSignedZeroInfNanPreserveFloat16",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderSignedZeroInfNanPreserveFloat32",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderSignedZeroInfNanPreserveFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormPreserveFloat16",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormPreserveFloat32",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormPreserveFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormFlushToZeroFloat16",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormFlushToZeroFloat32",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormFlushToZeroFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTEFloat16",
            "value": false,
            "comment": "ROADMAP2024 but no good support yet"
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTEFloat32",
            "value": false,
            "comment": "ROADMAP2024 but no good support yet"
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTEFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTZFloat16",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTZFloat32",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTZFloat64",
            "value": false
        },
        {
            "groupComment": [
                "expose in 2 phases",
                "-Update After Bindand nonUniformEXT shader qualifier:",
                "Descriptor Lifetime Tracking PR #345 will do this, cause I don't want to rewrite the tracking system again.",
                "-Actual Descriptor Indexing:",
                "The whole 512k descriptor limits, runtime desc arrays, etc.will come later"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxUpdateAfterBindDescriptorsInAllPools",
            "value": 1048576
        },
        {
            "type": "bool",
            "name": "shaderUniformBufferArrayNonUniformIndexingNative",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSampledImageArrayNonUniformIndexingNative",
            "value": false,
            "comment": "promotion candidate"
        },
        {
            "type": "bool",
            "name": "shaderStorageBufferArrayNonUniformIndexingNative",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderStorageImageArrayNonUniformIndexingNative",
            "value": false,
            "comment": "promotion candidate"
        },
        {
            "type": "bool",
            "name": "shaderInputAttachmentArrayNonUniformIndexingNative",
            "value": false,
            "comment": "promotion candidate"
        },
        {
            "type": "bool",
            "name": "robustBufferAccessUpdateAfterBind",
            "value": false
        },
        {
            "type": "bool",
            "name": "quadDivergentImplicitLod",
            "value": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindSamplers",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindUBOs",
            "value": 15
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindSSBOs",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindStorageImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindInputAttachments",
            "value": "MinMaxColorAttachments"
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageUpdateAfterBindResources",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindSamplers",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindUBOs",
            "value": 72
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindSSBOs",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs",
            "value": 4
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindStorageImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindInputAttachments",
            "value": "MinMaxColorAttachments"
        },
        {
            "statement": "using RESOLVE_MODE_FLAGS = asset::IRenderpass::SCreationParams::SSubpassDescription::SDepthStencilAttachmentsRef::RESOLVE_MODE;"
        },
        {
            "type": "core::bitflag<RESOLVE_MODE_FLAGS>",
            "name": "supportedDepthResolveModes",
            "value": "RESOLVE_MODE_FLAGS::SAMPLE_ZERO_BIT"
        },
        {
            "type": "core::bitflag<RESOLVE_MODE_FLAGS>",
            "name": "supportedStencilResolveModes",
            "value": "RESOLVE_MODE_FLAGS::SAMPLE_ZERO_BIT"
        },
        {
            "type": "bool",
            "name": "independentResolveNone",
            "value": false
        },
        {
            "type": "bool",
            "name": "independentResolve",
            "value": false
        },
        {
            "declare": true,
            "type": "bool",
            "name": "filterMinmaxSingleComponentFormats",
            "expose": false,
            "comment": "TODO: you'll be able to query this in format usage/feature reports"
        },
        {
            "type": "bool",
            "name": "filterMinmaxImageComponentMapping",
            "expose": false
        },
        {
            "type": "uint64_t",
            "name": "maxTimelineSemaphoreValueDifference",
            "value": 2147483647,
            "comment": "[DO NOT EXPOSE] its high enough (207 days of uptime at 120 FPS)"
        },
        {
            "groupComment": [ "[DO NOT EXPOSE] because it might be different for every texture format and usage" ]
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferIntegerColorSampleCounts",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS(0u)"
        }
    ],
    "vulkan13core": [
        {
            "groupComment": [ "Vulkan 1.3 Core", "or VK_EXT_subgroup_size_control:" ]
        },
        {
            "type": "uint8_t",
            "name": "minSubgroupSize",
            "value": "64"
        },
        {
            "type": "uint8_t",
            "name": "maxSubgroupSize",
            "value": "4"
        },
        {
            "type": "uint32_t",
            "name": "maxComputeWorkgroupSubgroups",
            "value": "16"
        },
        {
            "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
            "name": "requiredSubgroupSizeStages",
            "value": "asset::IShader::E_SHADER_STAGE::ESS_UNKNOWN"
        },
        {
            "groupComment": [ "[DO NOT EXPOSE]: we won't expose inline uniform blocks right now" ]
        },
        {
            "type": "uint32_t",
            "name": "maxInlineUniformBlockSize",
            "value": "MinInlineUniformBlockSize",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": " axDescriptorSetUpdateAfterBindInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxInlineUniformTotalSize",
            "value": "MinInlineUniformBlockSize",
            "expose": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct8BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct8BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct8BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct4x8BitPackedUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct4x8BitPackedSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct4x8BitPackedMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct16BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct16BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct16BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct32BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct32BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct32BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct64BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct64BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct64BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating8BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating16BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating32BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating64BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "groupComment": [ "or VK_EXT_texel_buffer_alignment:", "[DO NOT EXPOSE]: the single texel alignments, let people just overalign" ]
        },
        {
            "type": "size_t",
            "name": "storageTexelBufferOffsetAlignmentBytes",
            "value": "std::numeric_limits<size_t>::max()"
        },
        {
            "declare": true,
            "type": "bool",
            "name": "storageTexelBufferOffsetSingleTexelAlignment",
            "expose": false
        },
        {
            "type": "size_t",
            "name": "uniformTexelBufferOffsetAlignmentBytes",
            "value": "std::numeric_limits<size_t>::max()"
        },
        {
            "declare": true,
            "type": "bool",
            "name": "uniformTexelBufferOffsetSingleTexelAlignment",
            "expose": false
        },
        {
            "type": "size_t",
            "name": "maxBufferSize",
            "value": "MinMaxSSBOSize",
            "comment": "or VK_KHR_maintenance4"
        }
    ],
    "nablacoreext": [
        {
            "groupComment": [ "Nabla Core Profile Extensions", "VK_EXT_external_memory_host", "ExternalMemoryHostPropertiesEXT" ]
        },
        {
            "type": "uint32_t",
            "name": "minImportedHostPointerAlignment",
            "value": 2147483648
        },
        {
            "groupComment": [ "ShaderAtomicFloatFeaturesEXT", "VK_EXT_shader_atomic_float", "[REQUIRE] Nabla Core Profile" ]
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat32Atomics",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat32AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat64AtomicAdd",
            "value": false
        },
        {
            "groupComment": [ "[REQUIRE] Nabla Core Profile" ]
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat32Atomics",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat32AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat64AtomicAdd",
            "value": false
        },
        {
            "groupComment": [ "[REQUIRE] Nabla Core Profile" ]
        },
        {
            "type": "bool",
            "name": "shaderImageFloat32Atomics",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderImageFloat32AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageFloat32Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageFloat32AtomicAdd",
            "value": false
        },
        {
            "groupComment": [ "Robustness2PropertiesEXT", "provided by VK_EXT_robustness2" ]
        },
        {
            "type": "size_t",
            "name": "robustStorageBufferAccessSizeAlignment",
            "value": 9223372036854775808
        },
        {
            "type": "size_t",
            "name": "robustUniformBufferAccessSizeAlignment",
            "value": 9223372036854775808
        }
    ],
    "vulkanext": [
        {
            "groupComment": [ "Vulkan Extensions" ]
        },
        {
            "type": "bool",
            "name": "shaderTrinaryMinmax",
            "value": false,
            "comment": "VK_AMD_shader_trinary_minmax"
        },
        {
            "type": "bool",
            "name": "shaderExplicitVertexParameter",
            "value": false,
            "comment": "VK_AMD_shader_explicit_vertex_parameter"
        },
        {
            "type": "bool",
            "name": "gpuShaderHalfFloatAMD",
            "value": false,
            "comment": "VK_AMD_gpu_shader_half_float"
        },
        {
            "type": "bool",
            "name": "shaderImageLoadStoreLod",
            "value": false,
            "comment": "VK_AMD_shader_image_load_store_lod"
        },
        {
            "groupComment": [
                "[TODO LATER] to expose but contingent on the TODO to implement one day",
                "PushDescriptorPropertiesKHR",
                "provided by VK_KHR_push_descriptor"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxPushDescriptors",
            "value": 0,
            "expose": false
        },
        {
            "groupComment": [
                "[TODO] need impl",
                "VK_GOOGLE_display_timing"
            ]
        },
        {
            "type": "bool",
            "name": "displayTiming",
            "value": false
        },
        {
            "groupComment": [
                "VK_EXT_discard_rectangles",
                "DiscardRectanglePropertiesEXT"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxDiscardRectangles",
            "value": 0
        },
        {
            "groupComment": [
                "VK_EXT_conservative_rasterization",
                "ConservativeRasterizationPropertiesEXT"
            ]
        },
        {
            "type": "float",
            "name": "primitiveOverestimationSize",
            "value": 0
        },
        {
            "type": "float",
            "name": "maxExtraPrimitiveOverestimationSize",
            "value": 0
        },
        {
            "type": "float",
            "name": "extraPrimitiveOverestimationSizeGranularity",
            "value": "std::numeric_limits<float>::infinity()"
        },
        {
            "type": "bool",
            "name": "primitiveUnderestimation",
            "value": false
        },
        {
            "type": "bool",
            "name": "conservativePointAndLineRasterization",
            "value": false
        },
        {
            "type": "bool",
            "name": "degenerateTrianglesRasterized",
            "value": false
        },
        {
            "type": "bool",
            "name": "degenerateLinesRasterized",
            "value": false
        },
        {
            "type": "bool",
            "name": "fullyCoveredFragmentShaderInputVariable",
            "value": false
        },
        {
            "type": "bool",
            "name": "conservativeRasterizationPostDepthCoverage",
            "value": false
        },
        {
            "type": "bool",
            "name": "queueFamilyForeign",
            "value": false,
            "comment": "VK_EXT_queue_family_foreign"
        },
        {
            "type": "bool",
            "name": "shaderStencilExport",
            "value": false,
            "comment": "VK_EXT_shader_stencil_export"
        },
        {
            "groupComment": [
                "VK_EXT_sample_locations",
                "SampleLocationsPropertiesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "variableSampleLocations",
            "value": false
        },
        {
            "type": "uint8_t",
            "name": "sampleLocationSubPixelBits",
            "value": 0
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampleLocationSampleCounts",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS(0u)"
        },
        {
            "type": "hlsl::uint32_t2",
            "name": "maxSampleLocationGridSize",
            "value": "{ 0u, 0u }"
        },
        {
            "type": "float",
            "name": "sampleLocationCoordinateRange[2]",
            "value": "{ 1.f, 0.f }"
        },
        {
            "groupComment": [
                "VK_KHR_acceleration_structure",
                "AccelerationStructurePropertiesKHR"
            ]
        },
        {
            "type": "uint64_t",
            "name": "maxAccelerationStructureGeometryCount",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxAccelerationStructureInstanceCount",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxAccelerationStructurePrimitiveCount",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxPerStageDescriptorAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxPerStageDescriptorUpdateAfterBindAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxDescriptorSetAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxDescriptorSetUpdateAfterBindAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "minAccelerationStructureScratchOffsetAlignment",
            "value": 2147483648
        },
        {
            "groupComment": [ "VK_KHR_ray_tracing_pipeline", "RayTracingPipelinePropertiesKHR" ]
        },
        {
            "type": "uint32_t",
            "name": "shaderGroupHandleSize",
            "value": 32,
            "expose": false,
            "comment": "`exact` limit type"
        },
        {
            "type": "uint32_t",
            "name": "maxRayRecursionDepth",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "maxShaderGroupStride",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "shaderGroupBaseAlignment",
            "value": 2147483648
        },
        {
            "type": "uint32_t",
            "name": "maxRayDispatchInvocationCount",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "shaderGroupHandleAlignment",
            "value": 2147483648
        },
        {
            "type": "uint32_t",
            "name": "maxRayHitAttributeSize",
            "value": 0
        },
        {
            "groupComment": [ "VK_NV_shader_sm_builtins", "ShaderSMBuiltinsFeaturesNV" ]
        },
        {
            "type": "bool",
            "name": "shaderSMBuiltins",
            "value": false
        },
        {
            "type": "bool",
            "name": "postDepthCoverage",
            "value": false,
            "comment": "VK_EXT_post_depth_coverage"
        },
        {
            "groupComment": [ "VK_KHR_shader_clock", "ShaderClockFeaturesKHR" ]
        },
        {
            "type": "bool",
            "name": "shaderDeviceClock",
            "value": false
        },
        {
            "groupComment": [ "VK_NV_compute_shader_derivatives", "ComputeShaderDerivativesFeaturesNV" ]
        },
        {
            "type": "bool",
            "name": "computeDerivativeGroupQuads",
            "value": false
        },
        {
            "type": "bool",
            "name": "computeDerivativeGroupLinear",
            "value": false
        },
        {
            "groupComment": [ "VK_NV_shader_image_footprint", "ShaderImageFootprintFeaturesNV" ]
        },
        {
            "type": "bool",
            "name": "imageFootprint",
            "value": false
        },
        {
            "groupComment": [ "VK_INTEL_shader_integer_functions2", "ShaderIntegerFunctions2FeaturesINTEL" ]
        },
        {
            "type": "bool",
            "name": "shaderIntegerFunctions2",
            "value": false
        },
        {
            "groupComment": [ "VK_EXT_pci_bus_info", "PCIBusInfoPropertiesEXT" ]
        },
        {
            "type": "uint32_t",
            "name": "pciDomain",
            "value": "~0u"
        },
        {
            "type": "uint32_t",
            "name": "pciBus",
            "value": "~0u"
        },
        {
            "type": "uint32_t",
            "name": "pciDevice",
            "value": "~0u"
        },
        {
            "type": "uint32_t",
            "name": "pciFunction",
            "value": "~0u"
        },
        {
            "groupComment": [ "VK_EXT_fragment_density_map", "FragmentDensityMapPropertiesEXT" ]
        },
        {
            "type": "hlsl::uint32_t2",
            "name": "minFragmentDensityTexelSize",
            "value": "{ ~0u, ~0u }"
        },
        {
            "type": "hlsl::uint32_t2",
            "name": "maxFragmentDensityTexelSize",
            "value": "{ 0u, 0u }"
        },
        {
            "type": "bool",
            "name": "fragmentDensityInvocations",
            "value": false
        },
        {
            "type": "bool",
            "name": "decorateString",
            "value": false,
            "comment": "VK_GOOGLE_decorate_string"
        },
        {
            "groupComment": [ "VK_EXT_shader_image_atomic_int64", "ShaderImageAtomicInt64FeaturesEXT" ]
        },
        {
            "type": "bool",
            "name": "shaderImageInt64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageInt64Atomics",
            "value": false
        },
        {
            "groupComment": [
                "[TODO] this feature introduces new/more pipeline state with VkPipelineRasterizationLineStateCreateInfoEXT",
                "VK_EXT_line_rasterization",
                "LineRasterizationPropertiesEXT"
            ]
        },
        {
            "type": "uint32_t",
            "name": "lineSubPixelPrecisionBits",
            "value": 0
        },
        {
            "groupComment": [
                "VK_EXT_shader_atomic_float2",
                "ShaderAtomicFloat2FeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat16Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat16AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat16AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat32AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat64AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat16Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat16AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat16AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat32AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat64AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderImageFloat32AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageFloat32AtomicMinMax",
            "value": false
        },
        {
            "groupComment": [
                "[DO NOT EXPOSE] won't expose right now, will do if we implement the extension",
                "VK_NV_device_generated_commands",
                "DeviceGeneratedCommandsPropertiesNV"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxGraphicsShaderGroupCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectSequenceCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsTokenCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsStreamCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsTokenOffset",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsStreamStride",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "minSequencesCountBufferOffsetAlignment",
            "value": 2147483648,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "minSequencesIndexBufferOffsetAlignment",
            "value": 2147483648,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "minIndirectCommandsBufferOffsetAlignment",
            "value": 2147483648,
            "expose": false
        },
        {
            "groupComment": [
                "[TODO] need impl",
                "VK_EXT_device_memory_report",
                "DeviceMemoryReportFeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "deviceMemoryReport",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderNonSemanticInfo",
            "value": false,
            "comment": "VK_KHR_shader_non_semantic_info"
        },
        {
            "groupComment": [
                "[TODO LATER] not in header (previous comment: too much effort)",
                "GraphicsPipelineLibraryPropertiesEXT",
                "provided by VK_EXT_graphics_pipeline_library"
            ]
        },
        {
            "type": "bool",
            "name": "graphicsPipelineLibraryFastLinking",
            "value": false,
            "expose": false
        },
        {
            "type": "bool",
            "name": "graphicsPipelineLibraryIndependentInterpolationDecoration",
            "value": false,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderEarlyAndLateFragmentTests",
            "value": false,
            "comment": "VK_AMD_shader_early_and_late_fragment_tests"
        },
        {
            "type": "bool",
            "name": "fragmentShaderBarycentric",
            "value": false,
            "comment": "VK_KHR_fragment_shader_barycentric"
        },
        {
            "groupComment": [
                "VK_KHR_shader_subgroup_uniform_control_flow",
                "ShaderSubgroupUniformControlFlowFeaturesKHR"
            ]
        },
        {
            "type": "bool",
            "name": "shaderSubgroupUniformControlFlow",
            "value": false
        },
        {
            "groupComment": [
                "provided by VK_EXT_fragment_density_map2",
                "FragmentDensityMap2PropertiesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "subsampledLoads",
            "value": false
        },
        {
            "type": "bool",
            "name": "subsampledCoarseReconstructionEarlyAccess",
            "value": false
        },
        {
            "type": "uint32_t",
            "name": "maxSubsampledArrayLayers",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetSubsampledSamplers",
            "value": 0
        },
        {
            "groupComment": [
                "VK_KHR_workgroup_memory_explicit_layout",
                "WorkgroupMemoryExplicitLayoutFeaturesKHR"
            ]
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayout",
            "value": false
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayoutScalarBlockLayout",
            "value": false
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayout8BitAccess",
            "value": false
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayout16BitAccess",
            "value": false
        },
        {
            "groupComment": [
                "[TODO] need new commandbuffer methods, etc",
                "VK_EXT_color_write_enable",
                "ColorWriteEnableFeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "colorWriteEnable",
            "value": false
        },
        {
            "groupComment": [
                "CooperativeMatrixPropertiesKHR",
                "VK_KHR_cooperative_matrix"
            ]
        },
        {
            "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
            "name": "cooperativeMatrixSupportedStages",
            "value": "asset::IShader::ESS_UNKNOWN"
        }
    ],
    "core10": [
        {
            "groupComment": [ "Always enabled if available, reported as limits", "Core 1.0 Features" ]
        },
        {
            "type": "bool",
            "name": "logicOp",
            "value": false,
            "comment": "mostly just desktops support this"
        },
        {
            "type": "bool",
            "name": "vertexPipelineStoresAndAtomics",
            "value": false,
            "comment": "All iOS GPUs don't support"
        },
        {
            "type": "bool",
            "name": "fragmentStoresAndAtomics",
            "value": false,
            "comment": "ROADMAP 2022 no support on iOS GPUs"
        },
        {
            "type": "bool",
            "name": "shaderTessellationAndGeometryPointSize",
            "value": false,
            "comment": "Candidate for promotion, just need to look into Linux and Android"
        },
        {
            "type": "bool",
            "name": "shaderStorageImageMultisample",
            "value": false,
            "comment": "Apple GPUs and some Intels don't support"
        },
        {
            "type": "bool",
            "name": "shaderStorageImageReadWithoutFormat",
            "value": false,
            "comment": "Intel is a special boy and doesn't support"
        },
        {
            "type": "bool",
            "name": "shaderStorageImageArrayDynamicIndexing",
            "value": false,
            "comment": "ROADMAP 2022 but no iOS GPU supports"
        },
        {
            "type": "bool",
            "name": "shaderFloat64",
            "value": false,
            "comment": "Intel Gen12 and ARC are special-boy drivers (TM)"
        },
        {
            "type": "bool",
            "name": "variableMultisampleRate",
            "value": false,
            "comment": "poor support on Apple GPUs"
        },
        {
            "groupComment": [ "Core 1.1 Features or VK_KHR_16bit_storage" ]
        },
        {
            "type": "bool",
            "name": "storagePushConstant16",
            "value": false
        },
        {
            "type": "bool",
            "name": "storageInputOutput16",
            "value": false
        },
        {
            "groupComment": [ "Core 1.1 Features or VK_KHR_multiview, normally would be required but MoltenVK mismatches these" ]
        },
        {
            "type": "bool",
            "name": "multiviewGeometryShader",
            "value": false
        },
        {
            "type": "bool",
            "name": "multiviewTessellationShader",
            "value": false
        },
        {
            "type": "bool",
            "name": "drawIndirectCount",
            "value": false,
            "comment": "Vulkan 1.2 Core or VK_KHR_draw_indirect_count"
        },
        {
            "type": "bool",
            "name": "storagePushConstant8",
            "value": false,
            "comment": "Vulkan 1.2 Core or VK_KHR_8bit_storage"
        },
        {
            "groupComment": [ "Vulkan 1.2 Core or VK_KHR_shader_atomic_int64" ]
        },
        {
            "type": "bool",
            "name": "shaderBufferInt64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedInt64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderFloat16",
            "value": false,
            "comment": "Vulkan 1.2 Core or VK_KHR_shader_float16_int8"
        },
        {
            "groupComment": [ "Vulkan 1.2 Core or VK_EXT_descriptor_indexing" ]
        },
        {
            "type": "bool",
            "name": "shaderInputAttachmentArrayDynamicIndexing",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderUniformBufferArrayNonUniformIndexing",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderInputAttachmentArrayNonUniformIndexing",
            "value": false
        },
        {
            "type": "bool",
            "name": "descriptorBindingUniformBufferUpdateAfterBind",
            "value": false
        },
        {
            "groupComment": [ "Vulkan 1.2 or VK_EXT_sampler_filter_minmax" ]
        },
        {
            "type": "bool",
            "name": "samplerFilterMinmax",
            "value": false,
            "comment": "TODO: Actually implement the sampler flag enums"
        },
        {
            "type": "bool",
            "name": "vulkanMemoryModelAvailabilityVisibilityChains",
            "value": false,
            "comment": "Vulkan 1.3 requires but we make concessions for MoltenVK"
        },
        {
            "groupComment": [ "Vulkan 1.2 Core or VK_EXT_shader_viewport_index_layer" ]
        },
        {
            "type": "bool",
            "name": "shaderOutputViewportIndex",
            "value": false,
            "comment": "ALIAS: VK_EXT_shader_viewport_index_layer"
        },
        {
            "type": "bool",
            "name": "shaderOutputLayer",
            "value": false,
            "comment": "ALIAS: VK_EXT_shader_viewport_index_layer"
        },
        {
            "groupComment": [ "Vulkan 1.3 non-optional requires but poor support" ]
        },
        {
            "type": "bool",
            "name": "shaderDemoteToHelperInvocation",
            "value": false,
            "comment": "or VK_EXT_shader_demote_to_helper_invocation"
        },
        {
            "type": "bool",
            "name": "shaderTerminateInvocation",
            "value": false,
            "comment": "or VK_KHR_shader_terminate_invocation"
        },
        {
            "groupComment": [ "Vulkan 1.3 non-optional requires but poor support" ]
        }
        {
            "type": "bool",
            "name": "shaderZeroInitializeWorkgroupMemory",
            "value": false,
            "comment": "or VK_KHR_zero_initialize_workgroup_memory"
        }
    ],
    "nabla": [
        {
            "groupComment": [ "Nabla" ]
        },
        {
            "type": "uint32_t",
            "name": "computeUnits",
            "value": 0
        },
        {
            "type": "bool",
            "name": "dispatchBase",
            "value": false,
            "comment": "true in Vk, false in GL"
        },
        {
            "type": "bool",
            "name": "allowCommandBufferQueryCopies",
            "value": false
        },
        {
            "type": "uint32_t",
            "name": "maxOptimallyResidentWorkgroupInvocations",
            "value": 0,
            "comment": "its 1D because multidimensional workgroups are an illusion"
        },
        {
            "type": "uint32_t",
            "name": "maxResidentInvocations",
            "value": 0,
            "comment": "These are maximum number of invocations you could expect to execute simultaneously on this device"
        },
        {
            "type": "asset::CGLSLCompiler::E_SPIRV_VERSION",
            "name": "spirvVersion",
            "value": "asset::CGLSLCompiler::E_SPIRV_VERSION::ESV_1_6"
        },
        {
            "type": "function",
            "function": [
                "// utility functions",
                "// In the cases where the workgroups synchronise with each other such as work DAGs (i.e. `CScanner`),",
                "// `workgroupSpinningProtection` is meant to protect against launching a dispatch so wide that",
                "// a workgroup of the next cut of the DAG spins for an extended time to wait on a workgroup from a previous one.",
                "inline uint32_t computeOptimalPersistentWorkgroupDispatchSize(const uint64_t elementCount, const uint32_t workgroupSize, const uint32_t workgroupSpinningProtection=1u) const",
                "{",
                "    assert(elementCount!=0ull && \"Input element count can't be 0!\");",
                "    const uint64_t infinitelyWideDeviceWGCount:w = (elementCount-1ull)/(static_cast<uint64_t>(workgroupSize)*static_cast<uint64_t>(workgroupSpinningProtection))+1ull;",
                "    const uint32_t maxResidentWorkgroups = maxResidentInvocations/workgroupSize;",
                "    return static_cast<uint32_t>(core::min<uint64_t>(infinitelyWideDeviceWGCount,maxResidentWorkgroups));",
                "}"
            ]
        },
        {
            "type": "function",
            "function": [
                "// we don't compare certain capabilities because they don't mean better/worse",
                "inline bool isSubsetOf(const SPhysicalDeviceLimits& _rhs) const",
                "{",
                "    if (maxImageDimension1D > _rhs.maxImageDimension1D) return false;",
                "    if (maxImageDimension2D > _rhs.maxImageDimension2D) return false;",
                "    if (maxImageDimension3D > _rhs.maxImageDimension3D) return false;",
                "    if (maxImageDimensionCube > _rhs.maxImageDimensionCube) return false;",
                "    if (maxImageArrayLayers > _rhs.maxImageArrayLayers) return false;",
                "    if (maxBufferViewTexels > _rhs.maxBufferViewTexels) return false;",
                "    if (maxUBOSize > _rhs.maxUBOSize) return false;",
                "    if (maxSSBOSize > _rhs.maxSSBOSize) return false;",
                "    if (maxPushConstantsSize > _rhs.maxPushConstantsSize) return false;",
                "    if (maxMemoryAllocationCount > _rhs.maxMemoryAllocationCount) return false;",
                "    if (maxSamplerAllocationCount > _rhs.maxSamplerAllocationCount) return false;",
                "    if (bufferImageGranularity < _rhs.bufferImageGranularity) return false;",
                "    if (maxPerStageDescriptorSamplers > _rhs.maxPerStageDescriptorSamplers) return false;",
                "    if (maxPerStageDescriptorUBOs > _rhs.maxPerStageDescriptorUBOs) return false;",
                "    if (maxPerStageDescriptorSSBOs > _rhs.maxPerStageDescriptorSSBOs) return false;",
                "    if (maxPerStageDescriptorImages > _rhs.maxPerStageDescriptorImages) return false;",
                "    if (maxPerStageDescriptorStorageImages > _rhs.maxPerStageDescriptorStorageImages) return false;",
                "    if (maxPerStageDescriptorInputAttachments > _rhs.maxPerStageDescriptorInputAttachments) return false;",
                "    if (maxPerStageResources > _rhs.maxPerStageResources) return false;",
                "    if (maxDescriptorSetSamplers > _rhs.maxDescriptorSetSamplers) return false;",
                "    if (maxDescriptorSetUBOs > _rhs.maxDescriptorSetUBOs) return false;",
                "    if (maxDescriptorSetDynamicOffsetUBOs > _rhs.maxDescriptorSetDynamicOffsetUBOs) return false;",
                "    if (maxDescriptorSetSSBOs > _rhs.maxDescriptorSetSSBOs) return false;",
                "    if (maxDescriptorSetDynamicOffsetSSBOs > _rhs.maxDescriptorSetDynamicOffsetSSBOs) return false;",
                "    if (maxDescriptorSetImages > _rhs.maxDescriptorSetImages) return false;",
                "    if (maxDescriptorSetStorageImages > _rhs.maxDescriptorSetStorageImages) return false;",
                "    if (maxDescriptorSetInputAttachments > _rhs.maxDescriptorSetInputAttachments) return false;",
                "    if (maxVertexOutputComponents > _rhs.maxVertexOutputComponents) return false;",
                "    if (maxTessellationGenerationLevel > _rhs.maxTessellationGenerationLevel) return false;",
                "    if (maxTessellationPatchSize > _rhs.maxTessellationPatchSize) return false;",
                "    if (maxTessellationControlPerVertexInputComponents > _rhs.maxTessellationControlPerVertexInputComponents) return false;",
                "    if (maxTessellationControlPerVertexOutputComponents > _rhs.maxTessellationControlPerVertexOutputComponents) return false;",
                "    if (maxTessellationControlPerPatchOutputComponents > _rhs.maxTessellationControlPerPatchOutputComponents) return false;",
                "    if (maxTessellationControlTotalOutputComponents > _rhs.maxTessellationControlTotalOutputComponents) return false;",
                "    if (maxTessellationEvaluationInputComponents > _rhs.maxTessellationEvaluationInputComponents) return false;",
                "    if (maxTessellationEvaluationOutputComponents > _rhs.maxTessellationEvaluationOutputComponents) return false;",
                "    if (maxGeometryShaderInvocations > _rhs.maxGeometryShaderInvocations) return false;",
                "    if (maxGeometryInputComponents > _rhs.maxGeometryInputComponents) return false;",
                "    if (maxGeometryOutputComponents > _rhs.maxGeometryOutputComponents) return false;",
                "    if (maxGeometryOutputVertices > _rhs.maxGeometryOutputVertices) return false;",
                "    if (maxGeometryTotalOutputComponents > _rhs.maxGeometryTotalOutputComponents) return false;",
                "    if (maxFragmentInputComponents > _rhs.maxFragmentInputComponents) return false;",
                "    if (maxFragmentOutputAttachments > _rhs.maxFragmentOutputAttachments) return false;",
                "    if (maxFragmentDualSrcAttachments > _rhs.maxFragmentDualSrcAttachments) return false;",
                "    if (maxFragmentCombinedOutputResources > _rhs.maxFragmentCombinedOutputResources) return false;",
                "    if (maxComputeSharedMemorySize > _rhs.maxComputeSharedMemorySize) return false;",
                "    if (maxComputeWorkGroupCount[0] > _rhs.maxComputeWorkGroupCount[0]) return false;",
                "    if (maxComputeWorkGroupCount[1] > _rhs.maxComputeWorkGroupCount[1]) return false;",
                "    if (maxComputeWorkGroupCount[2] > _rhs.maxComputeWorkGroupCount[2]) return false;",
                "    if (maxComputeWorkGroupInvocations > _rhs.maxComputeWorkGroupInvocations) return false;",
                "    if (maxWorkgroupSize[0] > _rhs.maxWorkgroupSize[0]) return false;",
                "    if (maxWorkgroupSize[1] > _rhs.maxWorkgroupSize[1]) return false;",
                "    if (maxWorkgroupSize[2] > _rhs.maxWorkgroupSize[2]) return false;",
                "    if (subPixelPrecisionBits > _rhs.subPixelPrecisionBits) return false;",
                "    if (subTexelPrecisionBits > _rhs.subTexelPrecisionBits) return false;",
                "    if (mipmapPrecisionBits > _rhs.mipmapPrecisionBits) return false;",
                "    if (maxDrawIndirectCount > _rhs.maxDrawIndirectCount) return false;",
                "    if (maxSamplerLodBias > _rhs.maxSamplerLodBias) return false;",
                "    if (maxSamplerAnisotropyLog2 > _rhs.maxSamplerAnisotropyLog2) return false;",
                "    if (maxViewports > _rhs.maxViewports) return false;",
                "    if (maxViewportDims[0] > _rhs.maxViewportDims[0]) return false;",
                "    if (maxViewportDims[1] > _rhs.maxViewportDims[1]) return false;",
                "    if (viewportBoundsRange[0] < _rhs.viewportBoundsRange[0] || viewportBoundsRange[1] > _rhs.viewportBoundsRange[1]) return false;",
                "    if (viewportSubPixelBits > _rhs.viewportSubPixelBits) return false;",
                "    // the `>` is on purpose, its not a restriction its a guarantee",
                "    if (minMemoryMapAlignment > _rhs.minMemoryMapAlignment) return false;",
                "    if (bufferViewAlignment < _rhs.bufferViewAlignment) return false;",
                "    if (minUBOAlignment < _rhs.minUBOAlignment) return false;",
                "    if (minSSBOAlignment < _rhs.minSSBOAlignment) return false;",
                "    if (minTexelOffset < _rhs.minTexelOffset || maxTexelOffset > _rhs.maxTexelOffset) return false;",
                "    if (minTexelGatherOffset < _rhs.minTexelGatherOffset || maxTexelGatherOffset > _rhs.maxTexelGatherOffset) return false;",
                "    if (minInterpolationOffset < _rhs.minInterpolationOffset || maxInterpolationOffset > _rhs.maxInterpolationOffset) return false;",
                "    if (subPixelInterpolationOffsetBits > _rhs.subPixelInterpolationOffsetBits) return false;",
                "    if (maxFramebufferWidth > _rhs.maxFramebufferWidth) return false;",
                "    if (maxFramebufferHeight > _rhs.maxFramebufferHeight) return false;",
                "    if (maxFramebufferLayers > _rhs.maxFramebufferLayers) return false;",
                "    if (maxColorAttachments > _rhs.maxColorAttachments) return false;",
                "    if (maxSampleMaskWords > _rhs.maxSampleMaskWords) return false;",
                "    // don't compare certain things, they don't make your device better or worse",
                "    //if (timestampPeriodInNanoSeconds < _rhs.timestampPeriodInNanoSeconds) return false;",
                "    if (maxClipDistances > _rhs.maxClipDistances) return false;",
                "    if (maxCullDistances > _rhs.maxCullDistances) return false;",
                "    if (maxCombinedClipAndCullDistances > _rhs.maxCombinedClipAndCullDistances) return false;",
                "    if (discreteQueuePriorities > _rhs.discreteQueuePriorities) return false;",
                "    if (pointSizeRange[0] < _rhs.pointSizeRange[0] || pointSizeRange[1] > _rhs.pointSizeRange[1]) return false;",
                "    if (lineWidthRange[0] < _rhs.lineWidthRange[0] || lineWidthRange[1] > _rhs.lineWidthRange[1]) return false;",
                "    if (pointSizeGranularity < _rhs.pointSizeGranularity) return false;",
                "    if (lineWidthGranularity < _rhs.lineWidthGranularity) return false;",
                "    if (strictLines && !_rhs.strictLines) return false;",
                "    if (standardSampleLocations && !_rhs.standardSampleLocations) return false;",
                "    if (optimalBufferCopyOffsetAlignment < _rhs.optimalBufferCopyOffsetAlignment) return false;",
                "    if (optimalBufferCopyRowPitchAlignment < _rhs.optimalBufferCopyRowPitchAlignment) return false;",
                "    if (nonCoherentAtomSize < _rhs.nonCoherentAtomSize) return false;",
                "    // don't compare certain things, they don't make your device better or worse",
                "    //if (subgroupSize > _rhs.subgroupSize) return false;",
                "    if (!_rhs.subgroupOpsShaderStages.hasFlags(subgroupOpsShaderStages)) return false;",
                "    if (shaderSubgroupClustered && !_rhs.shaderSubgroupClustered) return false;",
                "    if (shaderSubgroupArithmetic && !_rhs.shaderSubgroupArithmetic) return false;",
                "    if (shaderSubgroupQuad && !_rhs.shaderSubgroupQuad) return false;",
                "    if (shaderSubgroupQuadAllStages && !_rhs.shaderSubgroupQuadAllStages) return false;",
                "    if (pointClippingBehavior==EPCB_ALL_CLIP_PLANES && _rhs.pointClippingBehavior==EPCB_USER_CLIP_PLANES_ONLY) return false;",
                "    if (maxMultiviewViewCount > _rhs.maxMultiviewViewCount) return false;",
                "    if (maxMultiviewInstanceIndex > _rhs.maxMultiviewInstanceIndex) return false;",
                "    if (maxPerSetDescriptors > _rhs.maxPerSetDescriptors) return false;",
                "    if (maxMemoryAllocationSize > _rhs.maxMemoryAllocationSize) return false;",
                "    if (shaderSignedZeroInfNanPreserveFloat64 && !_rhs.shaderSignedZeroInfNanPreserveFloat64) return false;",
                "    if (shaderDenormPreserveFloat16 && !_rhs.shaderDenormPreserveFloat16) return false;",
                "    if (shaderDenormPreserveFloat32 && !_rhs.shaderDenormPreserveFloat32) return false;",
                "    if (shaderDenormPreserveFloat64 && !_rhs.shaderDenormPreserveFloat64) return false;",
                "    if (shaderDenormFlushToZeroFloat16 && !_rhs.shaderDenormFlushToZeroFloat16) return false;",
                "    if (shaderDenormFlushToZeroFloat32 && !_rhs.shaderDenormFlushToZeroFloat32) return false;",
                "    if (shaderDenormFlushToZeroFloat64 && !_rhs.shaderDenormFlushToZeroFloat64) return false;",
                "    if (shaderRoundingModeRTEFloat16 && !_rhs.shaderRoundingModeRTEFloat16) return false;",
                "    if (shaderRoundingModeRTEFloat32 && !_rhs.shaderRoundingModeRTEFloat32) return false;",
                "    if (shaderRoundingModeRTEFloat64 && !_rhs.shaderRoundingModeRTEFloat64) return false;",
                "    if (shaderRoundingModeRTZFloat16 && !_rhs.shaderRoundingModeRTZFloat16) return false;",
                "    if (shaderRoundingModeRTZFloat32 && !_rhs.shaderRoundingModeRTZFloat32) return false;",
                "    if (shaderRoundingModeRTZFloat64 && !_rhs.shaderRoundingModeRTZFloat64) return false;",
                "    if (maxUpdateAfterBindDescriptorsInAllPools > _rhs.maxUpdateAfterBindDescriptorsInAllPools) return false;",
                "    if (shaderUniformBufferArrayNonUniformIndexingNative && !_rhs.shaderUniformBufferArrayNonUniformIndexingNative) return false;",
                "    if (shaderSampledImageArrayNonUniformIndexingNative && !_rhs.shaderSampledImageArrayNonUniformIndexingNative) return false;",
                "    if (shaderStorageBufferArrayNonUniformIndexingNative && !_rhs.shaderStorageBufferArrayNonUniformIndexingNative) return false;",
                "    if (shaderStorageImageArrayNonUniformIndexingNative && !_rhs.shaderStorageImageArrayNonUniformIndexingNative) return false;",
                "    if (shaderInputAttachmentArrayNonUniformIndexingNative && !_rhs.shaderInputAttachmentArrayNonUniformIndexingNative) return false;",
                "    if (robustBufferAccessUpdateAfterBind && !_rhs.robustBufferAccessUpdateAfterBind) return false;",
                "    if (quadDivergentImplicitLod && !_rhs.quadDivergentImplicitLod) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindSamplers > _rhs.maxPerStageDescriptorUpdateAfterBindSamplers) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindUBOs > _rhs.maxPerStageDescriptorUpdateAfterBindUBOs) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindSSBOs > _rhs.maxPerStageDescriptorUpdateAfterBindSSBOs) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindImages > _rhs.maxPerStageDescriptorUpdateAfterBindImages) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindStorageImages > _rhs.maxPerStageDescriptorUpdateAfterBindStorageImages) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindInputAttachments > _rhs.maxPerStageDescriptorUpdateAfterBindInputAttachments) return false;",
                "    if (maxPerStageUpdateAfterBindResources > _rhs.maxPerStageUpdateAfterBindResources) return false;",
                "    if (maxDescriptorSetUpdateAfterBindSamplers > _rhs.maxDescriptorSetUpdateAfterBindSamplers) return false;",
                "    if (maxDescriptorSetUpdateAfterBindUBOs > _rhs.maxDescriptorSetUpdateAfterBindUBOs) return false;",
                "    if (maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs > _rhs.maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs) return false;",
                "    if (maxDescriptorSetUpdateAfterBindSSBOs > _rhs.maxDescriptorSetUpdateAfterBindSSBOs) return false;",
                "    if (maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs > _rhs.maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs) return false;",
                "    if (maxDescriptorSetUpdateAfterBindImages > _rhs.maxDescriptorSetUpdateAfterBindImages) return false;",
                "    if (maxDescriptorSetUpdateAfterBindStorageImages > _rhs.maxDescriptorSetUpdateAfterBindStorageImages) return false;",
                "    if (maxDescriptorSetUpdateAfterBindInputAttachments > _rhs.maxDescriptorSetUpdateAfterBindInputAttachments) return false;",
                "    if (!_rhs.supportedDepthResolveModes.hasFlags(supportedDepthResolveModes)) return false;",
                "    if (!_rhs.supportedStencilResolveModes.hasFlags(supportedStencilResolveModes)) return false;",
                "    if (independentResolveNone && !_rhs.independentResolveNone) return false;",
                "    if (independentResolve && !_rhs.independentResolve) return false;",
                "    if (filterMinmaxImageComponentMapping && !_rhs.filterMinmaxImageComponentMapping) return false;",
                "    if (minSubgroupSize < _rhs.minSubgroupSize || maxSubgroupSize > _rhs.maxSubgroupSize) return false;",
                "    if (maxComputeWorkgroupSubgroups > _rhs.maxComputeWorkgroupSubgroups) return false;",
                "    if (!_rhs.requiredSubgroupSizeStages.hasFlags(requiredSubgroupSizeStages)) return false;",
                "    if (integerDotProduct8BitUnsignedAccelerated && !_rhs.integerDotProduct8BitUnsignedAccelerated) return false;",
                "    if (integerDotProduct8BitSignedAccelerated && !_rhs.integerDotProduct8BitSignedAccelerated) return false;",
                "    if (integerDotProduct8BitMixedSignednessAccelerated && !_rhs.integerDotProduct8BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProduct4x8BitPackedUnsignedAccelerated && !_rhs.integerDotProduct4x8BitPackedUnsignedAccelerated) return false;",
                "    if (integerDotProduct4x8BitPackedSignedAccelerated && !_rhs.integerDotProduct4x8BitPackedSignedAccelerated) return false;",
                "    if (integerDotProduct4x8BitPackedMixedSignednessAccelerated && !_rhs.integerDotProduct4x8BitPackedMixedSignednessAccelerated) return false;",
                "    if (integerDotProduct16BitUnsignedAccelerated && !_rhs.integerDotProduct16BitUnsignedAccelerated) return false;",
                "    if (integerDotProduct16BitSignedAccelerated && !_rhs.integerDotProduct16BitSignedAccelerated) return false;",
                "    if (integerDotProduct16BitMixedSignednessAccelerated && !_rhs.integerDotProduct16BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProduct32BitUnsignedAccelerated && !_rhs.integerDotProduct32BitUnsignedAccelerated) return false;",
                "    if (integerDotProduct32BitSignedAccelerated && !_rhs.integerDotProduct32BitSignedAccelerated) return false;",
                "    if (integerDotProduct32BitMixedSignednessAccelerated && !_rhs.integerDotProduct32BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProduct64BitUnsignedAccelerated && !_rhs.integerDotProduct64BitUnsignedAccelerated) return false;",
                "    if (integerDotProduct64BitSignedAccelerated && !_rhs.integerDotProduct64BitSignedAccelerated) return false;",
                "    if (integerDotProduct64BitMixedSignednessAccelerated && !_rhs.integerDotProduct64BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating8BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating8BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating8BitSignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating16BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating16BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating16BitSignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating32BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating32BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating32BitSignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating64BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating64BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating64BitSignedAccelerated) return false;",
                "    if (integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) return false;",
                "    if (storageTexelBufferOffsetAlignmentBytes < _rhs.storageTexelBufferOffsetAlignmentBytes) return false;",
                "    if (uniformTexelBufferOffsetAlignmentBytes < _rhs.uniformTexelBufferOffsetAlignmentBytes) return false;",
                "    if (maxBufferSize > _rhs.maxBufferSize) return false;",
                "    if (minImportedHostPointerAlignment < _rhs.minImportedHostPointerAlignment) return false;",
                "    if (shaderBufferFloat32AtomicAdd && !_rhs.shaderBufferFloat32AtomicAdd) return false;",
                "    if (shaderBufferFloat64Atomics && !_rhs.shaderBufferFloat64Atomics) return false;",
                "    if (shaderBufferFloat64AtomicAdd && !_rhs.shaderBufferFloat64AtomicAdd) return false;",
                "    if (shaderSharedFloat32AtomicAdd && !_rhs.shaderSharedFloat32AtomicAdd) return false;",
                "    if (shaderSharedFloat64Atomics && !_rhs.shaderSharedFloat64Atomics) return false;",
                "    if (shaderSharedFloat64AtomicAdd && !_rhs.shaderSharedFloat64AtomicAdd) return false;",
                "    if (shaderImageFloat32AtomicAdd && !_rhs.shaderImageFloat32AtomicAdd) return false;",
                "    if (sparseImageFloat32Atomics && !_rhs.sparseImageFloat32Atomics) return false;",
                "    if (sparseImageFloat32AtomicAdd && !_rhs.sparseImageFloat32AtomicAdd) return false;",
                "    if (robustStorageBufferAccessSizeAlignment < _rhs.robustStorageBufferAccessSizeAlignment) return false;",
                "    if (robustUniformBufferAccessSizeAlignment < _rhs.robustUniformBufferAccessSizeAlignment) return false;",
                "    if (shaderTrinaryMinmax && !_rhs.shaderTrinaryMinmax) return false;",
                "    if (shaderExplicitVertexParameter && !_rhs.shaderExplicitVertexParameter) return false;",
                "    if (gpuShaderHalfFloatAMD && !_rhs.gpuShaderHalfFloatAMD) return false;",
                "    if (shaderImageLoadStoreLod && !_rhs.shaderImageLoadStoreLod) return false;",
                "    if (displayTiming && !_rhs.displayTiming) return false;",
                "    if (maxDiscardRectangles > _rhs.maxDiscardRectangles) return false;",
                "    // don't compare certain things, they don't make your device better or worse",
                "    //if (primitiveOverestimationSize > _rhs.primitiveOverestimationSize) return false;",
                "    if (maxExtraPrimitiveOverestimationSize > _rhs.maxExtraPrimitiveOverestimationSize) return false;",
                "    if (extraPrimitiveOverestimationSizeGranularity < _rhs.extraPrimitiveOverestimationSizeGranularity) return false;",
                "    if (primitiveUnderestimation && !_rhs.primitiveUnderestimation) return false;",
                "    if (conservativePointAndLineRasterization && !_rhs.conservativePointAndLineRasterization) return false;",
                "    if (degenerateTrianglesRasterized && !_rhs.degenerateTrianglesRasterized) return false;",
                "    if (degenerateLinesRasterized && !_rhs.degenerateLinesRasterized) return false;",
                "    if (fullyCoveredFragmentShaderInputVariable && !_rhs.fullyCoveredFragmentShaderInputVariable) return false;",
                "    if (conservativeRasterizationPostDepthCoverage && !_rhs.conservativeRasterizationPostDepthCoverage) return false;",
                "    if (queueFamilyForeign && !_rhs.queueFamilyForeign) return false;",
                "    if (shaderStencilExport && !_rhs.shaderStencilExport) return false;",
                "    if (variableSampleLocations && !_rhs.variableSampleLocations) return false;",
                "    if (sampleLocationSubPixelBits > _rhs.sampleLocationSubPixelBits) return false;",
                "    if (!_rhs.sampleLocationSampleCounts.hasFlags(sampleLocationSampleCounts)) return false;",
                "    if (maxSampleLocationGridSize.x > _rhs.maxSampleLocationGridSize.x) return false;",
                "    if (maxSampleLocationGridSize.y > _rhs.maxSampleLocationGridSize.y) return false;",
                "    if (sampleLocationCoordinateRange[0] < _rhs.sampleLocationCoordinateRange[0] || sampleLocationCoordinateRange[1] > _rhs.sampleLocationCoordinateRange[1]) return false;",
                "    if (maxAccelerationStructureGeometryCount > _rhs.maxAccelerationStructureGeometryCount) return false;",
                "    if (maxAccelerationStructureInstanceCount > _rhs.maxAccelerationStructureInstanceCount) return false;",
                "    if (maxAccelerationStructurePrimitiveCount > _rhs.maxAccelerationStructurePrimitiveCount) return false;",
                "    if (maxPerStageDescriptorAccelerationStructures > _rhs.maxPerStageDescriptorAccelerationStructures) return false;",
                "    if (maxPerStageDescriptorUpdateAfterBindAccelerationStructures > _rhs.maxPerStageDescriptorUpdateAfterBindAccelerationStructures) return false;",
                "    if (maxDescriptorSetAccelerationStructures > _rhs.maxDescriptorSetAccelerationStructures) return false;",
                "    if (maxDescriptorSetUpdateAfterBindAccelerationStructures > _rhs.maxDescriptorSetUpdateAfterBindAccelerationStructures) return false;",
                "    if (minAccelerationStructureScratchOffsetAlignment < _rhs.minAccelerationStructureScratchOffsetAlignment) return false;",
                "    if (maxRayRecursionDepth > _rhs.maxRayRecursionDepth) return false;",
                "    if (maxShaderGroupStride > _rhs.maxShaderGroupStride) return false;",
                "    if (shaderGroupBaseAlignment < _rhs.shaderGroupBaseAlignment) return false;",
                "    if (maxRayDispatchInvocationCount > _rhs.maxRayDispatchInvocationCount) return false;",
                "    if (shaderGroupHandleAlignment < _rhs.shaderGroupHandleAlignment) return false;",
                "    if (maxRayHitAttributeSize > _rhs.maxRayHitAttributeSize) return false;",
                "    if (shaderSMBuiltins && !_rhs.shaderSMBuiltins) return false;",
                "    if (postDepthCoverage && !_rhs.postDepthCoverage) return false;",
                "    if (shaderDeviceClock && !_rhs.shaderDeviceClock) return false;",
                "    if (computeDerivativeGroupQuads && !_rhs.computeDerivativeGroupQuads) return false;",
                "    if (computeDerivativeGroupLinear && !_rhs.computeDerivativeGroupLinear) return false;",
                "    if (imageFootprint && !_rhs.imageFootprint) return false;",
                "    if (shaderIntegerFunctions2 && !_rhs.shaderIntegerFunctions2) return false;",
                "    // don't compare certain things, they don't make your device better or worse",
                "    // uint32_t  pciDomain = ~0u;",
                "    // uint32_t  pciBus = ~0u;",
                "    // uint32_t  pciDevice = ~0u;",
                "    // uint32_t  pciFunction = ~0u;",
                "    if (minFragmentDensityTexelSize.x < _rhs.minFragmentDensityTexelSize.x) return false;",
                "    if (minFragmentDensityTexelSize.y < _rhs.minFragmentDensityTexelSize.y) return false;",
                "    if (fragmentDensityInvocations && !_rhs.fragmentDensityInvocations) return false;",
                "    if (decorateString && !_rhs.decorateString) return false;",
                "    if (shaderImageInt64Atomics && !_rhs.shaderImageInt64Atomics) return false;",
                "    if (sparseImageInt64Atomics && !_rhs.sparseImageInt64Atomics) return false;",
                "    if (lineSubPixelPrecisionBits > _rhs.lineSubPixelPrecisionBits) return false;",
                "    if (shaderBufferFloat16Atomics && !_rhs.shaderBufferFloat16Atomics) return false;",
                "    if (shaderBufferFloat16AtomicAdd && !_rhs.shaderBufferFloat16AtomicAdd) return false;",
                "    if (shaderBufferFloat16AtomicMinMax && !_rhs.shaderBufferFloat16AtomicMinMax) return false;",
                "    if (shaderBufferFloat32AtomicMinMax && !_rhs.shaderBufferFloat32AtomicMinMax) return false;",
                "    if (shaderBufferFloat64AtomicMinMax && !_rhs.shaderBufferFloat64AtomicMinMax) return false;",
                "    if (shaderSharedFloat16Atomics && !_rhs.shaderSharedFloat16Atomics) return false;",
                "    if (shaderSharedFloat16AtomicAdd && !_rhs.shaderSharedFloat16AtomicAdd) return false;",
                "    if (shaderSharedFloat16AtomicMinMax && !_rhs.shaderSharedFloat16AtomicMinMax) return false;",
                "    if (shaderSharedFloat32AtomicMinMax && !_rhs.shaderSharedFloat32AtomicMinMax) return false;",
                "    if (shaderSharedFloat64AtomicMinMax && !_rhs.shaderSharedFloat64AtomicMinMax) return false;",
                "    if (shaderImageFloat32AtomicMinMax && !_rhs.shaderImageFloat32AtomicMinMax) return false;",
                "    if (sparseImageFloat32AtomicMinMax && !_rhs.sparseImageFloat32AtomicMinMax) return false;",
                "    if (deviceMemoryReport && !_rhs.deviceMemoryReport) return false;",
                "    if (shaderNonSemanticInfo && !_rhs.shaderNonSemanticInfo) return false;",
                "    if (shaderEarlyAndLateFragmentTests && !_rhs.shaderEarlyAndLateFragmentTests) return false;",
                "    if (fragmentShaderBarycentric && !_rhs.fragmentShaderBarycentric) return false;",
                "    if (shaderSubgroupUniformControlFlow && !_rhs.shaderSubgroupUniformControlFlow) return false;",
                "    if (subsampledLoads && !_rhs.subsampledLoads) return false;",
                "    if (subsampledCoarseReconstructionEarlyAccess && !_rhs.subsampledCoarseReconstructionEarlyAccess) return false;",
                "    if (maxSubsampledArrayLayers > _rhs.maxSubsampledArrayLayers) return false;",
                "    if (maxDescriptorSetSubsampledSamplers > _rhs.maxDescriptorSetSubsampledSamplers) return false;",
                "    if (workgroupMemoryExplicitLayout && !_rhs.workgroupMemoryExplicitLayout) return false;",
                "    if (workgroupMemoryExplicitLayoutScalarBlockLayout && !_rhs.workgroupMemoryExplicitLayoutScalarBlockLayout) return false;",
                "    if (workgroupMemoryExplicitLayout8BitAccess && !_rhs.workgroupMemoryExplicitLayout8BitAccess) return false;",
                "    if (workgroupMemoryExplicitLayout16BitAccess && !_rhs.workgroupMemoryExplicitLayout16BitAccess) return false;",
                "    if (colorWriteEnable && !_rhs.colorWriteEnable) return false;",
                "    if (!_rhs.cooperativeMatrixSupportedStages.hasFlags(cooperativeMatrixSupportedStages)) return false;",
                "    if (logicOp && !_rhs.logicOp) return false;",
                "    if (vertexPipelineStoresAndAtomics && !_rhs.vertexPipelineStoresAndAtomics) return false;",
                "    if (fragmentStoresAndAtomics && !_rhs.fragmentStoresAndAtomics) return false;",
                "    if (shaderTessellationAndGeometryPointSize && !_rhs.shaderTessellationAndGeometryPointSize) return false;",
                "    if (shaderStorageImageMultisample && !_rhs.shaderStorageImageMultisample) return false;",
                "    if (shaderStorageImageReadWithoutFormat && !_rhs.shaderStorageImageReadWithoutFormat) return false;",
                "    if (shaderStorageImageArrayDynamicIndexing && !_rhs.shaderStorageImageArrayDynamicIndexing) return false;",
                "    if (shaderFloat64 && !_rhs.shaderFloat64) return false;",
                "    if (variableMultisampleRate && !_rhs.variableMultisampleRate) return false;",
                "    if (storagePushConstant16 && !_rhs.storagePushConstant16) return false;",
                "    if (storageInputOutput16 && !_rhs.storageInputOutput16) return false;",
                "    if (multiviewGeometryShader && !_rhs.multiviewGeometryShader) return false;",
                "    if (multiviewTessellationShader && !_rhs.multiviewTessellationShader) return false;",
                "    if (drawIndirectCount && !_rhs.drawIndirectCount) return false;",
                "    if (storagePushConstant8 && !_rhs.storagePushConstant8) return false;",
                "    if (shaderBufferInt64Atomics && !_rhs.shaderBufferInt64Atomics) return false;",
                "    if (shaderSharedInt64Atomics && !_rhs.shaderSharedInt64Atomics) return false;",
                "    if (shaderFloat16 && !_rhs.shaderFloat16) return false;",
                "    if (shaderInputAttachmentArrayDynamicIndexing && !_rhs.shaderInputAttachmentArrayDynamicIndexing) return false;",
                "    if (shaderUniformBufferArrayNonUniformIndexing && !_rhs.shaderUniformBufferArrayNonUniformIndexing) return false;",
                "    if (shaderInputAttachmentArrayNonUniformIndexing && !_rhs.shaderInputAttachmentArrayNonUniformIndexing) return false;",
                "    if (descriptorBindingUniformBufferUpdateAfterBind && !_rhs.descriptorBindingUniformBufferUpdateAfterBind) return false;",
                "    if (samplerFilterMinmax && !_rhs.samplerFilterMinmax) return false;",
                "    if (vulkanMemoryModelAvailabilityVisibilityChains && !_rhs.vulkanMemoryModelAvailabilityVisibilityChains) return false;",
                "    if (shaderOutputViewportIndex && !_rhs.shaderOutputViewportIndex) return false;",
                "    if (shaderOutputLayer && !_rhs.shaderOutputLayer) return false;",
                "    if (shaderDemoteToHelperInvocation && !_rhs.shaderDemoteToHelperInvocation) return false;",
                "    if (shaderTerminateInvocation && !_rhs.shaderTerminateInvocation) return false;",
                "    if (shaderZeroInitializeWorkgroupMemory && !_rhs.shaderZeroInitializeWorkgroupMemory) return false;",
                "    // Nabla",
                "    if (computeUnits > _rhs.computeUnits) return false;",
                "    if (dispatchBase && !_rhs.dispatchBase) return false;",
                "    if (allowCommandBufferQueryCopies && !_rhs.allowCommandBufferQueryCopies) return false;",
                "    if (maxOptimallyResidentWorkgroupInvocations > _rhs.maxOptimallyResidentWorkgroupInvocations) return false;",
                "    if (maxResidentInvocations > _rhs.maxResidentInvocations) return false;",
                "    if (spirvVersion > _rhs.spirvVersion) return false;",
                "    return true;",
                "}"
            ]
        }
    ]
}