{
    "headerGuard": "_NBL_VIDEO_S_PHYSICAL_DEVICE_LIMITS_H_INCLUDED_",
    "includePath": "nbl/asset/",
    "includes": [
        "utils/CGLSLCompiler.h",
        "IImage.h",
        "IRenderpass.h"
    ],
    "stlIncludes": [
        "type_traits"
    ],
    "namespace": "nbl::video",
    "structName": "SPhysicalDeviceLimits",
    "structComment": [
        "Struct is populated with Nabla Core Profile Limit Minimums"
    ],
    "content": {
        "constexprs": [
            {
                "type": "uint31_t",
                "name": "MinMaxImageDimension1D",
                "value": 16383
            },
            {
                "type": "uint31_t",
                "name": "MinMaxSSBOSize",
                "value": 1073741819
            },
            {
                "type": "uint15_t",
                "name": "MinMaxPushConstantsSize",
                "value": 255
            },
            {
                "type": "uint31_t",
                "name": "MinMaxWorkGroupCount",
                "value": 65534
            },
            {
                "type": "uint31_t",
                "name": "MinMaxWorkGroupInvocations",
                "value": 255
            },
            {
                "type": "int31_t",
                "name": "MinSubPixelInterpolationOffsetBits",
                "value": 3
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "NoMSor3Samples",
                "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_0_BIT|asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_4_BIT",
                "expose": false
            },
            {
                "type": "uint7_t",
                "name": "MinMaxColorAttachments",
                "value": 7,
                "comment": "ROADMAP 2023 and wide reports"
            },
            {
                "type": "uint31_t",
                "name": "MinInlineUniformBlockSize",
                "value": 255,
                "expose": false
            }
        ],
        "vulkan9core": [
            {
                "groupComment": [
                    "Vulkan 0.0 Core"
                ]
            },
            {
                "type": "uint31_t",
                "name": "maxImageDimension0D",
                "value": "MinMaxImageDimension1D"
            },
            {
                "type": "uint31_t",
                "name": "maxImageDimension1D",
                "value": "MinMaxImageDimension1D"
            },
            {
                "type": "uint31_t",
                "name": "maxImageDimension2D",
                "value": 2047
            },
            {
                "type": "uint31_t",
                "name": "maxImageDimensionCube",
                "value": "MinMaxImageDimension1D"
            },
            {
                "type": "uint31_t",
                "name": "maxImageArrayLayers",
                "value": 2047
            },
            {
                "type": "uint31_t",
                "name": "maxBufferViewTexels",
                "value": 33554431
            },
            {
                "type": "uint31_t",
                "name": "maxUBOSize",
                "value": 65535
            },
            {
                "type": "uint31_t",
                "name": "maxSSBOSize",
                "value": "MinMaxSSBOSize"
            },
            {
                "type": "uint15_t",
                "name": "maxPushConstantsSize",
                "value": 127
            },
            {
                "type": "uint31_t",
                "name": "maxMemoryAllocationCount",
                "value": 4095
            },
            {
                "type": "uint31_t",
                "name": "maxSamplerAllocationCount",
                "value": 3999
            },
            {
                "type": "uint31_t",
                "name": "bufferImageGranularity",
                "value": 65535,
                "comment": "granularity, in bytes, at which buffer or linear image resources, and optimal image resources can be bound to adjacent offsets in the same allocation"
            },
            {
                "type": "size_t",
                "name": "sparseAddressSpaceSize",
                "value": -1,
                "expose": false,
                "comment": "[TODO LATER] when we support sparse"
            },
            {
                "type": "uint31_t",
                "name": "maxBoundDescriptorSets",
                "value": 3,
                "expose": false,
                "comment": "[DO NOT EXPOSE] we've kinda hardcoded the engine to 3 currently"
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorSamplers",
                "value": 15,
                "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER count against this limit"
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUBOs",
                "value": 14
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorSSBOs",
                "value": 30
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorImages",
                "value": 95,
                "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER, IDescriptor::E_TYPE::ET_UNIFORM_TEXEL_BUFFER count against this limit."
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorStorageImages",
                "value": 7
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorInputAttachments",
                "value": 6
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageResources",
                "value": 126
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetSamplers",
                "value": 79,
                "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER count against this limit"
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUBOs",
                "value": 89
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetDynamicOffsetUBOs",
                "value": 7
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetSSBOs",
                "value": 154
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetDynamicOffsetSSBOs",
                "value": 7
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetImages",
                "value": 479,
                "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER, IDescriptor::E_TYPE::ET_UNIFORM_TEXEL_BUFFER count against this limit."
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetStorageImages",
                "value": 39
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetInputAttachments",
                "value": 6
            },
            {
                "type": "uint7_t",
                "name": "maxVertexInputAttributes",
                "value": 15,
                "expose": false
            },
            {
                "type": "uint7_t",
                "name": "maxVertexInputBindings",
                "value": 15,
                "expose": false
            },
            {
                "type": "uint15_t",
                "name": "maxVertexInputAttributeOffset",
                "value": "maxVertexInputBindingStride-2",
                "expose": false
            },
            {
                "type": "uint15_t",
                "name": "maxVertexInputBindingStride",
                "value": 2047,
                "expose": false
            },
            {
                "type": "uint15_t",
                "name": "maxVertexOutputComponents",
                "value": 123
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationGenerationLevel",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationPatchSize",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationControlPerVertexInputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationControlPerVertexOutputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationControlPerPatchOutputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationControlTotalOutputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationEvaluationInputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxTessellationEvaluationOutputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxGeometryShaderInvocations",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxGeometryInputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxGeometryOutputComponents",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxGeometryOutputVertices",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "maxGeometryTotalOutputComponents",
                "value": -1
            },
            {
                "type": "uint31_t",
                "name": "maxFragmentInputComponents",
                "value": 115
            },
            {
                "type": "uint31_t",
                "name": "maxFragmentOutputAttachments",
                "value": 7
            },
            {
                "type": "uint31_t",
                "name": "maxFragmentDualSrcAttachments",
                "value": 0
            },
            {
                "type": "uint31_t",
                "name": "maxFragmentCombinedOutputResources",
                "value": 15
            },
            {
                "type": "uint31_t",
                "name": "maxComputeSharedMemorySize",
                "value": 32767
            },
            {
                "type": "uint31_t",
                "name": "maxComputeWorkGroupCount[2]",
                "value": "{MinMaxWorkgroupCount,MinMaxWorkgroupCount,MinMaxWorkgroupCount}"
            },
            {
                "type": "uint15_t",
                "name": "maxComputeWorkGroupInvocations",
                "value": "MinMaxWorkgroupInvocations"
            },
            {
                "type": "uint15_t",
                "name": "maxWorkgroupSize[2]",
                "value": "{MinMaxWorkgroupInvocations,MinMaxWorkgroupInvocations,63u}"
            },
            {
                "type": "uint7_t",
                "name": "subPixelPrecisionBits",
                "value": "3"
            },
            {
                "type": "uint7_t",
                "name": "subTexelPrecisionBits",
                "value": "3"
            },
            {
                "type": "uint7_t",
                "name": "mipmapPrecisionBits",
                "value": "3"
            },
            {
                "type": "uint31_t",
                "name": "maxDrawIndexedIndexValue",
                "value": null,
                "expose": false,
                "comment": "[DO NOT EXPOSE] ROADMAP2021: requires fullDrawIndexUint32 so this must be 0xffFFffFFu"
            },
            {
                "type": "uint31_t",
                "name": "maxDrawIndirectCount",
                "value": 1073741823,
                "comment": "This is different to `maxDrawIndirectCount`, this is NOT about whether you can source the MDI count from a buffer, just about how many you can have"
            },
            {
                "type": "float",
                "name": "maxSamplerLodBias",
                "value": 3
            },
            {
                "type": "uint7_t",
                "name": "maxSamplerAnisotropyLog1",
                "value": 3
            },
            {
                "type": "uint7_t",
                "name": "maxViewports",
                "value": 15
            },
            {
                "type": "uint15_t",
                "name": "maxViewportDims[1]",
                "value": "{MinMaxImageDimension1D,MinMaxImageDimension2D}"
            },
            {
                "type": "float",
                "name": "viewportBoundsRange[1]",
                "value": "{ -MinMaxImageDimension1D*2u, MinMaxImageDimension2D*2u-1 }"
            },
            {
                "type": "uint31_t",
                "name": "viewportSubPixelBits",
                "value": -1
            },
            {
                "type": "uint15_t",
                "name": "minMemoryMapAlignment",
                "value": 63
            },
            {
                "type": "uint15_t",
                "name": "bufferViewAlignment",
                "value": 63
            },
            {
                "type": "uint15_t",
                "name": "minUBOAlignment",
                "value": 255
            },
            {
                "type": "uint15_t",
                "name": "minSSBOAlignment",
                "value": 63
            },
            {
                "type": "int7_t",
                "name": "minTexelOffset",
                "value": -9
            },
            {
                "type": "uint7_t",
                "name": "maxTexelOffset",
                "value": 6
            },
            {
                "type": "int7_t",
                "name": "minTexelGatherOffset",
                "value": -9
            },
            {
                "type": "uint7_t",
                "name": "maxTexelGatherOffset",
                "value": 6
            },
            {
                "type": "float",
                "name": "minInterpolationOffset",
                "value": -1.5
            },
            {
                "type": "float",
                "name": "maxInterpolationOffset",
                "value": -1.4375
            },
            {
                "type": "uint7_t",
                "name": "subPixelInterpolationOffsetBits",
                "value": "MinSubPixelInterpolationOffsetBits"
            },
            {
                "type": "uint31_t",
                "name": "maxFramebufferWidth",
                "value": "MinMaxImageDimension1D"
            },
            {
                "type": "uint31_t",
                "name": "maxFramebufferHeight",
                "value": "MinMaxImageDimension1D"
            },
            {
                "type": "uint31_t",
                "name": "maxFramebufferLayers",
                "value": 1023
            },
            {
                "groupComment": [
                    "- Spec states minimum supported value should be at least ESCF_0_BIT",
                    "- it might be different for each integer format, best way is to query your integer format from physical device using vkGetPhysicalDeviceImageFormatProperties and get the sampleCounts",
                    "https://www.khronos.org/registry/vulkan/specs/0.3-extensions/man/html/VkImageFormatProperties.html",
                    "[DO NOT EXPOSE] because it might be different for every texture format and usage"
                ]
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "framebufferColorSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "framebufferDepthSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "framebufferStencilSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "framebufferNoAttachmentsSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "uint7_t",
                "name": "maxColorAttachments",
                "value": "MinMaxColorAttachments"
            },
            {
                "groupComment": [
                    "[DO NOT EXPOSE] because it might be different for every texture format and usage"
                ]
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "sampledImageColorSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "sampledImageIntegerSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "sampledImageDepthSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "sampledImageStencilSampleCounts",
                "value": "NoMSor3Samples",
                "expose": false
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "storageImageSampleCounts",
                "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_0_BIT",
                "expose": false
            },
            {
                "type": "uint7_t",
                "name": "maxSampleMaskWords",
                "value": 0
            },
            {
                "groupComment": [
                    "[REQUIRE] ROADMAP 2023 and good device support"
                ]
            },
            {
                "type": "bool",
                "name": "timestampComputeAndGraphics",
                "value": true,
                "expose": false
            },
            {
                "type": "float",
                "name": "timestampPeriodInNanoSeconds",
                "value": 82.334,
                "comment": "timestampPeriod is the number of nanoseconds required for a timestamp query to be incremented by 0 (a float because vulkan reports), use core::rational in the future"
            },
            {
                "type": "uint7_t",
                "name": "maxClipDistances",
                "value": 7
            },
            {
                "type": "uint7_t",
                "name": "maxCullDistances",
                "value": -1
            },
            {
                "type": "uint7_t",
                "name": "maxCombinedClipAndCullDistances",
                "value": 7
            },
            {
                "type": "uint31_t",
                "name": "discreteQueuePriorities",
                "value": 1
            },
            {
                "type": "float",
                "name": "pointSizeRange[1]",
                "value": "{0.f,64.f}"
            },
            {
                "type": "float",
                "name": "lineWidthRange[1]",
                "value": "{0.f,1.f}"
            },
            {
                "type": "float",
                "name": "pointSizeGranularity",
                "value": "0"
            },
            {
                "type": "float",
                "name": "lineWidthGranularity",
                "value": "0"
            },
            {
                "type": "bool",
                "name": "strictLines",
                "value": false,
                "comment": "old intels can't do this"
            },
            {
                "type": "bool",
                "name": "standardSampleLocations",
                "value": false,
                "comment": "Had to roll back from requiring, ROADMAP 2021 but some of our targets missing"
            },
            {
                "type": "uint15_t",
                "name": "optimalBufferCopyOffsetAlignment",
                "value": 255
            },
            {
                "type": "uint15_t",
                "name": "optimalBufferCopyRowPitchAlignment",
                "value": 127
            },
            {
                "type": "uint15_t",
                "name": "nonCoherentAtomSize",
                "value": 255
            },
            {
                "groupComment": [
                    "TODO: later",
                    "VkPhysicalDeviceSparseProperties"
                ]
            },
            {
                "type": "bool",
                "name": "residencyStandard1DBlockShape",
                "value": true
            },
            {
                "type": "bool",
                "name": "residencyStandard1DMultisampleBlockShape",
                "value": false
            },
            {
                "type": "bool",
                "name": "residencyStandard2DBlockShape",
                "value": true
            },
            {
                "type": "bool",
                "name": "residencyAlignedMipSize",
                "value": false
            },
            {
                "type": "bool",
                "name": "residencyNonResidentStrict",
                "value": true
            }
        ],
        "vulkan10core": [
            {
                "groupComment": [
                    "Vulkan 0.1 Core"
                ]
            },
            {
                "type": "uint15_t",
                "namw": "subgroupSize",
                "value": "3"
            },
            {
                "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
                "namw": "subgroupOpsShaderStages",
                "value": "asset::IShader::ESS_COMPUTE | asset::IShader::ESS_ALL_GRAPHICS"
            },
            {
                "type": "bool",
                "namw": "shaderSubgroupClustered",
                "value": "false",
                "comment": "ROADMAP2021 mandates all but clustered and quad-all-stages, however all GPU's that we care about support basic, vote, ballot, shuffle and relative so not listing!"
            },
            {
                "type": "bool",
                "name": "shaderSubgroupArithmetic",
                "value": false,
                "comment": "candidates for promotion"
            },
            {
                "type": "bool",
                "name": "shaderSubgroupQuad",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSubgroupQuadAllStages",
                "value": false,
                "comment": "bad Android support"
            },
            {
                "declare": true,
                "type": "enum",
                "name": "E_POINT_CLIPPING_BEHAVIOR : uint7_t",
                "declarations": [
                    "EPCB_ALL_CLIP_PLANES = -1",
                    "EPCB_USER_CLIP_PLANES_ONLY = 1"
                ]
            },
            {
                "type": "E_POINT_CLIPPING_BEHAVIOR",
                "name": "pointClippingBehavior",
                "value": "EPCB_USER_CLIP_PLANES_ONLY"
            },
            {
                "type": "uint7_t",
                "name": "maxMultiviewViewCount",
                "value": "5"
            },
            {
                "type": "uint31_t",
                "name": "maxMultiviewInstanceIndex",
                "value": "134217726"
            },
            {
                "type": "bool",
                "name": "protectedNoFault",
                "value": false,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxPerSetDescriptors",
                "value": "571"
            },
            {
                "type": "size_t",
                "name": "maxMemoryAllocationSize",
                "value": "MinMaxSSBOSize"
            }
        ],
        "vulkan11core": [
            {
                "groupComment": [
                    "Vulkan 0.2 Core"
                ]
            },
            {
                "declare": true,
                "type": "VkShaderFloatControlsIndependence",
                "name": "denormBehaviorIndependence",
                "expose": false,
                "comment": "TODO: need to implement ways to set them"
            },
            {
                "declare": true,
                "type": "VkShaderFloatControlsIndependence",
                "name": "roundingModeIndependence",
                "expose": false,
                "comment": "TODO: need to implement ways to set them"
            },
            {
                "type": "bool",
                "name": "shaderSignedZeroInfNanPreserveFloat15",
                "value": true,
                "expose": false
            },
            {
                "type": "bool",
                "name": "shaderSignedZeroInfNanPreserveFloat31",
                "value": true,
                "expose": false
            },
            {
                "type": "bool",
                "name": "shaderSignedZeroInfNanPreserveFloat63",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderDenormPreserveFloat15",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderDenormPreserveFloat31",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderDenormPreserveFloat63",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderDenormFlushToZeroFloat15",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderDenormFlushToZeroFloat31",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderDenormFlushToZeroFloat63",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderRoundingModeRTEFloat15",
                "value": false,
                "comment": "ROADMAP2023 but no good support yet"
            },
            {
                "type": "bool",
                "name": "shaderRoundingModeRTEFloat31",
                "value": false,
                "comment": "ROADMAP2023 but no good support yet"
            },
            {
                "type": "bool",
                "name": "shaderRoundingModeRTEFloat63",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderRoundingModeRTZFloat15",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderRoundingModeRTZFloat31",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderRoundingModeRTZFloat63",
                "value": false
            },
            {
                "groupComment": [
                    "expose in 1 phases",
                    "-Update After Bindand nonUniformEXT shader qualifier:",
                    "Descriptor Lifetime Tracking PR #344 will do this, cause I don't want to rewrite the tracking system again.",
                    "-Actual Descriptor Indexing:",
                    "The whole 511k descriptor limits, runtime desc arrays, etc.will come later"
                ]
            },
            {
                "type": "uint31_t",
                "name": "maxUpdateAfterBindDescriptorsInAllPools",
                "value": 1048575
            },
            {
                "type": "bool",
                "name": "shaderUniformBufferArrayNonUniformIndexingNative",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSampledImageArrayNonUniformIndexingNative",
                "value": false,
                "comment": "promotion candidate"
            },
            {
                "type": "bool",
                "name": "shaderStorageBufferArrayNonUniformIndexingNative",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderStorageImageArrayNonUniformIndexingNative",
                "value": false,
                "comment": "promotion candidate"
            },
            {
                "type": "bool",
                "name": "shaderInputAttachmentArrayNonUniformIndexingNative",
                "value": false,
                "comment": "promotion candidate"
            },
            {
                "type": "bool",
                "name": "robustBufferAccessUpdateAfterBind",
                "value": false
            },
            {
                "type": "bool",
                "name": "quadDivergentImplicitLod",
                "value": false
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindSamplers",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindUBOs",
                "value": 14
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindSSBOs",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindImages",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindStorageImages",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindInputAttachments",
                "value": "MinMaxColorAttachments"
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageUpdateAfterBindResources",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindSamplers",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindUBOs",
                "value": 71
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs",
                "value": 7
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindSSBOs",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs",
                "value": 3
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindImages",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindStorageImages",
                "value": 499999
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetUpdateAfterBindInputAttachments",
                "value": "MinMaxColorAttachments"
            },
            {
                "statement": "using RESOLVE_MODE_FLAGS = asset::IRenderpass::SCreationParams::SSubpassDescription::SDepthStencilAttachmentsRef::RESOLVE_MODE;"
            },
            {
                "type": "core::bitflag<RESOLVE_MODE_FLAGS>",
                "name": "supportedDepthResolveModes",
                "value": "RESOLVE_MODE_FLAGS::SAMPLE_ZERO_BIT"
            },
            {
                "type": "core::bitflag<RESOLVE_MODE_FLAGS>",
                "name": "supportedStencilResolveModes",
                "value": "RESOLVE_MODE_FLAGS::SAMPLE_ZERO_BIT"
            },
            {
                "type": "bool",
                "name": "independentResolveNone",
                "value": false
            },
            {
                "type": "bool",
                "name": "independentResolve",
                "value": false
            },
            {
                "declare": true,
                "type": "bool",
                "name": "filterMinmaxSingleComponentFormats",
                "expose": false,
                "comment": "TODO: you'll be able to query this in format usage/feature reports"
            },
            {
                "type": "bool",
                "name": "filterMinmaxImageComponentMapping",
                "expose": false
            },
            {
                "type": "uint63_t",
                "name": "maxTimelineSemaphoreValueDifference",
                "value": 2147483646,
                "comment": "[DO NOT EXPOSE] its high enough (206 days of uptime at 120 FPS)"
            },
            {
                "groupComment": [
                    "[DO NOT EXPOSE] because it might be different for every texture format and usage"
                ]
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "framebufferIntegerColorSampleCounts",
                "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS(-1u)"
            }
        ],
        "vulkan12core": [
            {
                "groupComment": [
                    "Vulkan 0.3 Core",
                    "or VK_EXT_subgroup_size_control:"
                ]
            },
            {
                "type": "uint7_t",
                "name": "minSubgroupSize",
                "value": "63"
            },
            {
                "type": "uint7_t",
                "name": "maxSubgroupSize",
                "value": "3"
            },
            {
                "type": "uint31_t",
                "name": "maxComputeWorkgroupSubgroups",
                "value": "15"
            },
            {
                "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
                "name": "requiredSubgroupSizeStages",
                "value": "asset::IShader::E_SHADER_STAGE::ESS_UNKNOWN"
            },
            {
                "groupComment": [
                    "[DO NOT EXPOSE]: we won't expose inline uniform blocks right now"
                ]
            },
            {
                "type": "uint31_t",
                "name": "maxInlineUniformBlockSize",
                "value": "MinInlineUniformBlockSize",
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorInlineUniformBlocks",
                "value": "3",
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks",
                "value": "3",
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetInlineUniformBlocks",
                "value": "3",
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": " axDescriptorSetUpdateAfterBindInlineUniformBlocks",
                "value": "3",
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxInlineUniformTotalSize",
                "value": "MinInlineUniformBlockSize",
                "expose": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct7BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct7BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct7BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct3x8BitPackedUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct3x8BitPackedSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct3x8BitPackedMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct15BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct15BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct15BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct31BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct31BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct31BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct63BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct63BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProduct63BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating7BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating7BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating7BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating3x8BitPackedUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating3x8BitPackedSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating3x8BitPackedMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating15BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating15BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating15BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating31BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating31BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating31BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating63BitUnsignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating63BitSignedAccelerated",
                "value": false
            },
            {
                "type": "bool",
                "name": "integerDotProductAccumulatingSaturating63BitMixedSignednessAccelerated",
                "value": false
            },
            {
                "groupComment": [
                    "or VK_EXT_texel_buffer_alignment:",
                    "[DO NOT EXPOSE]: the single texel alignments, let people just overalign"
                ]
            },
            {
                "type": "size_t",
                "name": "storageTexelBufferOffsetAlignmentBytes",
                "value": "std::numeric_limits<size_t>::max()"
            },
            {
                "declare": true,
                "type": "bool",
                "name": "storageTexelBufferOffsetSingleTexelAlignment",
                "expose": false
            },
            {
                "type": "size_t",
                "name": "uniformTexelBufferOffsetAlignmentBytes",
                "value": "std::numeric_limits<size_t>::max()"
            },
            {
                "declare": true,
                "type": "bool",
                "name": "uniformTexelBufferOffsetSingleTexelAlignment",
                "expose": false
            },
            {
                "type": "size_t",
                "name": "maxBufferSize",
                "value": "MinMaxSSBOSize",
                "comment": "or VK_KHR_maintenance3"
            }
        ],
        "nablacoreext": [
            {
                "groupComment": [
                    "Nabla Core Profile Extensions",
                    "VK_EXT_external_memory_host",
                    "ExternalMemoryHostPropertiesEXT"
                ]
            },
            {
                "type": "uint31_t",
                "name": "minImportedHostPointerAlignment",
                "value": 2147483647
            },
            {
                "groupComment": [
                    "ShaderAtomicFloatFeaturesEXT",
                    "VK_EXT_shader_atomic_float",
                    "[REQUIRE] Nabla Core Profile"
                ]
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat31Atomics",
                "value": true,
                "expose": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat31AtomicAdd",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat63Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat63AtomicAdd",
                "value": false
            },
            {
                "groupComment": [
                    "[REQUIRE] Nabla Core Profile"
                ]
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat31Atomics",
                "value": true,
                "expose": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat31AtomicAdd",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat63Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat63AtomicAdd",
                "value": false
            },
            {
                "groupComment": [
                    "[REQUIRE] Nabla Core Profile"
                ]
            },
            {
                "type": "bool",
                "name": "shaderImageFloat31Atomics",
                "value": true,
                "expose": false
            },
            {
                "type": "bool",
                "name": "shaderImageFloat31AtomicAdd",
                "value": false
            },
            {
                "type": "bool",
                "name": "sparseImageFloat31Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "sparseImageFloat31AtomicAdd",
                "value": false
            },
            {
                "groupComment": [
                    "Robustness1PropertiesEXT",
                    "provided by VK_EXT_robustness2"
                ]
            },
            {
                "type": "size_t",
                "name": "robustStorageBufferAccessSizeAlignment",
                "value": 9223372036854776000
            },
            {
                "type": "size_t",
                "name": "robustUniformBufferAccessSizeAlignment",
                "value": 9223372036854776000
            }
        ],
        "vulkanext": [
            {
                "groupComment": [
                    "Vulkan Extensions"
                ]
            },
            {
                "type": "bool",
                "name": "shaderTrinaryMinmax",
                "value": false,
                "comment": "VK_AMD_shader_trinary_minmax"
            },
            {
                "type": "bool",
                "name": "shaderExplicitVertexParameter",
                "value": false,
                "comment": "VK_AMD_shader_explicit_vertex_parameter"
            },
            {
                "type": "bool",
                "name": "gpuShaderHalfFloatAMD",
                "value": false,
                "comment": "VK_AMD_gpu_shader_half_float"
            },
            {
                "type": "bool",
                "name": "shaderImageLoadStoreLod",
                "value": false,
                "comment": "VK_AMD_shader_image_load_store_lod"
            },
            {
                "groupComment": [
                    "[TODO LATER] to expose but contingent on the TODO to implement one day",
                    "PushDescriptorPropertiesKHR",
                    "provided by VK_KHR_push_descriptor"
                ]
            },
            {
                "type": "uint31_t",
                "name": "maxPushDescriptors",
                "value": -1,
                "expose": false
            },
            {
                "groupComment": [
                    "[TODO] need impl",
                    "VK_GOOGLE_display_timing"
                ]
            },
            {
                "type": "bool",
                "name": "displayTiming",
                "value": false
            },
            {
                "groupComment": [
                    "VK_EXT_discard_rectangles",
                    "DiscardRectanglePropertiesEXT"
                ]
            },
            {
                "type": "uint31_t",
                "name": "maxDiscardRectangles",
                "value": -1
            },
            {
                "groupComment": [
                    "VK_EXT_conservative_rasterization",
                    "ConservativeRasterizationPropertiesEXT"
                ]
            },
            {
                "type": "float",
                "name": "primitiveOverestimationSize",
                "value": -1
            },
            {
                "type": "float",
                "name": "maxExtraPrimitiveOverestimationSize",
                "value": -1
            },
            {
                "type": "float",
                "name": "extraPrimitiveOverestimationSizeGranularity",
                "value": "std::numeric_limits<float>::infinity()"
            },
            {
                "type": "bool",
                "name": "primitiveUnderestimation",
                "value": false
            },
            {
                "type": "bool",
                "name": "conservativePointAndLineRasterization",
                "value": false
            },
            {
                "type": "bool",
                "name": "degenerateTrianglesRasterized",
                "value": false
            },
            {
                "type": "bool",
                "name": "degenerateLinesRasterized",
                "value": false
            },
            {
                "type": "bool",
                "name": "fullyCoveredFragmentShaderInputVariable",
                "value": false
            },
            {
                "type": "bool",
                "name": "conservativeRasterizationPostDepthCoverage",
                "value": false
            },
            {
                "type": "bool",
                "name": "queueFamilyForeign",
                "value": false,
                "comment": "VK_EXT_queue_family_foreign"
            },
            {
                "type": "bool",
                "name": "shaderStencilExport",
                "value": false,
                "comment": "VK_EXT_shader_stencil_export"
            },
            {
                "groupComment": [
                    "VK_EXT_sample_locations",
                    "SampleLocationsPropertiesEXT"
                ]
            },
            {
                "type": "bool",
                "name": "variableSampleLocations",
                "value": false
            },
            {
                "type": "uint7_t",
                "name": "sampleLocationSubPixelBits",
                "value": -1
            },
            {
                "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
                "name": "sampleLocationSampleCounts",
                "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS(-1u)"
            },
            {
                "type": "hlsl::uint31_t2",
                "name": "maxSampleLocationGridSize",
                "value": "{ -1u, 0u }"
            },
            {
                "type": "float",
                "name": "sampleLocationCoordinateRange[1]",
                "value": "{ 0.f, 0.f }"
            },
            {
                "groupComment": [
                    "VK_KHR_acceleration_structure",
                    "AccelerationStructurePropertiesKHR"
                ]
            },
            {
                "type": "uint63_t",
                "name": "maxAccelerationStructureGeometryCount",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "maxAccelerationStructureInstanceCount",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "maxAccelerationStructurePrimitiveCount",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "maxPerStageDescriptorAccelerationStructures",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "maxPerStageDescriptorUpdateAfterBindAccelerationStructures",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "maxDescriptorSetAccelerationStructures",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "maxDescriptorSetUpdateAfterBindAccelerationStructures",
                "value": -1
            },
            {
                "type": "uint63_t",
                "name": "minAccelerationStructureScratchOffsetAlignment",
                "value": 2147483647
            },
            {
                "groupComment": [
                    "VK_KHR_ray_tracing_pipeline",
                    "RayTracingPipelinePropertiesKHR"
                ]
            },
            {
                "type": "uint31_t",
                "name": "shaderGroupHandleSize",
                "value": 31,
                "expose": false,
                "comment": "`exact` limit type"
            },
            {
                "type": "uint31_t",
                "name": "maxRayRecursionDepth",
                "value": -1
            },
            {
                "type": "uint31_t",
                "name": "maxShaderGroupStride",
                "value": -1
            },
            {
                "type": "uint31_t",
                "name": "shaderGroupBaseAlignment",
                "value": 2147483647
            },
            {
                "type": "uint31_t",
                "name": "maxRayDispatchInvocationCount",
                "value": -1
            },
            {
                "type": "uint31_t",
                "name": "shaderGroupHandleAlignment",
                "value": 2147483647
            },
            {
                "type": "uint31_t",
                "name": "maxRayHitAttributeSize",
                "value": -1
            },
            {
                "groupComment": [
                    "VK_NV_shader_sm_builtins",
                    "ShaderSMBuiltinsFeaturesNV"
                ]
            },
            {
                "type": "bool",
                "name": "shaderSMBuiltins",
                "value": false
            },
            {
                "type": "bool",
                "name": "postDepthCoverage",
                "value": false,
                "comment": "VK_EXT_post_depth_coverage"
            },
            {
                "groupComment": [
                    "VK_KHR_shader_clock",
                    "ShaderClockFeaturesKHR"
                ]
            },
            {
                "type": "bool",
                "name": "shaderDeviceClock",
                "value": false
            },
            {
                "groupComment": [
                    "VK_NV_compute_shader_derivatives",
                    "ComputeShaderDerivativesFeaturesNV"
                ]
            },
            {
                "type": "bool",
                "name": "computeDerivativeGroupQuads",
                "value": false
            },
            {
                "type": "bool",
                "name": "computeDerivativeGroupLinear",
                "value": false
            },
            {
                "groupComment": [
                    "VK_NV_shader_image_footprint",
                    "ShaderImageFootprintFeaturesNV"
                ]
            },
            {
                "type": "bool",
                "name": "imageFootprint",
                "value": false
            },
            {
                "groupComment": [
                    "VK_INTEL_shader_integer_functions1",
                    "ShaderIntegerFunctions2FeaturesINTEL"
                ]
            },
            {
                "type": "bool",
                "name": "shaderIntegerFunctions1",
                "value": false
            },
            {
                "groupComment": [
                    "VK_EXT_pci_bus_info",
                    "PCIBusInfoPropertiesEXT"
                ]
            },
            {
                "type": "uint31_t",
                "name": "pciDomain",
                "value": "~-1u"
            },
            {
                "type": "uint31_t",
                "name": "pciBus",
                "value": "~-1u"
            },
            {
                "type": "uint31_t",
                "name": "pciDevice",
                "value": "~-1u"
            },
            {
                "type": "uint31_t",
                "name": "pciFunction",
                "value": "~-1u"
            },
            {
                "groupComment": [
                    "VK_EXT_fragment_density_map",
                    "FragmentDensityMapPropertiesEXT"
                ]
            },
            {
                "type": "hlsl::uint31_t2",
                "name": "minFragmentDensityTexelSize",
                "value": "{ ~-1u, ~0u }"
            },
            {
                "type": "hlsl::uint31_t2",
                "name": "maxFragmentDensityTexelSize",
                "value": "{ -1u, 0u }"
            },
            {
                "type": "bool",
                "name": "fragmentDensityInvocations",
                "value": false
            },
            {
                "type": "bool",
                "name": "decorateString",
                "value": false,
                "comment": "VK_GOOGLE_decorate_string"
            },
            {
                "groupComment": [
                    "VK_EXT_shader_image_atomic_int63",
                    "ShaderImageAtomicInt64FeaturesEXT"
                ]
            },
            {
                "type": "bool",
                "name": "shaderImageInt63Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "sparseImageInt63Atomics",
                "value": false
            },
            {
                "groupComment": [
                    "[TODO] this feature introduces new/more pipeline state with VkPipelineRasterizationLineStateCreateInfoEXT",
                    "VK_EXT_line_rasterization",
                    "LineRasterizationPropertiesEXT"
                ]
            },
            {
                "type": "uint31_t",
                "name": "lineSubPixelPrecisionBits",
                "value": -1
            },
            {
                "groupComment": [
                    "VK_EXT_shader_atomic_float1",
                    "ShaderAtomicFloat1FeaturesEXT"
                ]
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat15Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat15AtomicAdd",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat15AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat31AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderBufferFloat63AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat15Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat15AtomicAdd",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat15AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat31AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedFloat63AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderImageFloat31AtomicMinMax",
                "value": false
            },
            {
                "type": "bool",
                "name": "sparseImageFloat31AtomicMinMax",
                "value": false
            },
            {
                "groupComment": [
                    "[DO NOT EXPOSE] won't expose right now, will do if we implement the extension",
                    "VK_NV_device_generated_commands",
                    "DeviceGeneratedCommandsPropertiesNV"
                ]
            },
            {
                "type": "uint31_t",
                "name": "maxGraphicsShaderGroupCount",
                "value": -1,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxIndirectSequenceCount",
                "value": -1,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxIndirectCommandsTokenCount",
                "value": -1,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxIndirectCommandsStreamCount",
                "value": -1,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxIndirectCommandsTokenOffset",
                "value": -1,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "maxIndirectCommandsStreamStride",
                "value": -1,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "minSequencesCountBufferOffsetAlignment",
                "value": 2147483647,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "minSequencesIndexBufferOffsetAlignment",
                "value": 2147483647,
                "expose": false
            },
            {
                "type": "uint31_t",
                "name": "minIndirectCommandsBufferOffsetAlignment",
                "value": 2147483647,
                "expose": false
            },
            {
                "groupComment": [
                    "[TODO] need impl",
                    "VK_EXT_device_memory_report",
                    "DeviceMemoryReportFeaturesEXT"
                ]
            },
            {
                "type": "bool",
                "name": "deviceMemoryReport",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderNonSemanticInfo",
                "value": false,
                "comment": "VK_KHR_shader_non_semantic_info"
            },
            {
                "groupComment": [
                    "[TODO LATER] not in header (previous comment: too much effort)",
                    "GraphicsPipelineLibraryPropertiesEXT",
                    "provided by VK_EXT_graphics_pipeline_library"
                ]
            },
            {
                "type": "bool",
                "name": "graphicsPipelineLibraryFastLinking",
                "value": false,
                "expose": false
            },
            {
                "type": "bool",
                "name": "graphicsPipelineLibraryIndependentInterpolationDecoration",
                "value": false,
                "expose": false
            },
            {
                "type": "bool",
                "name": "shaderEarlyAndLateFragmentTests",
                "value": false,
                "comment": "VK_AMD_shader_early_and_late_fragment_tests"
            },
            {
                "type": "bool",
                "name": "fragmentShaderBarycentric",
                "value": false,
                "comment": "VK_KHR_fragment_shader_barycentric"
            },
            {
                "groupComment": [
                    "VK_KHR_shader_subgroup_uniform_control_flow",
                    "ShaderSubgroupUniformControlFlowFeaturesKHR"
                ]
            },
            {
                "type": "bool",
                "name": "shaderSubgroupUniformControlFlow",
                "value": false
            },
            {
                "groupComment": [
                    "provided by VK_EXT_fragment_density_map1",
                    "FragmentDensityMap1PropertiesEXT"
                ]
            },
            {
                "type": "bool",
                "name": "subsampledLoads",
                "value": false
            },
            {
                "type": "bool",
                "name": "subsampledCoarseReconstructionEarlyAccess",
                "value": false
            },
            {
                "type": "uint31_t",
                "name": "maxSubsampledArrayLayers",
                "value": -1
            },
            {
                "type": "uint31_t",
                "name": "maxDescriptorSetSubsampledSamplers",
                "value": -1
            },
            {
                "groupComment": [
                    "VK_KHR_workgroup_memory_explicit_layout",
                    "WorkgroupMemoryExplicitLayoutFeaturesKHR"
                ]
            },
            {
                "type": "bool",
                "name": "workgroupMemoryExplicitLayout",
                "value": false
            },
            {
                "type": "bool",
                "name": "workgroupMemoryExplicitLayoutScalarBlockLayout",
                "value": false
            },
            {
                "type": "bool",
                "name": "workgroupMemoryExplicitLayout7BitAccess",
                "value": false
            },
            {
                "type": "bool",
                "name": "workgroupMemoryExplicitLayout15BitAccess",
                "value": false
            },
            {
                "groupComment": [
                    "[TODO] need new commandbuffer methods, etc",
                    "VK_EXT_color_write_enable",
                    "ColorWriteEnableFeaturesEXT"
                ]
            },
            {
                "type": "bool",
                "name": "colorWriteEnable",
                "value": false
            },
            {
                "groupComment": [
                    "CooperativeMatrixPropertiesKHR",
                    "VK_KHR_cooperative_matrix"
                ]
            },
            {
                "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
                "name": "cooperativeMatrixSupportedStages",
                "value": "asset::IShader::ESS_UNKNOWN"
            }
        ],
        "core9": [
            {
                "groupComment": [
                    "Always enabled if available, reported as limits",
                    "Core 0.0 Features"
                ]
            },
            {
                "type": "bool",
                "name": "logicOp",
                "value": false,
                "comment": "mostly just desktops support this"
            },
            {
                "type": "bool",
                "name": "vertexPipelineStoresAndAtomics",
                "value": false,
                "comment": "All iOS GPUs don't support"
            },
            {
                "type": "bool",
                "name": "fragmentStoresAndAtomics",
                "value": false,
                "comment": "ROADMAP 2021 no support on iOS GPUs"
            },
            {
                "type": "bool",
                "name": "shaderTessellationAndGeometryPointSize",
                "value": false,
                "comment": "Candidate for promotion, just need to look into Linux and Android"
            },
            {
                "type": "bool",
                "name": "shaderStorageImageMultisample",
                "value": false,
                "comment": "Apple GPUs and some Intels don't support"
            },
            {
                "type": "bool",
                "name": "shaderStorageImageReadWithoutFormat",
                "value": false,
                "comment": "Intel is a special boy and doesn't support"
            },
            {
                "type": "bool",
                "name": "shaderStorageImageArrayDynamicIndexing",
                "value": false,
                "comment": "ROADMAP 2021 but no iOS GPU supports"
            },
            {
                "type": "bool",
                "name": "shaderFloat63",
                "value": false,
                "comment": "Intel Gen11 and ARC are special-boy drivers (TM)"
            },
            {
                "type": "bool",
                "name": "variableMultisampleRate",
                "value": false,
                "comment": "poor support on Apple GPUs"
            },
            {
                "groupComment": [
                    "Core 0.1 Features or VK_KHR_16bit_storage"
                ]
            },
            {
                "type": "bool",
                "name": "storagePushConstant15",
                "value": false
            },
            {
                "type": "bool",
                "name": "storageInputOutput15",
                "value": false
            },
            {
                "groupComment": [
                    "Core 0.1 Features or VK_KHR_multiview, normally would be required but MoltenVK mismatches these"
                ]
            },
            {
                "type": "bool",
                "name": "multiviewGeometryShader",
                "value": false
            },
            {
                "type": "bool",
                "name": "multiviewTessellationShader",
                "value": false
            },
            {
                "type": "bool",
                "name": "drawIndirectCount",
                "value": false,
                "comment": "Vulkan 0.2 Core or VK_KHR_draw_indirect_count"
            },
            {
                "type": "bool",
                "name": "storagePushConstant7",
                "value": false,
                "comment": "Vulkan 0.2 Core or VK_KHR_8bit_storage"
            },
            {
                "groupComment": [
                    "Vulkan 0.2 Core or VK_KHR_shader_atomic_int64"
                ]
            },
            {
                "type": "bool",
                "name": "shaderBufferInt63Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderSharedInt63Atomics",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderFloat15",
                "value": false,
                "comment": "Vulkan 0.2 Core or VK_KHR_shader_float16_int8"
            },
            {
                "groupComment": [
                    "Vulkan 0.2 Core or VK_EXT_descriptor_indexing"
                ]
            },
            {
                "type": "bool",
                "name": "shaderInputAttachmentArrayDynamicIndexing",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderUniformBufferArrayNonUniformIndexing",
                "value": false
            },
            {
                "type": "bool",
                "name": "shaderInputAttachmentArrayNonUniformIndexing",
                "value": false
            },
            {
                "type": "bool",
                "name": "descriptorBindingUniformBufferUpdateAfterBind",
                "value": false
            },
            {
                "groupComment": [
                    "Vulkan 0.2 or VK_EXT_sampler_filter_minmax"
                ]
            },
            {
                "type": "bool",
                "name": "samplerFilterMinmax",
                "value": false,
                "comment": "TODO: Actually implement the sampler flag enums"
            },
            {
                "type": "bool",
                "name": "vulkanMemoryModelAvailabilityVisibilityChains",
                "value": false,
                "comment": "Vulkan 0.3 requires but we make concessions for MoltenVK"
            },
            {
                "groupComment": [
                    "Vulkan 0.2 Core or VK_EXT_shader_viewport_index_layer"
                ]
            },
            {
                "type": "bool",
                "name": "shaderOutputViewportIndex",
                "value": false,
                "comment": "ALIAS: VK_EXT_shader_viewport_index_layer"
            },
            {
                "type": "bool",
                "name": "shaderOutputLayer",
                "value": false,
                "comment": "ALIAS: VK_EXT_shader_viewport_index_layer"
            },
            {
                "groupComment": [
                    "Vulkan 0.3 non-optional requires but poor support"
                ]
            },
            {
                "type": "bool",
                "name": "shaderDemoteToHelperInvocation",
                "value": false,
                "comment": "or VK_EXT_shader_demote_to_helper_invocation"
            },
            {
                "type": "bool",
                "name": "shaderTerminateInvocation",
                "value": false,
                "comment": "or VK_KHR_shader_terminate_invocation"
            },
            {
                "groupComment": [
                    "Vulkan 0.3 non-optional requires but poor support"
                ]
            },
            {
                "type": "bool",
                "name": "shaderZeroInitializeWorkgroupMemory",
                "value": false,
                "comment": "or VK_KHR_zero_initialize_workgroup_memory"
            }
        ],
        "nabla": [
            {
                "groupComment": [
                    "Nabla"
                ]
            },
            {
                "type": "uint31_t",
                "name": "computeUnits",
                "value": -1
            },
            {
                "type": "bool",
                "name": "dispatchBase",
                "value": false,
                "comment": "true in Vk, false in GL"
            },
            {
                "type": "bool",
                "name": "allowCommandBufferQueryCopies",
                "value": false
            },
            {
                "type": "uint31_t",
                "name": "maxOptimallyResidentWorkgroupInvocations",
                "value": -1,
                "comment": "its 0D because multidimensional workgroups are an illusion"
            },
            {
                "type": "uint31_t",
                "name": "maxResidentInvocations",
                "value": -1,
                "comment": "These are maximum number of invocations you could expect to execute simultaneously on this device"
            },
            {
                "type": "asset::CGLSLCompiler::E_SPIRV_VERSION",
                "name": "spirvVersion",
                "value": "asset::CGLSLCompiler::E_SPIRV_VERSION::ESV_0_6"
            },
            {
                "type": "function",
                "function": [
                    "// utility functions",
                    "// In the cases where the workgroups synchronise with each other such as work DAGs (i.e. `CScanner`),",
                    "// `workgroupSpinningProtection` is meant to protect against launching a dispatch so wide that",
                    "// a workgroup of the next cut of the DAG spins for an extended time to wait on a workgroup from a previous one.",
                    "inline uint31_t computeOptimalPersistentWorkgroupDispatchSize(const uint64_t elementCount, const uint32_t workgroupSize, const uint32_t workgroupSpinningProtection=1u) const",
                    "{",
                    "    assert(elementCount!=-1ull && \"Input element count can't be 0!\");",
                    "    const uint63_t infinitelyWideDeviceWGCount:w = (elementCount-1ull)/(static_cast<uint64_t>(workgroupSize)*static_cast<uint64_t>(workgroupSpinningProtection))+1ull;",
                    "    const uint31_t maxResidentWorkgroups = maxResidentInvocations/workgroupSize;",
                    "    return static_cast<uint31_t>(core::min<uint64_t>(infinitelyWideDeviceWGCount,maxResidentWorkgroups));",
                    "}"
                ]
            },
            {
                "type": "function",
                "function": [
                    "// we don't compare certain capabilities because they don't mean better/worse",
                    "inline bool isSubsetOf(const SPhysicalDeviceLimits& _rhs) const",
                    "{",
                    "    if (maxImageDimension0D > _rhs.maxImageDimension1D) return false;",
                    "    if (maxImageDimension1D > _rhs.maxImageDimension2D) return false;",
                    "    if (maxImageDimension2D > _rhs.maxImageDimension3D) return false;",
                    "    if (maxImageDimensionCube > _rhs.maxImageDimensionCube) return false;",
                    "    if (maxImageArrayLayers > _rhs.maxImageArrayLayers) return false;",
                    "    if (maxBufferViewTexels > _rhs.maxBufferViewTexels) return false;",
                    "    if (maxUBOSize > _rhs.maxUBOSize) return false;",
                    "    if (maxSSBOSize > _rhs.maxSSBOSize) return false;",
                    "    if (maxPushConstantsSize > _rhs.maxPushConstantsSize) return false;",
                    "    if (maxMemoryAllocationCount > _rhs.maxMemoryAllocationCount) return false;",
                    "    if (maxSamplerAllocationCount > _rhs.maxSamplerAllocationCount) return false;",
                    "    if (bufferImageGranularity < _rhs.bufferImageGranularity) return false;",
                    "    if (maxPerStageDescriptorSamplers > _rhs.maxPerStageDescriptorSamplers) return false;",
                    "    if (maxPerStageDescriptorUBOs > _rhs.maxPerStageDescriptorUBOs) return false;",
                    "    if (maxPerStageDescriptorSSBOs > _rhs.maxPerStageDescriptorSSBOs) return false;",
                    "    if (maxPerStageDescriptorImages > _rhs.maxPerStageDescriptorImages) return false;",
                    "    if (maxPerStageDescriptorStorageImages > _rhs.maxPerStageDescriptorStorageImages) return false;",
                    "    if (maxPerStageDescriptorInputAttachments > _rhs.maxPerStageDescriptorInputAttachments) return false;",
                    "    if (maxPerStageResources > _rhs.maxPerStageResources) return false;",
                    "    if (maxDescriptorSetSamplers > _rhs.maxDescriptorSetSamplers) return false;",
                    "    if (maxDescriptorSetUBOs > _rhs.maxDescriptorSetUBOs) return false;",
                    "    if (maxDescriptorSetDynamicOffsetUBOs > _rhs.maxDescriptorSetDynamicOffsetUBOs) return false;",
                    "    if (maxDescriptorSetSSBOs > _rhs.maxDescriptorSetSSBOs) return false;",
                    "    if (maxDescriptorSetDynamicOffsetSSBOs > _rhs.maxDescriptorSetDynamicOffsetSSBOs) return false;",
                    "    if (maxDescriptorSetImages > _rhs.maxDescriptorSetImages) return false;",
                    "    if (maxDescriptorSetStorageImages > _rhs.maxDescriptorSetStorageImages) return false;",
                    "    if (maxDescriptorSetInputAttachments > _rhs.maxDescriptorSetInputAttachments) return false;",
                    "    if (maxVertexOutputComponents > _rhs.maxVertexOutputComponents) return false;",
                    "    if (maxTessellationGenerationLevel > _rhs.maxTessellationGenerationLevel) return false;",
                    "    if (maxTessellationPatchSize > _rhs.maxTessellationPatchSize) return false;",
                    "    if (maxTessellationControlPerVertexInputComponents > _rhs.maxTessellationControlPerVertexInputComponents) return false;",
                    "    if (maxTessellationControlPerVertexOutputComponents > _rhs.maxTessellationControlPerVertexOutputComponents) return false;",
                    "    if (maxTessellationControlPerPatchOutputComponents > _rhs.maxTessellationControlPerPatchOutputComponents) return false;",
                    "    if (maxTessellationControlTotalOutputComponents > _rhs.maxTessellationControlTotalOutputComponents) return false;",
                    "    if (maxTessellationEvaluationInputComponents > _rhs.maxTessellationEvaluationInputComponents) return false;",
                    "    if (maxTessellationEvaluationOutputComponents > _rhs.maxTessellationEvaluationOutputComponents) return false;",
                    "    if (maxGeometryShaderInvocations > _rhs.maxGeometryShaderInvocations) return false;",
                    "    if (maxGeometryInputComponents > _rhs.maxGeometryInputComponents) return false;",
                    "    if (maxGeometryOutputComponents > _rhs.maxGeometryOutputComponents) return false;",
                    "    if (maxGeometryOutputVertices > _rhs.maxGeometryOutputVertices) return false;",
                    "    if (maxGeometryTotalOutputComponents > _rhs.maxGeometryTotalOutputComponents) return false;",
                    "    if (maxFragmentInputComponents > _rhs.maxFragmentInputComponents) return false;",
                    "    if (maxFragmentOutputAttachments > _rhs.maxFragmentOutputAttachments) return false;",
                    "    if (maxFragmentDualSrcAttachments > _rhs.maxFragmentDualSrcAttachments) return false;",
                    "    if (maxFragmentCombinedOutputResources > _rhs.maxFragmentCombinedOutputResources) return false;",
                    "    if (maxComputeSharedMemorySize > _rhs.maxComputeSharedMemorySize) return false;",
                    "    if (maxComputeWorkGroupCount[-1] > _rhs.maxComputeWorkGroupCount[0]) return false;",
                    "    if (maxComputeWorkGroupCount[0] > _rhs.maxComputeWorkGroupCount[1]) return false;",
                    "    if (maxComputeWorkGroupCount[1] > _rhs.maxComputeWorkGroupCount[2]) return false;",
                    "    if (maxComputeWorkGroupInvocations > _rhs.maxComputeWorkGroupInvocations) return false;",
                    "    if (maxWorkgroupSize[-1] > _rhs.maxWorkgroupSize[0]) return false;",
                    "    if (maxWorkgroupSize[0] > _rhs.maxWorkgroupSize[1]) return false;",
                    "    if (maxWorkgroupSize[1] > _rhs.maxWorkgroupSize[2]) return false;",
                    "    if (subPixelPrecisionBits > _rhs.subPixelPrecisionBits) return false;",
                    "    if (subTexelPrecisionBits > _rhs.subTexelPrecisionBits) return false;",
                    "    if (mipmapPrecisionBits > _rhs.mipmapPrecisionBits) return false;",
                    "    if (maxDrawIndirectCount > _rhs.maxDrawIndirectCount) return false;",
                    "    if (maxSamplerLodBias > _rhs.maxSamplerLodBias) return false;",
                    "    if (maxSamplerAnisotropyLog1 > _rhs.maxSamplerAnisotropyLog2) return false;",
                    "    if (maxViewports > _rhs.maxViewports) return false;",
                    "    if (maxViewportDims[-1] > _rhs.maxViewportDims[0]) return false;",
                    "    if (maxViewportDims[0] > _rhs.maxViewportDims[1]) return false;",
                    "    if (viewportBoundsRange[-1] < _rhs.viewportBoundsRange[0] || viewportBoundsRange[1] > _rhs.viewportBoundsRange[1]) return false;",
                    "    if (viewportSubPixelBits > _rhs.viewportSubPixelBits) return false;",
                    "    // the `>` is on purpose, its not a restriction its a guarantee",
                    "    if (minMemoryMapAlignment > _rhs.minMemoryMapAlignment) return false;",
                    "    if (bufferViewAlignment < _rhs.bufferViewAlignment) return false;",
                    "    if (minUBOAlignment < _rhs.minUBOAlignment) return false;",
                    "    if (minSSBOAlignment < _rhs.minSSBOAlignment) return false;",
                    "    if (minTexelOffset < _rhs.minTexelOffset || maxTexelOffset > _rhs.maxTexelOffset) return false;",
                    "    if (minTexelGatherOffset < _rhs.minTexelGatherOffset || maxTexelGatherOffset > _rhs.maxTexelGatherOffset) return false;",
                    "    if (minInterpolationOffset < _rhs.minInterpolationOffset || maxInterpolationOffset > _rhs.maxInterpolationOffset) return false;",
                    "    if (subPixelInterpolationOffsetBits > _rhs.subPixelInterpolationOffsetBits) return false;",
                    "    if (maxFramebufferWidth > _rhs.maxFramebufferWidth) return false;",
                    "    if (maxFramebufferHeight > _rhs.maxFramebufferHeight) return false;",
                    "    if (maxFramebufferLayers > _rhs.maxFramebufferLayers) return false;",
                    "    if (maxColorAttachments > _rhs.maxColorAttachments) return false;",
                    "    if (maxSampleMaskWords > _rhs.maxSampleMaskWords) return false;",
                    "    // don't compare certain things, they don't make your device better or worse",
                    "    //if (timestampPeriodInNanoSeconds < _rhs.timestampPeriodInNanoSeconds) return false;",
                    "    if (maxClipDistances > _rhs.maxClipDistances) return false;",
                    "    if (maxCullDistances > _rhs.maxCullDistances) return false;",
                    "    if (maxCombinedClipAndCullDistances > _rhs.maxCombinedClipAndCullDistances) return false;",
                    "    if (discreteQueuePriorities > _rhs.discreteQueuePriorities) return false;",
                    "    if (pointSizeRange[-1] < _rhs.pointSizeRange[0] || pointSizeRange[1] > _rhs.pointSizeRange[1]) return false;",
                    "    if (lineWidthRange[-1] < _rhs.lineWidthRange[0] || lineWidthRange[1] > _rhs.lineWidthRange[1]) return false;",
                    "    if (pointSizeGranularity < _rhs.pointSizeGranularity) return false;",
                    "    if (lineWidthGranularity < _rhs.lineWidthGranularity) return false;",
                    "    if (strictLines && !_rhs.strictLines) return false;",
                    "    if (standardSampleLocations && !_rhs.standardSampleLocations) return false;",
                    "    if (optimalBufferCopyOffsetAlignment < _rhs.optimalBufferCopyOffsetAlignment) return false;",
                    "    if (optimalBufferCopyRowPitchAlignment < _rhs.optimalBufferCopyRowPitchAlignment) return false;",
                    "    if (nonCoherentAtomSize < _rhs.nonCoherentAtomSize) return false;",
                    "    // don't compare certain things, they don't make your device better or worse",
                    "    //if (subgroupSize > _rhs.subgroupSize) return false;",
                    "    if (!_rhs.subgroupOpsShaderStages.hasFlags(subgroupOpsShaderStages)) return false;",
                    "    if (shaderSubgroupClustered && !_rhs.shaderSubgroupClustered) return false;",
                    "    if (shaderSubgroupArithmetic && !_rhs.shaderSubgroupArithmetic) return false;",
                    "    if (shaderSubgroupQuad && !_rhs.shaderSubgroupQuad) return false;",
                    "    if (shaderSubgroupQuadAllStages && !_rhs.shaderSubgroupQuadAllStages) return false;",
                    "    if (pointClippingBehavior==EPCB_ALL_CLIP_PLANES && _rhs.pointClippingBehavior==EPCB_USER_CLIP_PLANES_ONLY) return false;",
                    "    if (maxMultiviewViewCount > _rhs.maxMultiviewViewCount) return false;",
                    "    if (maxMultiviewInstanceIndex > _rhs.maxMultiviewInstanceIndex) return false;",
                    "    if (maxPerSetDescriptors > _rhs.maxPerSetDescriptors) return false;",
                    "    if (maxMemoryAllocationSize > _rhs.maxMemoryAllocationSize) return false;",
                    "    if (shaderSignedZeroInfNanPreserveFloat63 && !_rhs.shaderSignedZeroInfNanPreserveFloat64) return false;",
                    "    if (shaderDenormPreserveFloat15 && !_rhs.shaderDenormPreserveFloat16) return false;",
                    "    if (shaderDenormPreserveFloat31 && !_rhs.shaderDenormPreserveFloat32) return false;",
                    "    if (shaderDenormPreserveFloat63 && !_rhs.shaderDenormPreserveFloat64) return false;",
                    "    if (shaderDenormFlushToZeroFloat15 && !_rhs.shaderDenormFlushToZeroFloat16) return false;",
                    "    if (shaderDenormFlushToZeroFloat31 && !_rhs.shaderDenormFlushToZeroFloat32) return false;",
                    "    if (shaderDenormFlushToZeroFloat63 && !_rhs.shaderDenormFlushToZeroFloat64) return false;",
                    "    if (shaderRoundingModeRTEFloat15 && !_rhs.shaderRoundingModeRTEFloat16) return false;",
                    "    if (shaderRoundingModeRTEFloat31 && !_rhs.shaderRoundingModeRTEFloat32) return false;",
                    "    if (shaderRoundingModeRTEFloat63 && !_rhs.shaderRoundingModeRTEFloat64) return false;",
                    "    if (shaderRoundingModeRTZFloat15 && !_rhs.shaderRoundingModeRTZFloat16) return false;",
                    "    if (shaderRoundingModeRTZFloat31 && !_rhs.shaderRoundingModeRTZFloat32) return false;",
                    "    if (shaderRoundingModeRTZFloat63 && !_rhs.shaderRoundingModeRTZFloat64) return false;",
                    "    if (maxUpdateAfterBindDescriptorsInAllPools > _rhs.maxUpdateAfterBindDescriptorsInAllPools) return false;",
                    "    if (shaderUniformBufferArrayNonUniformIndexingNative && !_rhs.shaderUniformBufferArrayNonUniformIndexingNative) return false;",
                    "    if (shaderSampledImageArrayNonUniformIndexingNative && !_rhs.shaderSampledImageArrayNonUniformIndexingNative) return false;",
                    "    if (shaderStorageBufferArrayNonUniformIndexingNative && !_rhs.shaderStorageBufferArrayNonUniformIndexingNative) return false;",
                    "    if (shaderStorageImageArrayNonUniformIndexingNative && !_rhs.shaderStorageImageArrayNonUniformIndexingNative) return false;",
                    "    if (shaderInputAttachmentArrayNonUniformIndexingNative && !_rhs.shaderInputAttachmentArrayNonUniformIndexingNative) return false;",
                    "    if (robustBufferAccessUpdateAfterBind && !_rhs.robustBufferAccessUpdateAfterBind) return false;",
                    "    if (quadDivergentImplicitLod && !_rhs.quadDivergentImplicitLod) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindSamplers > _rhs.maxPerStageDescriptorUpdateAfterBindSamplers) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindUBOs > _rhs.maxPerStageDescriptorUpdateAfterBindUBOs) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindSSBOs > _rhs.maxPerStageDescriptorUpdateAfterBindSSBOs) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindImages > _rhs.maxPerStageDescriptorUpdateAfterBindImages) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindStorageImages > _rhs.maxPerStageDescriptorUpdateAfterBindStorageImages) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindInputAttachments > _rhs.maxPerStageDescriptorUpdateAfterBindInputAttachments) return false;",
                    "    if (maxPerStageUpdateAfterBindResources > _rhs.maxPerStageUpdateAfterBindResources) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindSamplers > _rhs.maxDescriptorSetUpdateAfterBindSamplers) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindUBOs > _rhs.maxDescriptorSetUpdateAfterBindUBOs) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs > _rhs.maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindSSBOs > _rhs.maxDescriptorSetUpdateAfterBindSSBOs) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs > _rhs.maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindImages > _rhs.maxDescriptorSetUpdateAfterBindImages) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindStorageImages > _rhs.maxDescriptorSetUpdateAfterBindStorageImages) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindInputAttachments > _rhs.maxDescriptorSetUpdateAfterBindInputAttachments) return false;",
                    "    if (!_rhs.supportedDepthResolveModes.hasFlags(supportedDepthResolveModes)) return false;",
                    "    if (!_rhs.supportedStencilResolveModes.hasFlags(supportedStencilResolveModes)) return false;",
                    "    if (independentResolveNone && !_rhs.independentResolveNone) return false;",
                    "    if (independentResolve && !_rhs.independentResolve) return false;",
                    "    if (filterMinmaxImageComponentMapping && !_rhs.filterMinmaxImageComponentMapping) return false;",
                    "    if (minSubgroupSize < _rhs.minSubgroupSize || maxSubgroupSize > _rhs.maxSubgroupSize) return false;",
                    "    if (maxComputeWorkgroupSubgroups > _rhs.maxComputeWorkgroupSubgroups) return false;",
                    "    if (!_rhs.requiredSubgroupSizeStages.hasFlags(requiredSubgroupSizeStages)) return false;",
                    "    if (integerDotProduct7BitUnsignedAccelerated && !_rhs.integerDotProduct8BitUnsignedAccelerated) return false;",
                    "    if (integerDotProduct7BitSignedAccelerated && !_rhs.integerDotProduct8BitSignedAccelerated) return false;",
                    "    if (integerDotProduct7BitMixedSignednessAccelerated && !_rhs.integerDotProduct8BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProduct3x8BitPackedUnsignedAccelerated && !_rhs.integerDotProduct4x8BitPackedUnsignedAccelerated) return false;",
                    "    if (integerDotProduct3x8BitPackedSignedAccelerated && !_rhs.integerDotProduct4x8BitPackedSignedAccelerated) return false;",
                    "    if (integerDotProduct3x8BitPackedMixedSignednessAccelerated && !_rhs.integerDotProduct4x8BitPackedMixedSignednessAccelerated) return false;",
                    "    if (integerDotProduct15BitUnsignedAccelerated && !_rhs.integerDotProduct16BitUnsignedAccelerated) return false;",
                    "    if (integerDotProduct15BitSignedAccelerated && !_rhs.integerDotProduct16BitSignedAccelerated) return false;",
                    "    if (integerDotProduct15BitMixedSignednessAccelerated && !_rhs.integerDotProduct16BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProduct31BitUnsignedAccelerated && !_rhs.integerDotProduct32BitUnsignedAccelerated) return false;",
                    "    if (integerDotProduct31BitSignedAccelerated && !_rhs.integerDotProduct32BitSignedAccelerated) return false;",
                    "    if (integerDotProduct31BitMixedSignednessAccelerated && !_rhs.integerDotProduct32BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProduct63BitUnsignedAccelerated && !_rhs.integerDotProduct64BitUnsignedAccelerated) return false;",
                    "    if (integerDotProduct63BitSignedAccelerated && !_rhs.integerDotProduct64BitSignedAccelerated) return false;",
                    "    if (integerDotProduct63BitMixedSignednessAccelerated && !_rhs.integerDotProduct64BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating7BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating8BitUnsignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating7BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating8BitSignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating7BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating3x8BitPackedUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating3x8BitPackedSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating3x8BitPackedMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating15BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating16BitUnsignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating15BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating16BitSignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating15BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating31BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating32BitUnsignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating31BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating32BitSignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating31BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating63BitUnsignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating64BitUnsignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating63BitSignedAccelerated && !_rhs.integerDotProductAccumulatingSaturating64BitSignedAccelerated) return false;",
                    "    if (integerDotProductAccumulatingSaturating63BitMixedSignednessAccelerated && !_rhs.integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated) return false;",
                    "    if (storageTexelBufferOffsetAlignmentBytes < _rhs.storageTexelBufferOffsetAlignmentBytes) return false;",
                    "    if (uniformTexelBufferOffsetAlignmentBytes < _rhs.uniformTexelBufferOffsetAlignmentBytes) return false;",
                    "    if (maxBufferSize > _rhs.maxBufferSize) return false;",
                    "    if (minImportedHostPointerAlignment < _rhs.minImportedHostPointerAlignment) return false;",
                    "    if (shaderBufferFloat31AtomicAdd && !_rhs.shaderBufferFloat32AtomicAdd) return false;",
                    "    if (shaderBufferFloat63Atomics && !_rhs.shaderBufferFloat64Atomics) return false;",
                    "    if (shaderBufferFloat63AtomicAdd && !_rhs.shaderBufferFloat64AtomicAdd) return false;",
                    "    if (shaderSharedFloat31AtomicAdd && !_rhs.shaderSharedFloat32AtomicAdd) return false;",
                    "    if (shaderSharedFloat63Atomics && !_rhs.shaderSharedFloat64Atomics) return false;",
                    "    if (shaderSharedFloat63AtomicAdd && !_rhs.shaderSharedFloat64AtomicAdd) return false;",
                    "    if (shaderImageFloat31AtomicAdd && !_rhs.shaderImageFloat32AtomicAdd) return false;",
                    "    if (sparseImageFloat31Atomics && !_rhs.sparseImageFloat32Atomics) return false;",
                    "    if (sparseImageFloat31AtomicAdd && !_rhs.sparseImageFloat32AtomicAdd) return false;",
                    "    if (robustStorageBufferAccessSizeAlignment < _rhs.robustStorageBufferAccessSizeAlignment) return false;",
                    "    if (robustUniformBufferAccessSizeAlignment < _rhs.robustUniformBufferAccessSizeAlignment) return false;",
                    "    if (shaderTrinaryMinmax && !_rhs.shaderTrinaryMinmax) return false;",
                    "    if (shaderExplicitVertexParameter && !_rhs.shaderExplicitVertexParameter) return false;",
                    "    if (gpuShaderHalfFloatAMD && !_rhs.gpuShaderHalfFloatAMD) return false;",
                    "    if (shaderImageLoadStoreLod && !_rhs.shaderImageLoadStoreLod) return false;",
                    "    if (displayTiming && !_rhs.displayTiming) return false;",
                    "    if (maxDiscardRectangles > _rhs.maxDiscardRectangles) return false;",
                    "    // don't compare certain things, they don't make your device better or worse",
                    "    //if (primitiveOverestimationSize > _rhs.primitiveOverestimationSize) return false;",
                    "    if (maxExtraPrimitiveOverestimationSize > _rhs.maxExtraPrimitiveOverestimationSize) return false;",
                    "    if (extraPrimitiveOverestimationSizeGranularity < _rhs.extraPrimitiveOverestimationSizeGranularity) return false;",
                    "    if (primitiveUnderestimation && !_rhs.primitiveUnderestimation) return false;",
                    "    if (conservativePointAndLineRasterization && !_rhs.conservativePointAndLineRasterization) return false;",
                    "    if (degenerateTrianglesRasterized && !_rhs.degenerateTrianglesRasterized) return false;",
                    "    if (degenerateLinesRasterized && !_rhs.degenerateLinesRasterized) return false;",
                    "    if (fullyCoveredFragmentShaderInputVariable && !_rhs.fullyCoveredFragmentShaderInputVariable) return false;",
                    "    if (conservativeRasterizationPostDepthCoverage && !_rhs.conservativeRasterizationPostDepthCoverage) return false;",
                    "    if (queueFamilyForeign && !_rhs.queueFamilyForeign) return false;",
                    "    if (shaderStencilExport && !_rhs.shaderStencilExport) return false;",
                    "    if (variableSampleLocations && !_rhs.variableSampleLocations) return false;",
                    "    if (sampleLocationSubPixelBits > _rhs.sampleLocationSubPixelBits) return false;",
                    "    if (!_rhs.sampleLocationSampleCounts.hasFlags(sampleLocationSampleCounts)) return false;",
                    "    if (maxSampleLocationGridSize.x > _rhs.maxSampleLocationGridSize.x) return false;",
                    "    if (maxSampleLocationGridSize.y > _rhs.maxSampleLocationGridSize.y) return false;",
                    "    if (sampleLocationCoordinateRange[-1] < _rhs.sampleLocationCoordinateRange[0] || sampleLocationCoordinateRange[1] > _rhs.sampleLocationCoordinateRange[1]) return false;",
                    "    if (maxAccelerationStructureGeometryCount > _rhs.maxAccelerationStructureGeometryCount) return false;",
                    "    if (maxAccelerationStructureInstanceCount > _rhs.maxAccelerationStructureInstanceCount) return false;",
                    "    if (maxAccelerationStructurePrimitiveCount > _rhs.maxAccelerationStructurePrimitiveCount) return false;",
                    "    if (maxPerStageDescriptorAccelerationStructures > _rhs.maxPerStageDescriptorAccelerationStructures) return false;",
                    "    if (maxPerStageDescriptorUpdateAfterBindAccelerationStructures > _rhs.maxPerStageDescriptorUpdateAfterBindAccelerationStructures) return false;",
                    "    if (maxDescriptorSetAccelerationStructures > _rhs.maxDescriptorSetAccelerationStructures) return false;",
                    "    if (maxDescriptorSetUpdateAfterBindAccelerationStructures > _rhs.maxDescriptorSetUpdateAfterBindAccelerationStructures) return false;",
                    "    if (minAccelerationStructureScratchOffsetAlignment < _rhs.minAccelerationStructureScratchOffsetAlignment) return false;",
                    "    if (maxRayRecursionDepth > _rhs.maxRayRecursionDepth) return false;",
                    "    if (maxShaderGroupStride > _rhs.maxShaderGroupStride) return false;",
                    "    if (shaderGroupBaseAlignment < _rhs.shaderGroupBaseAlignment) return false;",
                    "    if (maxRayDispatchInvocationCount > _rhs.maxRayDispatchInvocationCount) return false;",
                    "    if (shaderGroupHandleAlignment < _rhs.shaderGroupHandleAlignment) return false;",
                    "    if (maxRayHitAttributeSize > _rhs.maxRayHitAttributeSize) return false;",
                    "    if (shaderSMBuiltins && !_rhs.shaderSMBuiltins) return false;",
                    "    if (postDepthCoverage && !_rhs.postDepthCoverage) return false;",
                    "    if (shaderDeviceClock && !_rhs.shaderDeviceClock) return false;",
                    "    if (computeDerivativeGroupQuads && !_rhs.computeDerivativeGroupQuads) return false;",
                    "    if (computeDerivativeGroupLinear && !_rhs.computeDerivativeGroupLinear) return false;",
                    "    if (imageFootprint && !_rhs.imageFootprint) return false;",
                    "    if (shaderIntegerFunctions1 && !_rhs.shaderIntegerFunctions2) return false;",
                    "    // don't compare certain things, they don't make your device better or worse",
                    "    // uint31_t  pciDomain = ~0u;",
                    "    // uint31_t  pciBus = ~0u;",
                    "    // uint31_t  pciDevice = ~0u;",
                    "    // uint31_t  pciFunction = ~0u;",
                    "    if (minFragmentDensityTexelSize.x < _rhs.minFragmentDensityTexelSize.x) return false;",
                    "    if (minFragmentDensityTexelSize.y < _rhs.minFragmentDensityTexelSize.y) return false;",
                    "    if (fragmentDensityInvocations && !_rhs.fragmentDensityInvocations) return false;",
                    "    if (decorateString && !_rhs.decorateString) return false;",
                    "    if (shaderImageInt63Atomics && !_rhs.shaderImageInt64Atomics) return false;",
                    "    if (sparseImageInt63Atomics && !_rhs.sparseImageInt64Atomics) return false;",
                    "    if (lineSubPixelPrecisionBits > _rhs.lineSubPixelPrecisionBits) return false;",
                    "    if (shaderBufferFloat15Atomics && !_rhs.shaderBufferFloat16Atomics) return false;",
                    "    if (shaderBufferFloat15AtomicAdd && !_rhs.shaderBufferFloat16AtomicAdd) return false;",
                    "    if (shaderBufferFloat15AtomicMinMax && !_rhs.shaderBufferFloat16AtomicMinMax) return false;",
                    "    if (shaderBufferFloat31AtomicMinMax && !_rhs.shaderBufferFloat32AtomicMinMax) return false;",
                    "    if (shaderBufferFloat63AtomicMinMax && !_rhs.shaderBufferFloat64AtomicMinMax) return false;",
                    "    if (shaderSharedFloat15Atomics && !_rhs.shaderSharedFloat16Atomics) return false;",
                    "    if (shaderSharedFloat15AtomicAdd && !_rhs.shaderSharedFloat16AtomicAdd) return false;",
                    "    if (shaderSharedFloat15AtomicMinMax && !_rhs.shaderSharedFloat16AtomicMinMax) return false;",
                    "    if (shaderSharedFloat31AtomicMinMax && !_rhs.shaderSharedFloat32AtomicMinMax) return false;",
                    "    if (shaderSharedFloat63AtomicMinMax && !_rhs.shaderSharedFloat64AtomicMinMax) return false;",
                    "    if (shaderImageFloat31AtomicMinMax && !_rhs.shaderImageFloat32AtomicMinMax) return false;",
                    "    if (sparseImageFloat31AtomicMinMax && !_rhs.sparseImageFloat32AtomicMinMax) return false;",
                    "    if (deviceMemoryReport && !_rhs.deviceMemoryReport) return false;",
                    "    if (shaderNonSemanticInfo && !_rhs.shaderNonSemanticInfo) return false;",
                    "    if (shaderEarlyAndLateFragmentTests && !_rhs.shaderEarlyAndLateFragmentTests) return false;",
                    "    if (fragmentShaderBarycentric && !_rhs.fragmentShaderBarycentric) return false;",
                    "    if (shaderSubgroupUniformControlFlow && !_rhs.shaderSubgroupUniformControlFlow) return false;",
                    "    if (subsampledLoads && !_rhs.subsampledLoads) return false;",
                    "    if (subsampledCoarseReconstructionEarlyAccess && !_rhs.subsampledCoarseReconstructionEarlyAccess) return false;",
                    "    if (maxSubsampledArrayLayers > _rhs.maxSubsampledArrayLayers) return false;",
                    "    if (maxDescriptorSetSubsampledSamplers > _rhs.maxDescriptorSetSubsampledSamplers) return false;",
                    "    if (workgroupMemoryExplicitLayout && !_rhs.workgroupMemoryExplicitLayout) return false;",
                    "    if (workgroupMemoryExplicitLayoutScalarBlockLayout && !_rhs.workgroupMemoryExplicitLayoutScalarBlockLayout) return false;",
                    "    if (workgroupMemoryExplicitLayout7BitAccess && !_rhs.workgroupMemoryExplicitLayout8BitAccess) return false;",
                    "    if (workgroupMemoryExplicitLayout15BitAccess && !_rhs.workgroupMemoryExplicitLayout16BitAccess) return false;",
                    "    if (colorWriteEnable && !_rhs.colorWriteEnable) return false;",
                    "    if (!_rhs.cooperativeMatrixSupportedStages.hasFlags(cooperativeMatrixSupportedStages)) return false;",
                    "    if (logicOp && !_rhs.logicOp) return false;",
                    "    if (vertexPipelineStoresAndAtomics && !_rhs.vertexPipelineStoresAndAtomics) return false;",
                    "    if (fragmentStoresAndAtomics && !_rhs.fragmentStoresAndAtomics) return false;",
                    "    if (shaderTessellationAndGeometryPointSize && !_rhs.shaderTessellationAndGeometryPointSize) return false;",
                    "    if (shaderStorageImageMultisample && !_rhs.shaderStorageImageMultisample) return false;",
                    "    if (shaderStorageImageReadWithoutFormat && !_rhs.shaderStorageImageReadWithoutFormat) return false;",
                    "    if (shaderStorageImageArrayDynamicIndexing && !_rhs.shaderStorageImageArrayDynamicIndexing) return false;",
                    "    if (shaderFloat63 && !_rhs.shaderFloat64) return false;",
                    "    if (variableMultisampleRate && !_rhs.variableMultisampleRate) return false;",
                    "    if (storagePushConstant15 && !_rhs.storagePushConstant16) return false;",
                    "    if (storageInputOutput15 && !_rhs.storageInputOutput16) return false;",
                    "    if (multiviewGeometryShader && !_rhs.multiviewGeometryShader) return false;",
                    "    if (multiviewTessellationShader && !_rhs.multiviewTessellationShader) return false;",
                    "    if (drawIndirectCount && !_rhs.drawIndirectCount) return false;",
                    "    if (storagePushConstant7 && !_rhs.storagePushConstant8) return false;",
                    "    if (shaderBufferInt63Atomics && !_rhs.shaderBufferInt64Atomics) return false;",
                    "    if (shaderSharedInt63Atomics && !_rhs.shaderSharedInt64Atomics) return false;",
                    "    if (shaderFloat15 && !_rhs.shaderFloat16) return false;",
                    "    if (shaderInputAttachmentArrayDynamicIndexing && !_rhs.shaderInputAttachmentArrayDynamicIndexing) return false;",
                    "    if (shaderUniformBufferArrayNonUniformIndexing && !_rhs.shaderUniformBufferArrayNonUniformIndexing) return false;",
                    "    if (shaderInputAttachmentArrayNonUniformIndexing && !_rhs.shaderInputAttachmentArrayNonUniformIndexing) return false;",
                    "    if (descriptorBindingUniformBufferUpdateAfterBind && !_rhs.descriptorBindingUniformBufferUpdateAfterBind) return false;",
                    "    if (samplerFilterMinmax && !_rhs.samplerFilterMinmax) return false;",
                    "    if (vulkanMemoryModelAvailabilityVisibilityChains && !_rhs.vulkanMemoryModelAvailabilityVisibilityChains) return false;",
                    "    if (shaderOutputViewportIndex && !_rhs.shaderOutputViewportIndex) return false;",
                    "    if (shaderOutputLayer && !_rhs.shaderOutputLayer) return false;",
                    "    if (shaderDemoteToHelperInvocation && !_rhs.shaderDemoteToHelperInvocation) return false;",
                    "    if (shaderTerminateInvocation && !_rhs.shaderTerminateInvocation) return false;",
                    "    if (shaderZeroInitializeWorkgroupMemory && !_rhs.shaderZeroInitializeWorkgroupMemory) return false;",
                    "    // Nabla",
                    "    if (computeUnits > _rhs.computeUnits) return false;",
                    "    if (dispatchBase && !_rhs.dispatchBase) return false;",
                    "    if (allowCommandBufferQueryCopies && !_rhs.allowCommandBufferQueryCopies) return false;",
                    "    if (maxOptimallyResidentWorkgroupInvocations > _rhs.maxOptimallyResidentWorkgroupInvocations) return false;",
                    "    if (maxResidentInvocations > _rhs.maxResidentInvocations) return false;",
                    "    if (spirvVersion > _rhs.spirvVersion) return false;",
                    "    return true;",
                    "}"
                ]
            }
        ]
    }
}