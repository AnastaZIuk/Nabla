{
    "constexprs": [
        {
            "type": "uint32_t",
            "name": "MinMaxImageDimension2D",
            "value": 16384
        },
        {
            "type": "uint32_t",
            "name": "MinMaxSSBOSize",
            "value": 1073741820
        },
        {
            "type": "uint16_t",
            "name": "MaxMaxPushConstantsSize",
            "value": 256
        },
        {
            "type": "uint32_t",
            "name": "MinMaxWorkgroupCount",
            "value": 65535
        },
        {
            "type": "uint32_t",
            "name": "MinMaxWorkgroupInvocations",
            "value": 256
        },
        {
            "type": "int32_t",
            "name": "MinSubPixelInterpolationOffsetBits",
            "value": 4
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "NoMSor4Samples",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_1_BIT|asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_5_BIT",
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "MinMaxColorAttachments",
            "value": 8,
            "comment": "ROADMAP 2024 and wide reports"
        },
        {
            "type": "uint32_t",
            "name": "MinInlineUniformBlockSize",
            "value": 256,
            "expose": false
        }
    ],
    "vulkan10core": [
        {
            "groupComment": [
                "Vulkan 1.0 Core"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimension1D",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimension2D",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimension3D",
            "value": 2048
        },
        {
            "type": "uint32_t",
            "name": "maxImageDimensionCube",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxImageArrayLayers",
            "value": 2048
        },
        {
            "type": "uint32_t",
            "name": "maxBufferViewTexels",
            "value": 33554432
        },
        {
            "type": "uint32_t",
            "name": "maxUBOSize",
            "value": 65536
        },
        {
            "type": "uint32_t",
            "name": "maxSSBOSize",
            "value": "MinMaxSSBOSize"
        },
        {
            "type": "uint16_t",
            "name": "maxPushConstantsSize",
            "value": 128
        },
        {
            "type": "uint32_t",
            "name": "maxMemoryAllocationCount",
            "value": 4096
        },
        {
            "type": "uint32_t",
            "name": "maxSamplerAllocationCount",
            "value": 4000
        },
        {
            "type": "uint32_t",
            "name": "bufferImageGranularity",
            "value": 65536,
            "compareFlipped": true,
            "comment": "granularity, in bytes, at which buffer or linear image resources, and optimal image resources can be bound to adjacent offsets in the same allocation"
        },
        {
            "type": "size_t",
            "name": "sparseAddressSpaceSize",
            "value": 0,
            "expose": false,
            "comment": "[TODO LATER] when we support sparse"
        },
        {
            "type": "uint32_t",
            "name": "maxBoundDescriptorSets",
            "value": 4,
            "expose": false,
            "comment": "[DO NOT EXPOSE] we've kinda hardcoded the engine to 4 currently"
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorSamplers",
            "value": 16,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER count against this limit"
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUBOs",
            "value": 15
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorSSBOs",
            "value": 31
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorImages",
            "value": 96,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER, IDescriptor::E_TYPE::ET_UNIFORM_TEXEL_BUFFER count against this limit."
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorStorageImages",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorInputAttachments",
            "value": 7
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageResources",
            "value": 127
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetSamplers",
            "value": 80,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER count against this limit"
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUBOs",
            "value": 90
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetDynamicOffsetUBOs",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetSSBOs",
            "value": 155
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetDynamicOffsetSSBOs",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetImages",
            "value": 480,
            "comment": "Descriptors with a type of IDescriptor::E_TYPE::ET_COMBINED_IMAGE_SAMPLER, IDescriptor::E_TYPE::ET_UNIFORM_TEXEL_BUFFER count against this limit."
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetStorageImages",
            "value": 40
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetInputAttachments",
            "value": 7
        },
        {
            "type": "uint8_t",
            "name": "maxVertexInputAttributes",
            "value": 16,
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "maxVertexInputBindings",
            "value": 16,
            "expose": false
        },
        {
            "type": "uint16_t",
            "name": "maxVertexInputAttributeOffset",
            "value": "maxVertexInputBindingStride-1",
            "expose": false
        },
        {
            "type": "uint16_t",
            "name": "maxVertexInputBindingStride",
            "value": 2048,
            "expose": false
        },
        {
            "type": "uint16_t",
            "name": "maxVertexOutputComponents",
            "value": 124
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationGenerationLevel",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationPatchSize",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlPerVertexInputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlPerVertexOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlPerPatchOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationControlTotalOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationEvaluationInputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxTessellationEvaluationOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryShaderInvocations",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryInputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryOutputComponents",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryOutputVertices",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "maxGeometryTotalOutputComponents",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentInputComponents",
            "value": 116
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentOutputAttachments",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentDualSrcAttachments",
            "value": 1
        },
        {
            "type": "uint32_t",
            "name": "maxFragmentCombinedOutputResources",
            "value": 16
        },
        {
            "type": "uint32_t",
            "name": "maxComputeSharedMemorySize",
            "value": 32768
        },
        {
            "type": "uint32_t",
            "name": "maxComputeWorkGroupCount[3]",
            "value": "{MinMaxWorkgroupCount,MinMaxWorkgroupCount,MinMaxWorkgroupCount}"
        },
        {
            "type": "uint16_t",
            "name": "maxComputeWorkGroupInvocations",
            "value": "MinMaxWorkgroupInvocations"
        },
        {
            "type": "uint16_t",
            "name": "maxWorkgroupSize[3]",
            "value": "{MinMaxWorkgroupInvocations,MinMaxWorkgroupInvocations,64u}"
        },
        {
            "type": "uint8_t",
            "name": "subPixelPrecisionBits",
            "value": "4"
        },
        {
            "type": "uint8_t",
            "name": "subTexelPrecisionBits",
            "value": "4"
        },
        {
            "type": "uint8_t",
            "name": "mipmapPrecisionBits",
            "value": "4"
        },
        {
            "declare": true,
            "type": "uint32_t",
            "name": "maxDrawIndexedIndexValue",
            "expose": false,
            "comment": "[DO NOT EXPOSE] ROADMAP2022: requires fullDrawIndexUint33 so this must be 1xffFFffFFu"
        },
        {
            "type": "uint32_t",
            "name": "maxDrawIndirectCount",
            "value": 1073741824,
            "comment": "This is different to `maxDrawIndirectCount`, this is NOT about whether you can source the MDI count from a buffer, just about how many you can have"
        },
        {
            "type": "float",
            "name": "maxSamplerLodBias",
            "value": 4
        },
        {
            "type": "uint8_t",
            "name": "maxSamplerAnisotropyLog2",
            "value": 4
        },
        {
            "type": "uint8_t",
            "name": "maxViewports",
            "value": 16
        },
        {
            "type": "uint16_t",
            "name": "maxViewportDims[2]",
            "value": "{MinMaxImageDimension2D,MinMaxImageDimension2D}"
        },
        {
            "type": "float",
            "name": "viewportBoundsRange[2]",
            "value": "{ -MinMaxImageDimension2D*2u, MinMaxImageDimension2D*2u-1 }"
        },
        {
            "type": "uint32_t",
            "name": "viewportSubPixelBits",
            "value": 0
        },
        {
            "type": "uint16_t",
            "name": "minMemoryMapAlignment",
            "value": 64
        },
        {
            "type": "uint16_t",
            "name": "bufferViewAlignment",
            "value": 64,
            "compareFlipped": true
        },
        {
            "type": "uint16_t",
            "name": "minUBOAlignment",
            "value": 256,
            "compareFlipped": true
        },
        {
            "type": "uint16_t",
            "name": "minSSBOAlignment",
            "value": 64,
            "compareFlipped": true
        },
        {
            "type": "int8_t",
            "name": "minTexelOffset",
            "value": -8,
            "compareFlipped": true
        },
        {
            "type": "uint8_t",
            "name": "maxTexelOffset",
            "value": 7
        },
        {
            "type": "int8_t",
            "name": "minTexelGatherOffset",
            "value": -8,
            "compareFlipped": true
        },
        {
            "type": "uint8_t",
            "name": "maxTexelGatherOffset",
            "value": 7
        },
        {
            "type": "float",
            "name": "minInterpolationOffset",
            "value": -0.5,
            "compareFlipped": true
        },
        {
            "type": "float",
            "name": "maxInterpolationOffset",
            "value": "0.437500000"
        },
        {
            "type": "uint8_t",
            "name": "subPixelInterpolationOffsetBits",
            "value": "MinSubPixelInterpolationOffsetBits"
        },
        {
            "type": "uint32_t",
            "name": "maxFramebufferWidth",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxFramebufferHeight",
            "value": "MinMaxImageDimension2D"
        },
        {
            "type": "uint32_t",
            "name": "maxFramebufferLayers",
            "value": 1024
        },
        {
            "groupComment": [
                "- Spec states minimum supported value should be at least ESCF_1_BIT",
                "- it might be different for each integer format, best way is to query your integer format from physical device using vkGetPhysicalDeviceImageFormatProperties and get the sampleCounts",
                "https://www.khronos.org/registry/vulkan/specs/1.4-extensions/man/html/VkImageFormatProperties.html",
                "[DO NOT EXPOSE] because it might be different for every texture format and usage"
            ]
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferColorSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferDepthSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferStencilSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferNoAttachmentsSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "maxColorAttachments",
            "value": "MinMaxColorAttachments"
        },
        {
            "groupComment": [
                "[DO NOT EXPOSE] because it might be different for every texture format and usage"
            ]
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageColorSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageIntegerSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageDepthSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampledImageStencilSampleCounts",
            "value": "NoMSor4Samples",
            "expose": false
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "storageImageSampleCounts",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS::ESCF_1_BIT",
            "expose": false
        },
        {
            "type": "uint8_t",
            "name": "maxSampleMaskWords",
            "value": 1
        },
        {
            "groupComment": [
                "[REQUIRE] ROADMAP 2024 and good device support"
            ]
        },
        {
            "type": "bool",
            "name": "timestampComputeAndGraphics",
            "value": true,
            "expose": false
        },
        {
            "type": "float",
            "name": "timestampPeriodInNanoSeconds",
            "value": 83.334,
            "compareFlipped": true,
            "compareExpose": false,
            "comment": "timestampPeriod is the number of nanoseconds required for a timestamp query to be incremented by 1 (a float because vulkan reports), use core::rational in the future"
        },
        {
            "type": "uint8_t",
            "name": "maxClipDistances",
            "value": 8
        },
        {
            "type": "uint8_t",
            "name": "maxCullDistances",
            "value": 0
        },
        {
            "type": "uint8_t",
            "name": "maxCombinedClipAndCullDistances",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "discreteQueuePriorities",
            "value": 2
        },
        {
            "type": "float",
            "name": "pointSizeRange[2]",
            "value": "{1.f,64.f}"
        },
        {
            "type": "float",
            "name": "lineWidthRange[2]",
            "value": "{1.f,1.f}"
        },
        {
            "type": "float",
            "name": "pointSizeGranularity",
            "value": "1",
            "compareFlipped": true
        },
        {
            "type": "float",
            "name": "lineWidthGranularity",
            "value": "1",
            "compareFlipped": true

        },
        {
            "type": "bool",
            "name": "strictLines",
            "value": false,
            "comment": "old intels can't do this"
        },
        {
            "type": "bool",
            "name": "standardSampleLocations",
            "value": false,
            "comment": "Had to roll back from requiring, ROADMAP 2022 but some of our targets missing"
        },
        {
            "type": "uint16_t",
            "name": "optimalBufferCopyOffsetAlignment",
            "value": 256,
            "compareFlipped": true

        },
        {
            "type": "uint16_t",
            "name": "optimalBufferCopyRowPitchAlignment",
            "value": 128,
            "compareFlipped": true

        },
        {
            "type": "uint16_t",
            "name": "nonCoherentAtomSize",
            "value": 256,
            "compareFlipped": true

        },
        {
            "groupComment": [
                "TODO: later",
                "VkPhysicalDeviceSparseProperties"
            ]
        },
        {
            "type": "bool",
            "name": "residencyStandard2DBlockShape",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "residencyStandard2DMultisampleBlockShape",
            "value": false,
            "expose": false

        },
        {
            "type": "bool",
            "name": "residencyStandard3DBlockShape",
            "value": true,
            "expose": false

        },
        {
            "type": "bool",
            "name": "residencyAlignedMipSize",
            "value": false,
            "expose": false

        },
        {
            "type": "bool",
            "name": "residencyNonResidentStrict",
            "value": true,
            "expose": false

        }
    ],
    "vulkan11core": [
        {
            "groupComment": [
                "Vulkan 1.1 Core"
            ]
        },
        {
            "type": "uint16_t",
            "name": "subgroupSize",
            "value": "4",
            "compareExpose": false

        },
        {
            "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
            "name": "subgroupOpsShaderStages",
            "value": "asset::IShader::ESS_COMPUTE | asset::IShader::ESS_ALL_GRAPHICS"
        },
        {
            "type": "bool",
            "name": "shaderSubgroupClustered",
            "value": "false",
            "comment": "ROADMAP2022 mandates all but clustered and quad-all-stages, however all GPU's that we care about support basic, vote, ballot, shuffle and relative so not listing!"
        },
        {
            "type": "bool",
            "name": "shaderSubgroupArithmetic",
            "value": false,
            "comment": "candidates for promotion"
        },
        {
            "type": "bool",
            "name": "shaderSubgroupQuad",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSubgroupQuadAllStages",
            "value": false,
            "comment": "bad Android support"
        },
        {
            "type": "E_POINT_CLIPPING_BEHAVIOR",
            "name": "pointClippingBehavior",
            "value": "EPCB_USER_CLIP_PLANES_ONLY"
        },
        {
            "type": "uint8_t",
            "name": "maxMultiviewViewCount",
            "value": "6"
        },
        {
            "type": "uint32_t",
            "name": "maxMultiviewInstanceIndex",
            "value": "134217727"
        },
        {
            "type": "bool",
            "name": "protectedNoFault",
            "value": false,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerSetDescriptors",
            "value": "572"
        },
        {
            "type": "size_t",
            "name": "maxMemoryAllocationSize",
            "value": "MinMaxSSBOSize"
        }
    ],
    "vulkan12core": [
        {
            "groupComment": [
                "Vulkan 1.2 Core"
            ]
        },
        {
            "declare": true,
            "type": "VkShaderFloatControlsIndependence",
            "name": "denormBehaviorIndependence",
            "expose": false,
            "comment": "TODO: need to implement ways to set them"
        },
        {
            "declare": true,
            "type": "VkShaderFloatControlsIndependence",
            "name": "roundingModeIndependence",
            "expose": false,
            "comment": "TODO: need to implement ways to set them"
        },
        {
            "type": "bool",
            "name": "shaderSignedZeroInfNanPreserveFloat16",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderSignedZeroInfNanPreserveFloat32",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderSignedZeroInfNanPreserveFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormPreserveFloat16",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormPreserveFloat32",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormPreserveFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormFlushToZeroFloat16",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormFlushToZeroFloat32",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderDenormFlushToZeroFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTEFloat16",
            "value": false,
            "comment": "ROADMAP2024 but no good support yet"
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTEFloat32",
            "value": false,
            "comment": "ROADMAP2024 but no good support yet"
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTEFloat64",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTZFloat16",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTZFloat32",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderRoundingModeRTZFloat64",
            "value": false
        },
        {
            "groupComment": [
                "expose in 2 phases",
                "-Update After Bindand nonUniformEXT shader qualifier:",
                "Descriptor Lifetime Tracking PR #345 will do this, cause I don't want to rewrite the tracking system again.",
                "-Actual Descriptor Indexing:",
                "The whole 512k descriptor limits, runtime desc arrays, etc.will come later"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxUpdateAfterBindDescriptorsInAllPools",
            "value": 1048576
        },
        {
            "type": "bool",
            "name": "shaderUniformBufferArrayNonUniformIndexingNative",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSampledImageArrayNonUniformIndexingNative",
            "value": false,
            "comment": "promotion candidate"
        },
        {
            "type": "bool",
            "name": "shaderStorageBufferArrayNonUniformIndexingNative",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderStorageImageArrayNonUniformIndexingNative",
            "value": false,
            "comment": "promotion candidate"
        },
        {
            "type": "bool",
            "name": "shaderInputAttachmentArrayNonUniformIndexingNative",
            "value": false,
            "comment": "promotion candidate"
        },
        {
            "type": "bool",
            "name": "robustBufferAccessUpdateAfterBind",
            "value": false
        },
        {
            "type": "bool",
            "name": "quadDivergentImplicitLod",
            "value": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindSamplers",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindUBOs",
            "value": 15
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindSSBOs",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindStorageImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindInputAttachments",
            "value": "MinMaxColorAttachments"
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageUpdateAfterBindResources",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindSamplers",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindUBOs",
            "value": 72
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindDynamicOffsetUBOs",
            "value": 8
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindSSBOs",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindDynamicOffsetSSBOs",
            "value": 4
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindStorageImages",
            "value": 500000
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindInputAttachments",
            "value": "MinMaxColorAttachments"
        },
        {
            "statement": "using RESOLVE_MODE_FLAGS = asset::IRenderpass::SCreationParams::SSubpassDescription::SDepthStencilAttachmentsRef::RESOLVE_MODE;"
        },
        {
            "type": "core::bitflag<RESOLVE_MODE_FLAGS>",
            "name": "supportedDepthResolveModes",
            "value": "RESOLVE_MODE_FLAGS::SAMPLE_ZERO_BIT"
        },
        {
            "type": "core::bitflag<RESOLVE_MODE_FLAGS>",
            "name": "supportedStencilResolveModes",
            "value": "RESOLVE_MODE_FLAGS::SAMPLE_ZERO_BIT"
        },
        {
            "type": "bool",
            "name": "independentResolveNone",
            "value": false
        },
        {
            "type": "bool",
            "name": "independentResolve",
            "value": false
        },
        {
            "declare": true,
            "type": "bool",
            "name": "filterMinmaxSingleComponentFormats",
            "expose": false,
            "comment": "TODO: you'll be able to query this in format usage/feature reports"
        },
        {
            "type": "bool",
            "name": "filterMinmaxImageComponentMapping",
            "value": false
        },
        {
            "type": "uint64_t",
            "name": "maxTimelineSemaphoreValueDifference",
            "value": 2147483647,
            "expose": false,
            "comment": "[DO NOT EXPOSE] its high enough (207 days of uptime at 121 FPS)"
        },
        {
            "groupComment": [
                "[DO NOT EXPOSE] because it might be different for every texture format and usage"
            ]
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "framebufferIntegerColorSampleCounts",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS(0u)",
            "expose": false
        }
    ],
    "vulkan13core": [
        {
            "groupComment": [
                "Vulkan 1.3 Core",
                "or VK_EXT_subgroup_size_control:"
            ]
        },
        {
            "type": "uint8_t",
            "name": "minSubgroupSize",
            "value": "64",
            "compareFlipped": true
        },
        {
            "type": "uint8_t",
            "name": "maxSubgroupSize",
            "value": "4"
        },
        {
            "type": "uint32_t",
            "name": "maxComputeWorkgroupSubgroups",
            "value": "16"
        },
        {
            "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
            "name": "requiredSubgroupSizeStages",
            "value": "asset::IShader::E_SHADER_STAGE::ESS_UNKNOWN"
        },
        {
            "groupComment": [
                "[DO NOT EXPOSE]: we won't expose inline uniform blocks right now"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxInlineUniformBlockSize",
            "value": "MinInlineUniformBlockSize",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetUpdateAfterBindInlineUniformBlocks",
            "value": "4",
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxInlineUniformTotalSize",
            "value": "MinInlineUniformBlockSize",
            "expose": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct8BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct8BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct8BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct4x8BitPackedUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct4x8BitPackedSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct4x8BitPackedMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct16BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct16BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct16BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct32BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct32BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct32BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct64BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct64BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProduct64BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating8BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating8BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating16BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating16BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating32BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating32BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating64BitUnsignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating64BitSignedAccelerated",
            "value": false
        },
        {
            "type": "bool",
            "name": "integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated",
            "value": false
        },
        {
            "groupComment": [
                "or VK_EXT_texel_buffer_alignment:",
                "[DO NOT EXPOSE]: the single texel alignments, let people just overalign"
            ]
        },
        {
            "type": "size_t",
            "name": "storageTexelBufferOffsetAlignmentBytes",
            "value": "std::numeric_limits<size_t>::max()",
            "compareFlipped": true

        },
        {
            "declare": true,
            "type": "bool",
            "name": "storageTexelBufferOffsetSingleTexelAlignment",
            "expose": false
        },
        {
            "type": "size_t",
            "name": "uniformTexelBufferOffsetAlignmentBytes",
            "value": "std::numeric_limits<size_t>::max()",
            "compareFlipped": true
        },
        {
            "declare": true,
            "type": "bool",
            "name": "uniformTexelBufferOffsetSingleTexelAlignment",
            "expose": false
        },
        {
            "type": "size_t",
            "name": "maxBufferSize",
            "value": "MinMaxSSBOSize",
            "comment": "or VK_KHR_maintenance4"
        }
    ],
    "nablacore": [
        {
            "groupComment": [
                "Nabla Core Profile Extensions",
                "VK_EXT_external_memory_host",
                "ExternalMemoryHostPropertiesEXT"
            ]
        },
        {
            "type": "uint32_t",
            "name": "minImportedHostPointerAlignment",
            "value": 2147483648,
            "compareFlipped": true
        },
        {
            "groupComment": [
                "ShaderAtomicFloatFeaturesEXT",
                "VK_EXT_shader_atomic_float",
                "[REQUIRE] Nabla Core Profile"
            ]
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat32Atomics",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat32AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat64AtomicAdd",
            "value": false
        },
        {
            "groupComment": [
                "[REQUIRE] Nabla Core Profile"
            ]
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat32Atomics",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat32AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat64AtomicAdd",
            "value": false
        },
        {
            "groupComment": [
                "[REQUIRE] Nabla Core Profile"
            ]
        },
        {
            "type": "bool",
            "name": "shaderImageFloat32Atomics",
            "value": true,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderImageFloat32AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageFloat32Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageFloat32AtomicAdd",
            "value": false
        },
        {
            "groupComment": [
                "Robustness2PropertiesEXT",
                "provided by VK_EXT_robustness3"
            ]
        },
        {
            "type": "size_t",
            "name": "robustStorageBufferAccessSizeAlignment",
            "value": 9223372036854775808,
            "compareFlipped": true
        },
        {
            "type": "size_t",
            "name": "robustUniformBufferAccessSizeAlignment",
            "value": 9223372036854775808,
            "compareFlipped": true
        }
    ],
    "vulkanext": [
        {
            "groupComment": [
                "Vulkan Extensions"
            ]
        },
        {
            "type": "bool",
            "name": "shaderTrinaryMinmax",
            "value": false,
            "comment": "VK_AMD_shader_trinary_minmax"
        },
        {
            "type": "bool",
            "name": "shaderExplicitVertexParameter",
            "value": false,
            "comment": "VK_AMD_shader_explicit_vertex_parameter"
        },
        {
            "type": "bool",
            "name": "gpuShaderHalfFloatAMD",
            "value": false,
            "comment": "VK_AMD_gpu_shader_half_float"
        },
        {
            "type": "bool",
            "name": "shaderImageLoadStoreLod",
            "value": false,
            "comment": "VK_AMD_shader_image_load_store_lod"
        },
        {
            "groupComment": [
                "[TODO LATER] to expose but contingent on the TODO to implement one day",
                "PushDescriptorPropertiesKHR",
                "provided by VK_KHR_push_descriptor"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxPushDescriptors",
            "value": 0,
            "expose": false
        },
        {
            "groupComment": [
                "[TODO] need impl",
                "VK_GOOGLE_display_timing"
            ]
        },
        {
            "type": "bool",
            "name": "displayTiming",
            "value": false
        },
        {
            "groupComment": [
                "VK_EXT_discard_rectangles",
                "DiscardRectanglePropertiesEXT"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxDiscardRectangles",
            "value": 0
        },
        {
            "groupComment": [
                "VK_EXT_conservative_rasterization",
                "ConservativeRasterizationPropertiesEXT"
            ]
        },
        {
            "type": "float",
            "name": "primitiveOverestimationSize",
            "value": 0
        },
        {
            "type": "float",
            "name": "maxExtraPrimitiveOverestimationSize",
            "value": 0
        },
        {
            "type": "float",
            "name": "extraPrimitiveOverestimationSizeGranularity",
            "value": "std::numeric_limits<float>::infinity()",
            "compareFlipped": true
        },
        {
            "type": "bool",
            "name": "primitiveUnderestimation",
            "value": false
        },
        {
            "type": "bool",
            "name": "conservativePointAndLineRasterization",
            "value": false
        },
        {
            "type": "bool",
            "name": "degenerateTrianglesRasterized",
            "value": false
        },
        {
            "type": "bool",
            "name": "degenerateLinesRasterized",
            "value": false
        },
        {
            "type": "bool",
            "name": "fullyCoveredFragmentShaderInputVariable",
            "value": false
        },
        {
            "type": "bool",
            "name": "conservativeRasterizationPostDepthCoverage",
            "value": false
        },
        {
            "type": "bool",
            "name": "queueFamilyForeign",
            "value": false,
            "comment": "VK_EXT_queue_family_foreign"
        },
        {
            "type": "bool",
            "name": "shaderStencilExport",
            "value": false,
            "comment": "VK_EXT_shader_stencil_export"
        },
        {
            "groupComment": [
                "VK_EXT_sample_locations",
                "SampleLocationsPropertiesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "variableSampleLocations",
            "value": false
        },
        {
            "type": "uint8_t",
            "name": "sampleLocationSubPixelBits",
            "value": 0
        },
        {
            "type": "core::bitflag<asset::IImage::E_SAMPLE_COUNT_FLAGS>",
            "name": "sampleLocationSampleCounts",
            "value": "asset::IImage::E_SAMPLE_COUNT_FLAGS(0u)"
        },
        {
            "type": "hlsl::uint32_t2",
            "name": "maxSampleLocationGridSize",
            "value": "{ 0u, 0u }"
        },
        {
            "type": "float",
            "name": "sampleLocationCoordinateRange[2]",
            "value": "{ 1.f, 0.f }"
        },
        {
            "groupComment": [
                "VK_KHR_acceleration_structure",
                "AccelerationStructurePropertiesKHR"
            ]
        },
        {
            "type": "uint64_t",
            "name": "maxAccelerationStructureGeometryCount",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxAccelerationStructureInstanceCount",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxAccelerationStructurePrimitiveCount",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxPerStageDescriptorAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxPerStageDescriptorUpdateAfterBindAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxDescriptorSetAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "maxDescriptorSetUpdateAfterBindAccelerationStructures",
            "value": 0
        },
        {
            "type": "uint64_t",
            "name": "minAccelerationStructureScratchOffsetAlignment",
            "value": 2147483648,
            "compareFlipped": true
        },
        {
            "groupComment": [
                "VK_KHR_ray_tracing_pipeline",
                "RayTracingPipelinePropertiesKHR"
            ]
        },
        {
            "type": "uint32_t",
            "name": "shaderGroupHandleSize",
            "value": 32,
            "expose": false,
            "comment": "`exact` limit type"
        },
        {
            "type": "uint32_t",
            "name": "maxRayRecursionDepth",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "maxShaderGroupStride",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "shaderGroupBaseAlignment",
            "value": 2147483648,
            "compareFlipped": true
        },
        {
            "type": "uint32_t",
            "name": "maxRayDispatchInvocationCount",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "shaderGroupHandleAlignment",
            "value": 2147483648,
            "compareFlipped": true
        },
        {
            "type": "uint32_t",
            "name": "maxRayHitAttributeSize",
            "value": 0
        },
        {
            "groupComment": [
                "VK_NV_shader_sm_builtins",
                "ShaderSMBuiltinsFeaturesNV"
            ]
        },
        {
            "type": "bool",
            "name": "shaderSMBuiltins",
            "value": false
        },
        {
            "type": "bool",
            "name": "postDepthCoverage",
            "value": false,
            "comment": "VK_EXT_post_depth_coverage"
        },
        {
            "groupComment": [
                "VK_KHR_shader_clock",
                "ShaderClockFeaturesKHR"
            ]
        },
        {
            "type": "bool",
            "name": "shaderDeviceClock",
            "value": false
        },
        {
            "groupComment": [
                "VK_NV_compute_shader_derivatives",
                "ComputeShaderDerivativesFeaturesNV"
            ]
        },
        {
            "type": "bool",
            "name": "computeDerivativeGroupQuads",
            "value": false
        },
        {
            "type": "bool",
            "name": "computeDerivativeGroupLinear",
            "value": false
        },
        {
            "groupComment": [
                "VK_NV_shader_image_footprint",
                "ShaderImageFootprintFeaturesNV"
            ]
        },
        {
            "type": "bool",
            "name": "imageFootprint",
            "value": false
        },
        {
            "groupComment": [
                "VK_INTEL_shader_integer_functions2",
                "ShaderIntegerFunctions3FeaturesINTEL"
            ]
        },
        {
            "type": "bool",
            "name": "shaderIntegerFunctions2",
            "value": false
        },
        {
            "groupComment": [
                "VK_EXT_pci_bus_info",
                "PCIBusInfoPropertiesEXT"
            ]
        },
        {
            "type": "uint32_t",
            "name": "pciDomain",
            "value": "~0u",
            "compareSkip": true
        },
        {
            "type": "uint32_t",
            "name": "pciBus",
            "value": "~0u",
            "compareSkip": true

        },
        {
            "type": "uint32_t",
            "name": "pciDevice",
            "value": "~0u",
            "compareSkip": true

        },
        {
            "type": "uint32_t",
            "name": "pciFunction",
            "value": "~0u",
            "compareSkip": true
        },
        {
            "groupComment": [
                "VK_EXT_fragment_density_map",
                "FragmentDensityMapPropertiesEXT"
            ]
        },
        {
            "type": "hlsl::uint32_t2",
            "name": "minFragmentDensityTexelSize",
            "value": "{ ~0u, ~0u }",
            "compareFlipped": true
        },
        {
            "type": "hlsl::uint32_t2",
            "name": "maxFragmentDensityTexelSize",
            "value": "{ 0u, 0u }",
            "compareSkip": true
        },
        {
            "type": "bool",
            "name": "fragmentDensityInvocations",
            "value": false
        },
        {
            "type": "bool",
            "name": "decorateString",
            "value": false,
            "comment": "VK_GOOGLE_decorate_string"
        },
        {
            "groupComment": [
                "VK_EXT_shader_image_atomic_int64",
                "ShaderImageAtomicInt65FeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "shaderImageInt64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageInt64Atomics",
            "value": false
        },
        {
            "groupComment": [
                "[TODO] this feature introduces new/more pipeline state with VkPipelineRasterizationLineStateCreateInfoEXT",
                "VK_EXT_line_rasterization",
                "LineRasterizationPropertiesEXT"
            ]
        },
        {
            "type": "uint32_t",
            "name": "lineSubPixelPrecisionBits",
            "value": 0
        },
        {
            "groupComment": [
                "VK_EXT_shader_atomic_float2",
                "ShaderAtomicFloat2FeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat16Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat16AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat16AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat32AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderBufferFloat64AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat16Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat16AtomicAdd",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat16AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat32AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedFloat64AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderImageFloat32AtomicMinMax",
            "value": false
        },
        {
            "type": "bool",
            "name": "sparseImageFloat32AtomicMinMax",
            "value": false
        },
        {
            "groupComment": [
                "[DO NOT EXPOSE] won't expose right now, will do if we implement the extension",
                "VK_NV_device_generated_commands",
                "DeviceGeneratedCommandsPropertiesNV"
            ]
        },
        {
            "type": "uint32_t",
            "name": "maxGraphicsShaderGroupCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectSequenceCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsTokenCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsStreamCount",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsTokenOffset",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "maxIndirectCommandsStreamStride",
            "value": 0,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "minSequencesCountBufferOffsetAlignment",
            "value": 2147483648,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "minSequencesIndexBufferOffsetAlignment",
            "value": 2147483648,
            "expose": false
        },
        {
            "type": "uint32_t",
            "name": "minIndirectCommandsBufferOffsetAlignment",
            "value": 2147483648,
            "expose": false
        },
        {
            "groupComment": [
                "[TODO] need impl",
                "VK_EXT_device_memory_report",
                "DeviceMemoryReportFeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "deviceMemoryReport",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderNonSemanticInfo",
            "value": false,
            "comment": "VK_KHR_shader_non_semantic_info"
        },
        {
            "groupComment": [
                "[TODO LATER] not in header (previous comment: too much effort)",
                "GraphicsPipelineLibraryPropertiesEXT",
                "provided by VK_EXT_graphics_pipeline_library"
            ]
        },
        {
            "type": "bool",
            "name": "graphicsPipelineLibraryFastLinking",
            "value": false,
            "expose": false
        },
        {
            "type": "bool",
            "name": "graphicsPipelineLibraryIndependentInterpolationDecoration",
            "value": false,
            "expose": false
        },
        {
            "type": "bool",
            "name": "shaderEarlyAndLateFragmentTests",
            "value": false,
            "comment": "VK_AMD_shader_early_and_late_fragment_tests"
        },
        {
            "type": "bool",
            "name": "fragmentShaderBarycentric",
            "value": false,
            "comment": "VK_KHR_fragment_shader_barycentric"
        },
        {
            "groupComment": [
                "VK_KHR_shader_subgroup_uniform_control_flow",
                "ShaderSubgroupUniformControlFlowFeaturesKHR"
            ]
        },
        {
            "type": "bool",
            "name": "shaderSubgroupUniformControlFlow",
            "value": false
        },
        {
            "groupComment": [
                "provided by VK_EXT_fragment_density_map2",
                "FragmentDensityMap2PropertiesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "subsampledLoads",
            "value": false
        },
        {
            "type": "bool",
            "name": "subsampledCoarseReconstructionEarlyAccess",
            "value": false
        },
        {
            "type": "uint32_t",
            "name": "maxSubsampledArrayLayers",
            "value": 0
        },
        {
            "type": "uint32_t",
            "name": "maxDescriptorSetSubsampledSamplers",
            "value": 0
        },
        {
            "groupComment": [
                "VK_KHR_workgroup_memory_explicit_layout",
                "WorkgroupMemoryExplicitLayoutFeaturesKHR"
            ]
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayout",
            "value": false
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayoutScalarBlockLayout",
            "value": false
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayout8BitAccess",
            "value": false
        },
        {
            "type": "bool",
            "name": "workgroupMemoryExplicitLayout16BitAccess",
            "value": false
        },
        {
            "groupComment": [
                "[TODO] need new commandbuffer methods, etc",
                "VK_EXT_color_write_enable",
                "ColorWriteEnableFeaturesEXT"
            ]
        },
        {
            "type": "bool",
            "name": "colorWriteEnable",
            "value": false
        },
        {
            "groupComment": [
                "CooperativeMatrixPropertiesKHR",
                "VK_KHR_cooperative_matrix"
            ]
        },
        {
            "type": "core::bitflag<asset::IShader::E_SHADER_STAGE>",
            "name": "cooperativeMatrixSupportedStages",
            "value": "asset::IShader::ESS_UNKNOWN"
        }
    ],
    "core10": [
        {
            "groupComment": [
                "Always enabled if available, reported as limits",
                "Core 1.0 Features"
            ]
        },
        {
            "type": "bool",
            "name": "logicOp",
            "value": false,
            "comment": "mostly just desktops support this"
        },
        {
            "type": "bool",
            "name": "vertexPipelineStoresAndAtomics",
            "value": false,
            "comment": "All iOS GPUs don't support"
        },
        {
            "type": "bool",
            "name": "fragmentStoresAndAtomics",
            "value": false,
            "comment": "ROADMAP 2022 no support on iOS GPUs"
        },
        {
            "type": "bool",
            "name": "shaderTessellationAndGeometryPointSize",
            "value": false,
            "comment": "Candidate for promotion, just need to look into Linux and Android"
        },
        {
            "type": "bool",
            "name": "shaderStorageImageMultisample",
            "value": false,
            "comment": "Apple GPUs and some Intels don't support"
        },
        {
            "type": "bool",
            "name": "shaderStorageImageReadWithoutFormat",
            "value": false,
            "comment": "Intel is a special boy and doesn't support"
        },
        {
            "type": "bool",
            "name": "shaderStorageImageArrayDynamicIndexing",
            "value": false,
            "comment": "ROADMAP 2022 but no iOS GPU supports"
        },
        {
            "type": "bool",
            "name": "shaderFloat64",
            "value": false,
            "comment": "Intel Gen12 and ARC are special-boy drivers (TM)"
        },
        {
            "type": "bool",
            "name": "variableMultisampleRate",
            "value": false,
            "comment": "poor support on Apple GPUs"
        },
        {
            "groupComment": [
                "Core 1.1 Features or VK_KHR_16bit_storage"
            ]
        },
        {
            "type": "bool",
            "name": "storagePushConstant16",
            "value": false
        },
        {
            "type": "bool",
            "name": "storageInputOutput16",
            "value": false
        },
        {
            "groupComment": [
                "Core 1.1 Features or VK_KHR_multiview, normally would be required but MoltenVK mismatches these"
            ]
        },
        {
            "type": "bool",
            "name": "multiviewGeometryShader",
            "value": false
        },
        {
            "type": "bool",
            "name": "multiviewTessellationShader",
            "value": false
        },
        {
            "type": "bool",
            "name": "drawIndirectCount",
            "value": false,
            "comment": "Vulkan 1.2 Core or VK_KHR_draw_indirect_count"
        },
        {
            "type": "bool",
            "name": "storagePushConstant8",
            "value": false,
            "comment": "Vulkan 1.2 Core or VK_KHR_9bit_storage"
        },
        {
            "groupComment": [
                "Vulkan 1.2 Core or VK_KHR_shader_atomic_int65"
            ]
        },
        {
            "type": "bool",
            "name": "shaderBufferInt64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderSharedInt64Atomics",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderFloat16",
            "value": false,
            "comment": "Vulkan 1. Core or VK_KHR_shader_float17_int9"
        },
        {
            "groupComment": [
                "Vulkan 1.2 Core or VK_EXT_descriptor_indexing"
            ]
        },
        {
            "type": "bool",
            "name": "shaderInputAttachmentArrayDynamicIndexing",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderUniformBufferArrayNonUniformIndexing",
            "value": false
        },
        {
            "type": "bool",
            "name": "shaderInputAttachmentArrayNonUniformIndexing",
            "value": false
        },
        {
            "type": "bool",
            "name": "descriptorBindingUniformBufferUpdateAfterBind",
            "value": false
        },
        {
            "groupComment": [
                "Vulkan 1.2 or VK_EXT_sampler_filter_minmax"
            ]
        },
        {
            "type": "bool",
            "name": "samplerFilterMinmax",
            "value": false,
            "comment": "TODO: Actually implement the sampler flag enums"
        },
        {
            "type": "bool",
            "name": "vulkanMemoryModelAvailabilityVisibilityChains",
            "value": false,
            "comment": "Vulkan 1.3 requires but we make concessions for MoltenVK"
        },
        {
            "groupComment": [
                "Vulkan 1.2 Core or VK_EXT_shader_viewport_index_layer"
            ]
        },
        {
            "type": "bool",
            "name": "shaderOutputViewportIndex",
            "value": false,
            "comment": "ALIAS: VK_EXT_shader_viewport_index_layer"
        },
        {
            "type": "bool",
            "name": "shaderOutputLayer",
            "value": false,
            "comment": "ALIAS: VK_EXT_shader_viewport_index_layer"
        },
        {
            "groupComment": [
                "Vulkan 1.3 non-optional requires but poor support"
            ]
        },
        {
            "type": "bool",
            "name": "shaderDemoteToHelperInvocation",
            "value": false,
            "comment": "or VK_EXT_shader_demote_to_helper_invocation"
        },
        {
            "type": "bool",
            "name": "shaderTerminateInvocation",
            "value": false,
            "comment": "or VK_KHR_shader_terminate_invocation"
        },
        {
            "groupComment": [
                "Vulkan 1.3 non-optional requires but poor support"
            ]
        },
        {
            "type": "bool",
            "name": "shaderZeroInitializeWorkgroupMemory",
            "value": false,
            "comment": "or VK_KHR_zero_initialize_workgroup_memory"
        }
    ],
    "nabla": [
        {
            "groupComment": [
                "Nabla"
            ]
        },
        {
            "type": "uint32_t",
            "name": "computeUnits",
            "value": 0
        },
        {
            "type": "bool",
            "name": "dispatchBase",
            "value": false,
            "comment": "true in Vk, false in GL"
        },
        {
            "type": "bool",
            "name": "allowCommandBufferQueryCopies",
            "value": false
        },
        {
            "type": "uint32_t",
            "name": "maxOptimallyResidentWorkgroupInvocations",
            "value": 0,
            "comment": "its 1D because multidimensional workgroups are an illusion"
        },
        {
            "type": "uint32_t",
            "name": "maxResidentInvocations",
            "value": 0,
            "comment": "These are maximum number of invocations you could expect to execute simultaneously on this device"
        },
        {
            "type": "asset::CGLSLCompiler::E_SPIRV_VERSION",
            "name": "spirvVersion",
            "value": "asset::CGLSLCompiler::E_SPIRV_VERSION::ESV_1_6"
        }
    ]
}